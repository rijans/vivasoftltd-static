<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>microservices &#8211; Vivasoft</title>
	<atom:link href="/blog/tag/microservices/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Top Software Company with Talented Geeks</description>
	<lastBuildDate>Wed, 10 Aug 2022 06:42:37 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1</generator>

<image>
	<url>/wp-content/uploads/2021/08/cropped-feb-icon-32x32.png</url>
	<title>microservices &#8211; Vivasoft</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>What is REST API?</title>
		<link>/blog/what-is-rest-api/</link>
					<comments>/blog/what-is-rest-api/#respond</comments>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Wed, 10 Aug 2022 06:42:37 +0000</pubDate>
				<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[Personal]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[api]]></category>
		<category><![CDATA[Basics]]></category>
		<category><![CDATA[Http]]></category>
		<category><![CDATA[microservices]]></category>
		<category><![CDATA[REST]]></category>
		<guid isPermaLink="false">/?p=9944</guid>

					<description><![CDATA[Let&#8217;s go through an example to understand what a REST API is. Let&#8217;s say that we work for a cloud kitchen and we want to build a web application that can give you how much stock particular items suppose ice cream flavors are available and the worker working on the physical location of the kitchen [&#8230;]]]></description>
										<content:encoded><![CDATA[<p class="maps-to-line">Let&#8217;s go through an example to understand what a REST API is. Let&#8217;s say that we work for a cloud kitchen and we want to build a web application that can give you how much stock particular items suppose ice cream flavors are available and the worker working on the physical location of the kitchen makes updates to those flavors. So the question arises how do we do this?</p>
<blockquote class="maps-to-line">
<h3 id="the-answer-will-be-with-a-rest-api">The answer will be with a REST API.</h3>
</blockquote>
<p class="maps-to-line">Most of the application today uses 3-tier architecture. Some complex systems can even have an n-tier architecture which we called <code class="inline-code">microservices</code>, which will be explained in another post in the future.<br />
So In 3-tier architecture&#8230;</p>
<ul>
<li class="maps-to-line">Backend (Application tier)</li>
<li class="maps-to-line">Frontend (Presentation tier)</li>
<li class="maps-to-line">Database (Data tier)</li>
</ul>
<p class="maps-to-line">So we have our frontend app or web page communicate with a cloud-based backend server via a REST API. We use the term REST API whenever our Frontend app communicates with our Backend server. So Let&#8217;s jump into what exactly a REST API is.</p>
<h3 id="what-does-rest-stand-for" class="maps-to-line">What does <code class="inline-code">REST</code> stand for?</h3>
<blockquote class="maps-to-line"><p>REST &#8211; Representational State Transfer.</p></blockquote>
<p class="maps-to-line">This is a type of web communications protocol that allows browsers to access data from a server using the HTTP or HTTPS protocols. RESTful architecture is an approach to designing and building software systems such as websites, mobile applications, and web services that use HTTP methods to manipulate resources residing on the server. RESTful APIs are becoming more popular because they are lightweight, easy to use and consume, and easy to read and understand. They allow for easier integration with front-end developers&#8217; code. A RESTful API can be accessed via different devices such as computers and smartphones by using a library or framework known as a client library.</p>
<p class="maps-to-line">It&#8217;s a standardized software architecture style which is a specific type of API that&#8217;s an industry known and used.</p>
<p class="maps-to-line">The first thing that we have to know about REST API is, that they&#8217;re all about communications. So this is how our frontend application communicates with our backend server. Sometimes we also heard RESTFUL Web service, which means is when a service that uses REST APIs to communicate. Let&#8217;s go through some of the benefits of REST API</p>
<ol>
<li class="maps-to-line"><strong>Simple/Standardized</strong> &#8211; approach to communication. We don&#8217;t have to worry about how to format our data or how to format each request coming to our system.</li>
<li class="maps-to-line"><strong>Scale</strong> &#8211; As our service grows in complexity, we can make modifications to handle a large number of requests</li>
<li class="maps-to-line"><strong>Stateless</strong> &#8211; we don&#8217;t have to worry about what data is in which state they&#8217;re in and keep track of that across client and server.</li>
<li class="maps-to-line"><strong>High Performance</strong> &#8211; even though our service gets more complex the performance remains very high.</li>
<li class="maps-to-line"><strong>Cache</strong> &#8211; It supports caching too.</li>
</ol>
<p class="maps-to-line">Let&#8217;s back to our example again, for the cloud kitchen shop, a REST API would look like the below&#8230;</p>
<p class="maps-to-line">We have an endpoint that might look something like this: <code class="inline-code">https://api.littlegiants.io/v1/items</code><br />
So <code class="inline-code">api.littlegiants.io</code> is our DNS(Domain Name Server) for our backend application and the <code class="inline-code">api</code> part signifies it&#8217;s an API subdomain and <code class="inline-code">v1</code> means it&#8217;s the version one of that API and <code class="inline-code">items</code> represents a <code class="inline-code">resource</code>. So, this signifies that we&#8217;re working with the <code class="inline-code">items</code> resource in this REST API.</p>
<p class="maps-to-line">In our example, we can build some blocks to define REST API.</p>
<p class="maps-to-line">First, we have to be able to send a request to the server or a specific service in our case cloud kitchen service. So, for a REST API call <code class="inline-code">request</code> we need to have some blocks.</p>
<p class="maps-to-line">Lets break <code class="inline-code">Request</code> &amp; <code class="inline-code">Response</code> apart a little bit. Let&#8217;s say <code class="inline-code">Request</code> as a big black box.<br />
First things first, let&#8217;s define the type of things that we might want to do with a REST API. What actions or verbs would we want to use when working with one?<br />
As a developer, we have all heard of <code class="inline-code">CRUD</code> &#8211; what does <code class="inline-code">CRUD</code> stands for?</p>
<ul>
<li class="maps-to-line">Create</li>
<li class="maps-to-line">Read</li>
<li class="maps-to-line">Update</li>
<li class="maps-to-line">Delete</li>
</ul>
<p class="maps-to-line">So what&#8217;ll be the equivalent of <code class="inline-code">Create</code> in an HTTP method? Well, it&#8217;s <code class="inline-code">POST</code>. How about <code class="inline-code">Read</code> &#8211; it&#8217;s <code class="inline-code">GET</code>. An update would be <code class="inline-code">PUT</code>, Also Note if you want a partial update we use <code class="inline-code">PATCH</code> and for <code class="inline-code">DELETE</code> we use <code class="inline-code">DELETE</code> HTTP methods.</p>
<p class="maps-to-line">The <code class="inline-code">Request</code> itself has some blocks which will be explained below&#8230;</p>
<ol>
<li class="maps-to-line"><strong>Operation</strong> &#8211; This could be HTTP methods like POST, GET, PUT, PATCH, etc. In our case, we&#8217;ll use PATCH to update the item stock in our application.</li>
<li class="maps-to-line"><strong>Parameters/Body</strong> &#8211; Although this is Optional. In our case, we send a JSON object as a body stating the current stock of the item in our system.</li>
<li class="maps-to-line"><strong>Endpoint</strong> &#8211; This part will be exposed by the cloud kitchen service where we need to send the resource&#8217;s current state to the endpoint. <code class="inline-code">https://api.littlegiants.io/v1/items</code></li>
<li class="maps-to-line"><strong>Headers</strong> &#8211; This is a special part of a REST API request which might have things like an API key or some authentication data.</li>
</ol>
<p class="maps-to-line">The above four points act as a request in a REST API call.</p>
<p class="maps-to-line">So now the question is what will be the response of the REST API call? Typically it&#8217;s some form of raw data, maybe JSON(Which Stands for Javascript Object Notation) or maybe XML(Extended Markup language), etc. In JSON it might look like below</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "message": "items updated"
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">Let&#8217;s look at a few different scenarios that might happen with our cloud kitchen shop. So let&#8217;s say that we want to display what&#8217;s products we&#8217;re selling in the shop. For that, we have to get the items we have in the shop. From the <code class="inline-code">Request</code> point of view how it looks like?<br />
Well, we have the <code class="inline-code">GET</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items</code>, Also parameters can be set to get a single item in the endpoint, headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.<br />
In response, we&#8217;ll get a list of item resources.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    [
        {
            "item_id": 1,
            "name": "Burger",
            "price": 10,
            "stock": 5
        },
        {
            "item_id": 2,
            "name": "Sandwitch",
            "price": 8,
            "stock": 3
        }
    ]
}</pre>
<p class="maps-to-line">So we get some items like burgers, sandwiches, etc. In our shop let&#8217;s say a Sandwich is so popular that it runs out for the day and the store is scrambling and they want to update the stock of that item. So let&#8217;s say they want to update the Sandwich stock so that they can sell Sandwich.<br />
Well, we have the <code class="inline-code">PUT</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items/2</code>, Also parameters 2 represent the Sandwich item in the endpoint also in the body we add the latest stock value as json,</p>
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "name": "Sandwitch",
    "price": 8,
    "stock": 10
}</pre>
<p class="maps-to-line">headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.</p>
<p class="maps-to-line">Let&#8217;s say we want to add a new item in the store like <code class="inline-code">Ice cream</code>. Well, we have the <code class="inline-code">POST</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items</code>, As body, we add the latest item value as json,</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "name": "Ice Cream",
    "price": 4,
    "stock": 10
}</pre>
</div>
<p class="maps-to-line">headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.<br />
In response, we see a response like below</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "item_id": 3
    "name": "Ice Cream",
    "price": 4,
    "stock": 10
}</pre>
</div>
<p class="maps-to-line">Let&#8217;s say some item is not selling at all in the shop so the store owner decided to remove it from the store. Well, we have the <code class="inline-code">DELETE</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items/3</code>, Also parameters 3 represent the item in the endpoint, headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.</p>
<p>If you like, you can read the same article on my <a href="https://rezwanul-haque.hashnode.dev/what-is-rest-api" rel="nofollow noopener" target="_blank">[Personal blog]</a></p>
<blockquote>
<h4>You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">[Here]</a></h4>
</blockquote>
<p class="maps-to-line">In Conclusion, We&#8217;re hoping that this clarifies what exactly is a REST API. What are some of the benefits? What&#8217;s a real-world example look like and how are the REST APIs fundamental to cloud-based application development?</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/what-is-rest-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>মাইক্রোসার্ভিসের অ্যাসিনক্রোনাস কমিউনিকেশনঃ  .NET6, RabbitMQ, MassTransit</title>
		<link>/blog/asynchronous-communication/</link>
					<comments>/blog/asynchronous-communication/#respond</comments>
		
		<dc:creator><![CDATA[Khairul Alam]]></dc:creator>
		<pubDate>Sat, 21 May 2022 11:09:54 +0000</pubDate>
				<category><![CDATA[Technology]]></category>
		<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[.NET6]]></category>
		<category><![CDATA[MassTransit]]></category>
		<category><![CDATA[microservices]]></category>
		<category><![CDATA[RabbitMQ]]></category>
		<guid isPermaLink="false">/?p=8500</guid>

					<description><![CDATA[আজকে আমরা মাইক্রোসার্ভিসের অ্যাসিনক্রোনাস কমিউনিকেশন নিয়ে কিছু সাধারন আলোচনা করবো ( কেন, কি, কিভাবে)। আমরা জানি মাইক্রোসার্ভিসের সার্ভিস থেকে সার্ভিসের কমিউনিকেশন সাধারণত দুই ভাবে হয়ে থাকে। ১) সিনক্রোনাসঃ এ ক্ষেত্রে সাধারণত রিকোয়েস্ট রেস্পন্স ( http/grpc) প্যাটার্নে মাইক্রোসার্ভিস একে অপরের সাথে কমিউনিকেশন করে থাকে। যেখানে এক্সচেঞ্জের ধারাবাহিক সিকুয়েন্স থাকে যা অর্কেস্ট্রেশন জন্য সুবিধাজনক। তবে API গুলো [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>আজকে আমরা মাইক্রোসার্ভিসের অ্যাসিনক্রোনাস কমিউনিকেশন নিয়ে কিছু সাধারন আলোচনা করবো ( কেন, কি, কিভাবে)।</p>
<p>আমরা জানি মাইক্রোসার্ভিসের সার্ভিস থেকে সার্ভিসের কমিউনিকেশন সাধারণত দুই ভাবে হয়ে থাকে।<br />
১) সিনক্রোনাসঃ এ ক্ষেত্রে সাধারণত রিকোয়েস্ট রেস্পন্স ( http/grpc) প্যাটার্নে মাইক্রোসার্ভিস একে অপরের সাথে কমিউনিকেশন করে থাকে। যেখানে এক্সচেঞ্জের ধারাবাহিক সিকুয়েন্স থাকে যা অর্কেস্ট্রেশন জন্য সুবিধাজনক।<br />
তবে API গুলো একে অনের সাথে End Point দ্বারা একে অন্যের সরাসরি নির্ভরশীল থাকে, কোন একটা API End Point পরিবর্তন হলে নির্ভরশীল মাইক্রোসারভিস এ নতুন করে API End Point সেট করতে হয়।</p>
<p>২) অ্যাসিনক্রোনাসঃ এখানে মাইক্রোসার্ভিস একটা সেন্ট্রাল সিস্টেম এর মাধ্যমে মেসেজ বিনিময়ে ( Event Driven) কমিউনিকেশন করে থাকে। মাইক্রোসার্ভিস গুলো একে অন্যের সরাসরি নির্ভরশীল থাকে না যার কারনে<br />
সার্ভিস গুলো স্বাধীন ভাবে ডেপলয় ও নিয়ন্ত্রন করা যায়।</p>
<p>যে সেন্ট্রাল সিস্টেমের মাধ্যমে মেসেজ বিনিময়ে হয়ে থাকে তাকে Message Broker বলা হয়ে থাকে। আমরা একে একটা ডাকঘর/পোস্ট অফিস এর সাথে তুলনা করতে পারি- একটা ডাকঘরে বিভিন্ন অফিসের- সরকারি , বেসরকারি, বেক্তিগত চিঠিপত্র আসে আর ডাকঘর কর্তৃপক্ষ বিশেষ ঠিকানা দেখে চিঠি গুলো সঠিক ভাবে পৌঁছে দেয়। অনেক Message Broker আছে তার মধ্যে RabbitMQ, Kafka, ActiveMQ উল্লেখ যোগ্য, তাছাড়া ক্লাউড সার্ভিস প্রোভাইডাররা নিজস্ব Message Broker সার্ভিস দিয়ে থাকে।</p>
<p>আমাদের উদাহরনে আমরা RabbitMQ ব্যবহার করবো আর RabbitMQ-র দুটি গুরুত্বপূর্ণ পার্ট হল-<br />
১) Exchanges: এর কাজ মুলত মেসজ গ্রহন করা এবং সঠিক Queues এ বিতরন করা<br />
২) Queues: Exchanges মাধ্যমে মেসজ গ্রহন করে এবং কনফিগারেশন অনুসারে সংরক্ষন করে থাকে।</p>
<p>Exchanges আবার চার ধরনের হয়ে থাকে-<br />
১) Fanout: মেসজ কে সরাসরি সকল Queue তে পৌঁছে দেয় যেসব Queue নির্দিষ্ট Exchange এ বাইন্ড করা আছে।<br />
<img decoding="async" class="aligncenter wp-image-8505" src="/wp-content/uploads/2022/05/fanout-exchange.png" alt="fanout মাইক্রোসার্ভিসের অ্যাসিনক্রোনাস কমিউনিকেশনঃ .NET6, RabbitMQ, MassTransit" width="772" height="339"><br />
2) Direct: মেসজ কে সরাসরি সকল Queue তে পৌঁছে না দিয়ে বরং Routing Key বা Binding Key যাচাই করে বাইন্ড করা Queue তে পৌঁছে দেয়।<br />
<img decoding="async" class="aligncenter wp-image-8504" src="/wp-content/uploads/2022/05/direct-exchange.png" alt="direct মাইক্রোসার্ভিসের অ্যাসিনক্রোনাস কমিউনিকেশনঃ .NET6, RabbitMQ, MassTransit" width="757" height="292"><br />
3) Topic: মেসজ কে সেই সব Queue তে পৌঁছে দেয় যাদের Routing Key বা Binding আংশিক বা সম্পূর্ণ মিলে যায়।<br />
<img decoding="async" class="aligncenter wp-image-8507" src="/wp-content/uploads/2022/05/topic-exchange.png" alt="topic মাইক্রোসার্ভিসের অ্যাসিনক্রোনাস কমিউনিকেশনঃ .NET6, RabbitMQ, MassTransit" width="849" height="365"><br />
4) Headers: Header এর Key-Value কে Routing Key বা Binding এর সাথে যাচাই করে মেসজ কে Queue তে পৌঁছে দেয়।<br />
<img decoding="async" class="aligncenter wp-image-8506" src="/wp-content/uploads/2022/05/header-exchange.png" alt="header মাইক্রোসার্ভিসের অ্যাসিনক্রোনাস কমিউনিকেশনঃ .NET6, RabbitMQ, MassTransit" width="838" height="305"></p>
<p>এখানে আমাদের দুটি সার্ভিস রয়েছে- WeatherForecast: একটা CRUD App যেখান থেকে তাপমাত্রার আপডেট RabbitMQ তে পাবলিশ করা হয় । অন্যটি WeatherForecast.Consumer: এটি RabbitMQ হতে মেসেজ কনজিউম/গ্রহন করে এবং ডিসপ্লে করে।<br />
<img decoding="async" class="aligncenter size-full wp-image-8510" src="/wp-content/uploads/2022/05/services.png" alt="services মাইক্রোসার্ভিসের অ্যাসিনক্রোনাস কমিউনিকেশনঃ .NET6, RabbitMQ, MassTransit" width="3286" height="1081" srcset="/wp-content/uploads/2022/05/services.png 3286w, /wp-content/uploads/2022/05/services-1280x421.png 1280w, /wp-content/uploads/2022/05/services-980x322.png 980w, /wp-content/uploads/2022/05/services-480x158.png 480w" sizes="(min-width: 0px) and (max-width: 480px) 480px, (min-width: 481px) and (max-width: 980px) 980px, (min-width: 981px) and (max-width: 1280px) 1280px, (min-width: 1281px) 3286px, 100vw"></p>
<p>এখানে আমাদের দুটি সার্ভিস রয়েছে- WeatherForecast: একটা CRUD App যেখান থেকে তাপমাত্রার আপডেট RabbitMQ তে পাবলিশ করা হয় । অন্যটি WeatherForecast.Consumer: এটি RabbitMQ হতে মেসেজ কনজিউম/গ্রহন করে এবং ডিসপ্লে করে।<br />
RabbitMQ এর অ্যাবস্ট্র্যাক্ট হিসাবে MassTransit ব্যবহার করা হবে যাতে আমাদের সার্ভিস RabbitMQ এর সাথে loosely-coupled থাকে।</p>
<p><strong>WeatherForecast  Publisher API:</strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">using MassTransit;

[HttpPost]
[Authorize(policy: "Admin")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesDefaultResponseType]
public async Task&lt;IActionResult&gt; Create([FromForm] CreateWeatherForecastCommand command)
{
    response.Data = await Mediator.Send(command);
    response.Message = "Item Added successfully";

    //Masstransit...
    _publishEndpoint?.Publish(new WeatherForecastEvent(command.TemperatureC, command.Location, command.Summary, DateTime.UtcNow, EventBusEnums.CREATED.ToString()));

    return Ok(response);
}


[HttpPut]
[Authorize(policy: "Admin")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesDefaultResponseType]
public async Task&lt;ActionResult&gt; Update([FromForm] UpdateWeatherForecastCommand command)
{
    response.Data = await Mediator.Send(command);
    response.Message = "Item updated successfully";
    
    //Masstransit...
    _publishEndpoint?.Publish(new WeatherForecastEvent(command.TemperatureC, command.Location, command.Summary, DateTime.UtcNow, EventBusEnums.UPDATED.ToString()));

    return Ok(response);
}</pre>
<p><strong>Add MassTransit &amp; RabbitMq in Service Registry(WeatherForecast  Publisher AP):</strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">using MassTransit;

#region MassTransit
services.AddMassTransit(config =&gt;
{
config.UsingRabbitMq((ctx, cfg) =&gt;
{
cfg.Send&lt;WeatherForecastEvent&gt;(x =&gt;
{
});
cfg.Message&lt;WeatherForecastEvent&gt;(x =&gt; x.SetEntityName(EventBusConstants.Exchages.WeatherForecastExchange));
cfg.Publish&lt;WeatherForecastEvent&gt;(x =&gt; x.ExchangeType = ExchangeType.Fanout);
});
});</pre>
<p><strong>WeatherForecast.Consumer Console App:<br />
</strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">using EventBus.Common;
using EventBus.Events;
using MassTransit;
using Newtonsoft.Json;
using RabbitMQ.Client;


var busControl = Bus.Factory.CreateUsingRabbitMq(cfg =&gt;
{
    cfg.ReceiveEndpoint(EventBusConstants.Queues.WeatherForecastCreatedQueue, e =&gt;
    {
        // turns off default fanout settings
        e.ConfigureConsumeTopology = false;
        // a replicated queue to provide high availability and data safety. available in RMQ 3.8+
        //e.SetQuorumQueue();
        //e.SetQueueArgument("declare", "lazy");


        e.Consumer&lt;WeatherForecastCreatedConsumer&gt;();
        e.Bind(EventBusConstants.Exchages.WeatherForecastExchange, s =&gt;
        {
            //s.RoutingKey = EventBusEnums.CREATED.ToString();
            //s.ExchangeType = ExchangeType.Direct;
        });

        e.PrefetchCount = 20;
        e.UseMessageRetry(r =&gt; r.Interval(2, 100));

    });

    cfg.ReceiveEndpoint(EventBusConstants.Queues.WeatherForecastUpdatedQueue, e =&gt;
    {
        // turns off default fanout settings
        e.ConfigureConsumeTopology = false;
        // a replicated queue to provide high availability and data safety. available in RMQ 3.8+
        //e.SetQuorumQueue();
        //e.SetQueueArgument("declare", "lazy");

        e.Consumer&lt;WeatherForecastUpdatedConsumer&gt;();
        e.Bind("WeatherForecast-Exchange", s =&gt;
        {
            //s.RoutingKey = EventBusEnums.UPDATED.ToString();
            //s.ExchangeType = ExchangeType.Direct;
        });

        e.PrefetchCount = 20;
        e.UseMessageRetry(r =&gt; r.Interval(2, 100));

    });
});

await busControl.StartAsync(new CancellationToken());

try
{
    Console.WriteLine("Press enter to exit");

    await Task.Run(() =&gt; Console.ReadLine());
}
finally
{
    await busControl.StopAsync();
}

class WeatherForecastCreatedConsumer : IConsumer&lt;WeatherForecastEvent&gt;
{
    public async Task Consume(ConsumeContext&lt;WeatherForecastEvent&gt; context)
    {
        await Task.Run(() =&gt;
        {
            var jsonMessage = JsonConvert.SerializeObject(context.Message);
            Console.WriteLine($"New weather forecast for {context.Message.Location} is added: {jsonMessage}");
        });
    }
}

class WeatherForecastUpdatedConsumer : IConsumer&lt;WeatherForecastEvent&gt;
{
    public async Task Consume(ConsumeContext&lt;WeatherForecastEvent&gt; context)
    {
        await Task.Run(() =&gt;
        {
            var jsonMessage = JsonConvert.SerializeObject(context.Message);
            Console.WriteLine($"Weather forecast for {context.Message.Location} is updated : {jsonMessage}");
        });
    }
}
</pre>
<p>কনজিউমার সার্ভিসে দুটি কনজিউমার আছে &#8211;<br />
WeatherForecastCreatedConsumer: WeatherForecastCreated-Queue থেকে মেসেজ গ্রহন করবে, যেখানে Queue টি &#8216;CREATED&#8217; নামের Binding/Routing Key দিয়ে WeatherForecast-Exchange বাইন্ড করা আছে।<br />
WeatherForecastUpdatedConsumer: WeatherForecastUpdated-Queue থেকে মেসেজ গ্রহন করবে, যেখানে Queue টি &#8216;UPDATED&#8217; নামের Binding/Routing Key দিয়ে WeatherForecast-Exchange বাইন্ড করা আছে।</p>
<p>এখন সার্ভিস দুটি রান করে ওয়েদার অ্যাড এবং আপডেট করিঃ<br />
<img decoding="async" class="aligncenter size-full wp-image-8522" src="/wp-content/uploads/2022/05/fanout-example.png" alt="fanout মাইক্রোসার্ভিসের অ্যাসিনক্রোনাস কমিউনিকেশনঃ .NET6, RabbitMQ, MassTransit" width="1880" height="999" srcset="/wp-content/uploads/2022/05/fanout-example.png 1880w, /wp-content/uploads/2022/05/fanout-example-1280x680.png 1280w, /wp-content/uploads/2022/05/fanout-example-980x521.png 980w, /wp-content/uploads/2022/05/fanout-example-480x255.png 480w" sizes="(min-width: 0px) and (max-width: 480px) 480px, (min-width: 481px) and (max-width: 980px) 980px, (min-width: 981px) and (max-width: 1280px) 1280px, (min-width: 1281px) 1880px, 100vw"></p>
<p>একটা ওয়েদার ইনফরমেশন অ্যাড এবং আপডেট করা হয়ছে কিন্তু আমরা দেখছি যে , WeatherForecastCreatedConsumer ও WeatherForecastUpdatedConsumer দুটি কনজিউমারই একই মেসেজ প্রিন্ট করেছে এর কারন<br />
Add MassTransit &amp; RabbitMq in Service Registry সেকশনে Binding/Routing Key কনফিগার করা হয়নি এবং এক্সচেঞ্জ টাইপ Fanout আছে।</p>
<p>এবার আমরা এক্সচেঞ্জ টাইপ Direct -এ পরিবর্তন করে সার্ভিস আবার টেস্ট করি।<br />
<strong>Publisher App:</strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">services.AddMassTransit(config =&gt;
     {
         config.UsingRabbitMq((ctx, cfg) =&gt;
         {
             cfg.Send&lt;WeatherForecastEvent&gt;(x =&gt;
             {
                 // use customeType for the routing/binding key
                 x.UseRoutingKeyFormatter(context =&gt; context.Message.EventType?.ToString()); // route by provider (CREATE or UPDATE)

                 // multiple conventions can be set, in this case also CorrelationId
                 //x.UseCorrelationId(context =&gt; context.Message.TransactionId);
             });
             cfg.Message&lt;WeatherForecastEvent&gt;(x =&gt; x.SetEntityName(EventBusConstants.Exchages.WeatherForecastExchange));
             cfg.Publish&lt;WeatherForecastEvent&gt;(x =&gt; x.ExchangeType = ExchangeType.Direct);
         });
     });</pre>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">cfg.ReceiveEndpoint(EventBusConstants.Queues.WeatherForecastCreatedQueue, e =&gt;
{
    // turns off default fanout settings
    e.ConfigureConsumeTopology = false;
    // a replicated queue to provide high availability and data safety. available in RMQ 3.8+
    //e.SetQuorumQueue();
    //e.SetQueueArgument("declare", "lazy");


    e.Consumer&lt;WeatherForecastCreatedConsumer&gt;();
    e.Bind(EventBusConstants.Exchages.WeatherForecastExchange, s =&gt;
    {
        s.RoutingKey = EventBusEnums.CREATED.ToString();
        s.ExchangeType = ExchangeType.Direct;
    });

    e.PrefetchCount = 20;
    e.UseMessageRetry(r =&gt; r.Interval(2, 100));

});

cfg.ReceiveEndpoint(EventBusConstants.Queues.WeatherForecastUpdatedQueue, e =&gt;
{
    // turns off default fanout settings
    e.ConfigureConsumeTopology = false;
    // a replicated queue to provide high availability and data safety. available in RMQ 3.8+
    //e.SetQuorumQueue();
    //e.SetQueueArgument("declare", "lazy");

    e.Consumer&lt;WeatherForecastUpdatedConsumer&gt;();
    e.Bind("WeatherForecast-Exchange", s =&gt;
    {
        s.RoutingKey = EventBusEnums.UPDATED.ToString();
        s.ExchangeType = ExchangeType.Direct;
    });

    e.PrefetchCount = 20;
    e.UseMessageRetry(r =&gt; r.Interval(2, 100));

});</pre>
<p><img decoding="async" class="aligncenter size-full wp-image-8527" src="/wp-content/uploads/2022/05/direct-example.png" alt="direct মাইক্রোসার্ভিসের অ্যাসিনক্রোনাস কমিউনিকেশনঃ .NET6, RabbitMQ, MassTransit" width="1878" height="998" srcset="/wp-content/uploads/2022/05/direct-example.png 1878w, /wp-content/uploads/2022/05/direct-example-1280x680.png 1280w, /wp-content/uploads/2022/05/direct-example-980x521.png 980w, /wp-content/uploads/2022/05/direct-example-480x255.png 480w" sizes="(min-width: 0px) and (max-width: 480px) 480px, (min-width: 481px) and (max-width: 980px) 980px, (min-width: 981px) and (max-width: 1280px) 1280px, (min-width: 1281px) 1878px, 100vw"></p>
<p>এবার দেখতে পাচ্ছি, একটা ওয়েদার ইনফরমেশন আপডেট করায় শুধু WeatherForecastUpdatedConsumer মেসেজ প্রিন্ট করেছে কারন এবার আমরা Binding/Routing Key উল্লেখ করে দিয়েছি।</p>
<p>আশাকরি, মাইক্রোসার্ভিসের অ্যাসিনক্রোনাস কমিউনিকেশনে RabbitMQ, MassTransit কিভাবে কাজ করে তার কিছু ধারনা দিতে পেরেছি।<br />
ধন্যবাদ।।</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/asynchronous-communication/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Trade-offs for Monoliths and Microservices</title>
		<link>/blog/trade-offs-for-monoliths-and-microservices/</link>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Mon, 28 Jun 2021 21:28:49 +0000</pubDate>
				<category><![CDATA[Personal]]></category>
		<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[microservices]]></category>
		<category><![CDATA[monoliths]]></category>
		<guid isPermaLink="false">/?p=2594</guid>

					<description><![CDATA[When developing an application, we as software engineers face different types of architecture for building an application. Among them, Monoliths and Microservices are considered to be the latest trends. When designing an application, we can consider both, monolithic or microservice-based architectures. What we will choose depends on how the structure of an application is contoured [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>When developing an application, we as software engineers face different types of architecture for building an application. Among them, Monoliths and Microservices are considered to be the latest trends.</p>
<p>When designing an application, we can consider both, monolithic or microservice-based architectures. What we will choose depends on how the structure of an application is contoured by functional requirements and available resources. However, each architecture has a set of trade-offs, that need to be thoroughly examined before deciding on the final architecture of the application.</p>
<p>These trade-offs cover <code>development complexity</code>, <code>scalability</code>, <code>time to deploy</code>, <code>flexibility</code>, <code>operational cost</code>, and <code>reliability</code>. I&#8217;ll try to explain each trade-off below&#8230;</p>
<h2>Development Complexity:</h2>
<p><code>Development complexity</code> refers to the effort required to deploy and manage an application. So deployment and managing a monolith or microservice-based application are different so let&#8217;s discuss those development complexities for monoliths and microservices-based applications.</p>
<h3>Programming Language</h3>
<p><strong>Monolith:</strong> The monolith application usually revolves around a single framework or programming language. For example, we can say we&#8217;ll build a Booking application using the Django web framework(which depends on python programming language).<br />
<strong>Microservice:</strong> The microservices application can be deployed using multiple languages. For example Same Booking application we considered above, let&#8217;s say the application has two services <code>Login</code> &amp; <code>Book ticket</code>.<br />
We might consider building the <code>Login service</code> using the Go programming language, on the other hand for <code>Book ticket</code> we can use Python.</p>
<h3>Management of Code Repository</h3>
<p><strong>Monolith:</strong> The monolith application usually belongs to a single code repository.<br />
<strong>Microservice:</strong>  Each Microservice requires its own separate code repository.</p>
<blockquote>
<h4>Note: We might think it&#8217;s better to manage a single repository than many, but the development complexity scale radically when more functionality is added to the project. As for microservice we team can work on a functionality independently as all functionality has its own codebase.</h4>
</blockquote>
<h3>Development Cycle</h3>
<p><strong>Monolith:</strong> The Development Cycle of a  monolith application is sequential as a single team will work on the codebase at a time. Also, the team needs to be careful about adding new functionality as the team may need to modify multiple functions to ensure backward compatibility.<br />
<strong>Microservice:</strong> The Development Cycle of each microservice is concurrent as each team works on each functionality separately on their own codebase.</p>
<h2>Scalability:</h2>
<p>The term <code>scalability</code> refers to how an application scales up and down when the incoming traffic increase exponentially or there&#8217;s a sudden demand on a particular functionality of the application.</p>
<h3>Traffic</h3>
<p><strong>Monolith:</strong> As the traffic increases, we need to replicate the entire unit with all the functionalities. For example, if we need to scale the Payment functionality, we need to scale other functionalities respectively.<br />
hence this is heavy on resource consumption such as CPU and Memory.<br />
<strong>Microservice:</strong> As the traffic increase on a particular functionality or service we can easily identify which service or functionality needs to scale and only scale that up will solve the traffic issue.</p>
<h3>Resource Consumption</h3>
<p><strong>Monolith:</strong> As the traffic example describes, we can conclude monoliths are heavy on resource consumption such as CPU and Memory. As we are using more space than actually needed.<br />
<strong>Microservice:</strong> As each functionality belongs to a separate service in a microservice application, the resource consumption is on-demand which means is, we need to scale up to the current need for the moment if we don&#8217;t need that in the future, we can easily scale down.</p>
<h2>Time to Deploy:</h2>
<p>The term <code>Time to Deploy</code> refers to building a deployment pipeline and deploying new features or bug fixes easily.</p>
<h3>Delivery Pipeline</h3>
<p><strong>Monolith:</strong> As in the monolithic approach only one delivery pipeline is needed to deploy the whole application. As we deploy the whole application each time it came with high risk with each deployment as if the deployment didn&#8217;t work leads to a disastrous situation if the release fails as it&#8217;ll take down the entire application which means there is a higher risk of violating the zero downtime principle, which aims that application should be available to the end-user/consumers 24/7.</p>
<p><strong>Microservice:</strong> On the other hand, each service needs its own delivery pipeline so that we can deliver each service individually. As we add a new feature to a specific service only that service needs to be deployed and if that service deployment won&#8217;t go smoothly as we expected, only that service will go down but the application should be available to the consumers. As such, there is less risk to take down the entire application with each release. Consequently, Microservices allow an increased velocity of feature development as we can have more releases with less risk. </p>
<h2>Flexibility:</h2>
<p>The term <code>Flexibility</code> refers to the ability to incorporate new technologies and adapt to new principles and tooling. There are moments when it&#8217;s better to use a different programming language before a specific feature or modify our application for a specific platform.</p>
<p><strong>Monolith:</strong>  In Monolithic application, this type of modification may lead to rewritten or restructured the entire project prior to that new technology need. This leads to the conclusion that monolith application has a low flexibility rate.</p>
<p><strong>Microservice:</strong> On the other hand, each service is purposely built to be loosely coupled and allows independent changes to services as we writing or restructuring one functionality is more achievable than rewriting the entire stack.</p>
<h2>Operational Cost:</h2>
<p>The term <code>Operational Cost</code> refers to the necessary resources to build, deploy and release a product. A low initial cost to spin up an application is certainly inciting.</p>
<p><strong>Monolith:</strong>  This is the case we all observe in the monolithic architecture where only one code base is needed and there&#8217;s only one delivery pipeline to deploy the entire application.</p>
<p><strong>Microservice:</strong> On the other hand, each service requires the maintenance of multiple codebases and delivery pipelines and the dependencies of maintaining different programming languages if we require to use them in a microservice.</p>
<p>This scenario demonstrates the whole application/product development process. The situation is flipped when new functionalities are added and the application needs to be scaled to cope with high customer demand. </p>
<blockquote>
<p>Note: Maintaining a monolith over time imposes more complexity and consumes more resources when replication, as we all know maintaining an application, is more costly than developing one from scratch. On the other hand, the Operational cost for a microservice is directly proportional to the required resource at the time. Scalability is performed on each service and adding new components is a defect to operation in an application which makes microservice more scalable than monoliths.</p>
</blockquote>
<h2>Reliability:</h2>
<p>The term <code>Reliability</code> refers to the ability to recover from failure and waste monitoring the application all the time.</p>
<p><strong>Monolith:</strong>  If an application goes to a failed state the entire stack will need to be troubleshot and recovered for availability.</p>
<p><strong>Microservice:</strong> A distributed amount of functions that interact with each other via the network calls. If a component fails then only that component will need to recovery.</p>
<blockquote>
<p>Note: In Microservices, it is possible to have representative metrics and logs of a separate unit while with monoliths getting granular visibility for each functionality is difficult as all the metrics and logs for the entire application will be aggregated together.</p>
</blockquote>
<p>If you like, you can read the same article on my <a href="https://rezwanul-haque.hashnode.dev/trade-offs-for-monoliths-and-microservices" rel="nofollow noopener" target="_blank"> Personal blog</a></p>
<p>You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">Here</a></p>
<h2>Summary</h2>
<table>
<thead>
<tr>
<th style="text-align: center">Trade-Offs</th>
<th style="text-align: center">Types</th>
<th style="text-align: center">Monoliths</th>
<th style="text-align: center">Microservices</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center">Development Complexity</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Programming Language</td>
<td style="text-align: center">One language</td>
<td style="text-align: center">Multiple languages</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Management of Code Repository</td>
<td style="text-align: center">One repository</td>
<td style="text-align: center">Multiple repositories</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Development Cycle</td>
<td style="text-align: center">Sequential</td>
<td style="text-align: center">Concurrent</td>
</tr>
<tr>
<td style="text-align: center">Scalability</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">High Traffic</td>
<td style="text-align: center">Replication of the entire stack</td>
<td style="text-align: center">Replication of specific service/functionality</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Resouce Consumption</td>
<td style="text-align: center">Overconsumption of resources</td>
<td style="text-align: center">On-demand resource consumption</td>
</tr>
<tr>
<td style="text-align: center">Time to Deploy</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Delivery Pipeline</td>
<td style="text-align: center">One delivery pipeline</td>
<td style="text-align: center">Multiple delivery pipeline</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Deployment process</td>
<td style="text-align: center">Easy</td>
<td style="text-align: center">Comparatively harder</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Deployment</td>
<td style="text-align: center">Entrie stack deployment</td>
<td style="text-align: center">Separate functionality deployment</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Velocity</td>
<td style="text-align: center">Low velocity at scale</td>
<td style="text-align: center">High velocity at scale</td>
</tr>
<tr>
<td style="text-align: center">Flexibility</td>
<td style="text-align: center"></td>
<td style="text-align: center">Low</td>
<td style="text-align: center">High</td>
</tr>
<tr>
<td style="text-align: center">Operational Cost</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Initial cost</td>
<td style="text-align: center">Low</td>
<td style="text-align: center">High</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Scaling cost</td>
<td style="text-align: center">High</td>
<td style="text-align: center">Low</td>
</tr>
<tr>
<td style="text-align: center">Reliability</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Recovery</td>
<td style="text-align: center">Recovery of the entire stack</td>
<td style="text-align: center">Recovery of the failed component only</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Visibility(metrics/logs)</td>
<td style="text-align: center">Low</td>
<td style="text-align: center">High</td>
</tr>
</tbody>
</table>
<p>In conclusion, we can say each application architecture has a set of trade-offs that need to be considered at the beginning of a project. But more importantly, it is paramount to understand how the application will be maintained in the future e.g. at scale, under load, supporting multiple releases a day, etc.</p>
<p>There is no <code>Predefined/Golden rule</code> to build a product, but a good understanding of the trade-offs will provide a clear understanding of the roadmap to build the product goals we&#8217;re trying to achieve. Now regardless of what architecture we choose to build the project, as long as the project is coupled with an efficient delivery pipeline and design pattern, the ability to adopt new technologies and how easily we can add the feature to cloud-native deployment remains certain.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
