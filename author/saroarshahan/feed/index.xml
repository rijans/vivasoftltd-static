<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Saroar Shahan &#8211; Vivasoft</title>
	<atom:link href="/author/saroarshahan/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Top Software Company with Talented Geeks</description>
	<lastBuildDate>Thu, 30 Dec 2021 10:48:47 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1</generator>

<image>
	<url>/wp-content/uploads/2021/08/cropped-feb-icon-32x32.png</url>
	<title>Saroar Shahan &#8211; Vivasoft</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>জাভাস্ক্রিপ্টে ক্লোজার কি?</title>
		<link>/blog/what-is-closer-in-javascript/</link>
					<comments>/blog/what-is-closer-in-javascript/#respond</comments>
		
		<dc:creator><![CDATA[Saroar Shahan]]></dc:creator>
		<pubDate>Mon, 11 Oct 2021 09:31:01 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<guid isPermaLink="false">/?p=3745</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[<div class="et_pb_section et_pb_section_0 et_section_regular" >
				
				
				
				
				
				
				<div class="et_pb_row et_pb_row_0">
				<div class="et_pb_column et_pb_column_4_4 et_pb_column_0  et_pb_css_mix_blend_mode_passthrough et-last-child">
				
				
				
				
				<div class="et_pb_module et_pb_text et_pb_text_0  et_pb_text_align_left et_pb_bg_layout_light">
				
				
				
				
				<div class="et_pb_text_inner"><p>জাভাস্ক্রিপ্ট ডেভদের জন্যে একটা আতঙ্কের নাম হচ্ছে closure। এই closure সম্পর্কে পরিষ্কার ধারণা না থাকার কারণে অনেক সময় জব ইন্টার্ভিউতেও পর্যন্ত বেশ ভাল নাকানি-চোবানি খেতে হয়। আমাদের আজকের আলোচ্য বিষয় হচ্ছে closure নিয়ে। তাহলে চলুন শুরু করা যাক এর গোষ্ঠী উদ্ধারের মিশন।</p>
<h3>ক্লোজার কি?</h3>
<p>Closure কোন ফাংশন না আবার ফাংশনও কোন closure না। Closure হচ্ছে ফাংশনের এমন একটা বৈশিষ্ট্য যে বৈশিষ্ট্যের কারণে ফাংশন এক্সিকিউশন শেষ হয়ে যাবার পরেও তার lexical scope এ অবস্থিত সকল variable কে মনে রাখতে পারে। উদাহরণস্বরূপ বলা যেতে পারে যে ডম থেকে কিছু অ্যাক্সেস করার জন্যে আমরা যে ইভেন্ট ফাইয়ার করি সেটাও একটা closure।</p>
<h5>কিছু উদাহরণঃ</h5>
<pre class="EnlighterJSRAW" data-enlighter-language="js">function add(a) {
return function(b) {
return a + b;
};
}

let addTen = add(10);
let addSeven = addTen(7);

console.log(addSeven); // 17</pre>
<p>&nbsp;</p>
<p>কি হচ্ছে এসব?? ঠিক আছে, চলেন দেখি কোডগুলোকে ভেঙ্গেঃ-</p>
<p>১। যখন add ফাংশনটি কল হয় এটি আরেকটি ফাংশনকে return করে।<br />
২। ঐ ফাংশনটির এক্সিকিউশন শেষ হয়ে যায় এবং মনে রাখে ঐ সময় তার প্যারামিটার a এর ভ্যালু কি ছিল।<br />
৩। যখন addTen ভেরিয়েবলে add ফাংশনকে এসাইন করা হয়। এটি সব সময় মনে রাখবে a এর ভেল্যু কি ছিল যখন এটিকে ইনিশিয়ালি কল করা হয়েছিল।<br />
৪। উপরের addTen ভেরিয়েবল একটি ফাংশনকে বোঝায় যেটি সব সময় ভেল্যু ১০ যোগ করবে যা পাঠানো হয়েছিল।<br />
৫। তার মানে হল যখন addTen কে কল করা হয় ৭ ভেল্যু দিয়ে, এটি ১০ এর সাথে ৭ যোগ করবে এবং ১৭ রিটার্ন করবে।</p>
<p>**সুতারং, জাভাস্ক্রিপ্ট ইঞ্জিন addTen কে যেভাবে রান করেঃ-**</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">function addTen(b) {
return 10 + b;
}</pre>
<p>এখন একটা মজার উদাহরণ দেখবো। কিভাবে আমরা লুপের ভিতরে ক্লোজার চালাতে পারি। এটি ইন্টার্ভিউ বোর্ডের একটা কমন প্রশ্ন। নিচের কোডটা দেখেন এবং একটু মনে মনে চিন্তা করেন এটার আউটপুট কত হবে।</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">for(var i = 1; i &lt;= 5; i++) { setTimeout(() =&gt; console.log(i), 1000);
}</pre>
<p>&nbsp;</p>
<h5>কাঙ্ক্ষিত আউটপুটঃ-</h5>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">1
2
3
4
5</pre>
<h5>কিন্তু আসছে অনাকাঙ্ক্ষিত আওউটপুটঃ-</h5>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">6
6
6
6
6</pre>
<p>আসলে এই আউটপুট আসার অনেক কারণ আছে। লুপের মাঝে ভ্যারিয়াবল i হচ্ছে একটি গ্লোবাল ভ্যারিয়াবল। যখন setTimeout রান হয় তার আগেই লুপ শেষ হয়ে যায় এবং তাই i ভ্যালু 6 হয়ে যায়। সেজন্যে প্রতি এক সেকন্ড পর পর পাঁচবার 6 দেখাচ্ছে। যদি বিশ্বাস না হয় তাহলে কোডটা রান করার পর আপনার গ্লোবাল window অবজেক্টটা একবার দেখেন সেখানে i নামে একটা ভ্যারিয়াবল দেখতে পারবেন এবং তার ভ্যালু 6 হয়ে আছে।</p>
<p>এই সমস্যার সমাধান আমরা IIFE বা Immediately Invoked Function Expression ব্যবহার করে করতে পারি। নিচে উদাহরণ দেওয়া হলঃ-</p>
<h5>পদ্ধতি ১ঃ-</h5>
<pre class="EnlighterJSRAW" data-enlighter-language="js">for(var i = 1; i &lt;= 5; i++) { (function() { var val = i; setTimeout(() =&gt; console.log(val), 1000);
}());
}</pre>
<h5>পদ্ধতি ২ঃ-</h5>
<pre class="EnlighterJSRAW" data-enlighter-language="js">for(var i = 1; i &lt;= 5; i++) { (function(val) { setTimeout(() =&gt; console.log(val), 1000);
}(i));
</pre>
<p>&nbsp;</p>
<p>এখানে আমরা একটা ফাংশন লিখে একটা Scope তৈরি করেছি। ফাংশনটিকে ইমিডিয়েটলি কল করেছি এবং তার প্যারামিটারের ভেল্যু হিসাবে i কে পাস করেছি। এতে সে এখন i এর ভেল্যুকে মনে না রেখে সে এখন তার প্যারামিটারের ভেল্যুকে মনে রাখবে। মানে এখন i এর মান 1, 2 করে যাচ্ছে এবং সেটা থেকে একটা আলাদা Scope তৈরি হচ্ছে যেটাকে সে মনে রাখছে।</p>
<h5>আউটপুটঃ-</h5>
<pre class="EnlighterJSRAW" data-enlighter-language="js">1
2
3
4
5</pre>
<p>অবশেষে আমাদের কাঙ্ক্ষিত আউটপুট ফেলাম। তবে আজ এই পর্যন্ত দেখা পরবর্তী অন্য টপিকে। হ্যাপি কোডিং&#8230;</p>
<p>**বিঃ দ্রঃ** [এখানে ক্লিক](https://shahansdiary.com/what-is-closure-in-javascript/) করে লেখকের ব্যক্তিগত ব্লগেও পড়তে পারবেন</p></div>
			</div>
			</div>
				
				
				
				
			</div>
				
				
			</div>
]]></content:encoded>
					
					<wfw:commentRss>/blog/what-is-closer-in-javascript/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>জাভাস্ক্রিপ্টে Primitive এবং Reference টাইপ কি?</title>
		<link>/blog/what-is-primitive-and-reference-type-in-javascript/</link>
		
		<dc:creator><![CDATA[Saroar Shahan]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 22:55:23 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<category><![CDATA[pass by reference]]></category>
		<category><![CDATA[pass by value]]></category>
		<guid isPermaLink="false">/?p=2370</guid>

					<description><![CDATA[আজকে আমরা আলোচনা করতে যাচ্ছি Primitive এবং Reference টাইপ ডাটার মাঝে কি পার্থক্য এবং এই ডাটা টাইপগুলো কিভাবে কাজ করে। Primitive এবং Reference টাইপকে pass by value এবং pass by reference ও বলা হয়ে থাকে। একজন জাভাস্ক্রিপ্ট প্রোগ্রামার হিসাবে এই ডাটা টাইপগুলো সম্পর্কে পরিষ্কার জ্ঞান রাখা আবশ্যক। জাভাস্ক্রিপ্টে দুই টাইপের ডাটা টাইপ আছে। primitive ডাটা [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>আজকে আমরা আলোচনা করতে যাচ্ছি Primitive এবং Reference টাইপ ডাটার মাঝে কি পার্থক্য এবং এই ডাটা টাইপগুলো কিভাবে কাজ করে। Primitive এবং Reference টাইপকে pass by value এবং pass by reference ও বলা হয়ে থাকে। একজন জাভাস্ক্রিপ্ট প্রোগ্রামার হিসাবে এই ডাটা টাইপগুলো সম্পর্কে পরিষ্কার জ্ঞান রাখা আবশ্যক।</p>
<p>জাভাস্ক্রিপ্টে দুই টাইপের ডাটা টাইপ আছে।</p>
<ol>
<li>primitive ডাটা টাইপ এবং</li>
<li>non-primitive বা reference ডাটা টাইপ</li>
</ol>
<p>জাভাস্ক্রিপ্টে Strings, Numbers, Boolean, Null, undefined এই ডাটা টাইপগুলো প্রিমিটিভ ডাটা টাইপ হিসাবে পরিচিত এবং Arrays, Objects, Function নন-প্রিমিটিভ বা রেফারেন্স ডাটা টাইপ হিসাবে পরিচিত। এদের মাঝে মৌলিক পার্থক্য হচ্ছে যে প্রিমিটিভ ডাটা immutable বা অপরিবর্তনীয় এবং নন-প্রিমিটিভ ডাটা mutable বা পরিবর্তনীয়।</p>
<h3>প্রিমিটিভ ডাটা টাইপ</h3>
<p>প্রমিটিভ ডাটা immutable বা অপরিবর্তনীয় ডাটা টাইপ হিসাবে পরিচিত। কারণ এই ডাটা একবার তৈরি হয়ে গেলে এটি পরিবর্তন করার কোন পথ নেই। তাহলে চলেন আপনাদের প্রমাণ করে দেখাই।</p>
<pre><code class="language-js">    let str1 = &quot;Hi there, I am a string!&quot;;
    console.log(str1[1]); // &quot;i&quot;

    str1[1] = &quot;e&quot;;
    console.log(str1); // &quot;Hi there, I am a string!&quot;</code></pre>
<p>উপরের কোডটা রান করলে জাভাস্ক্রিপ্টের কারিশমা দেখতে পারবেন। সব কিছু মাথার উপর দিয়ে গেল? আচ্ছা, চলেন ব্যাপারটা ব্যাখ্যা করি। আপনি হাজার বার চাইলেও স্ট্রিং এর ভ্যালু পরিবর্তন করতে পারবেন না। কারণ স্ট্রিং একটি immutable বা অপরিবর্তনীয় ডাটা। একটি কথা মনে রাখবেন যদি স্ট্রিংকে কোন ভেরিয়েবলে অ্যাসাইন করে ফেলেন এবং অ্যাসাইন করার পর স্ট্রিংকে মডিফাই করতে চান, তাহলে আপনি একটি নতুন স্ট্রিং পাবেন। যেমন- .toUpperCase(), .slice(), .trim() ইত্যাদি।</p>
<pre><code class="language-js">    let str1 = &quot;Hi there, I am a string!&quot;;
    let newStr = str1.toUpperCase();

    console.log(newStr); // HI THERE, I AM A STRING!
    console.log(str1); Hi there, I am a string!</code></pre>
<p>প্রিমিটিভ ডাটা টাইপগুলো একে অপরের সাথে তাদের ভ্যালু দ্বারা তুলনা করে।</p>
<pre><code class="language-js">    let str1 = &quot;Hi there, I am a string!&quot;;
    let str2 = &quot;Hi there, I am a string!&quot;;

    console.log(str1 == str2); // true

    let num1 = 7;
    let num2 = 7;

    console.log(num1 == num2); // true</code></pre>
<p>প্রিমিটিভ টাইপগুলো সব সময় তাদের ভ্যালু পাস করে। যখন আমরা কোন প্রিমিটিভ ডাটা টাইপকে অন্য কোন ভেরিয়েবলে অ্যাসাইন করি, তখন তার ভ্যালু কপি হয়ে নতুন ভেরিয়েবলে অ্যাসাইন হয়।</p>
<pre><code class="language-js">    let num1 = 7;
    let num2 = num1;

    console.log(num1); // 7
    console.log(num2); // 7

    num2 = 8;

    console.log(num1); // 7
    console.log(num2); // 8</code></pre>
<h3>নন-প্রিমিটিভ ডাটা টাইপ</h3>
<p>নন-প্রিমিটিভ ডাটা mutable বা পরিবর্তনীয়। কারণ একটি নন-প্রিমিটিভ ডাটা তৈরি হয়ে যাওয়ার পরেও তার ভ্যালু পরিবর্তন হতে পারে। আমরা যখন কোন নন-প্রিমিটিভ ডাটা তৈরি করি, তখন সেই ডাটার জন্যে মেমোরিতে একটা অ্যাড্রেস তৈরি হয় এবং সেই অ্যাড্রেসটাকে মনে রেখে কোন এক জায়গায় ভ্যালুগুলোকে স্ট্রোর করে রাখে। তারপর আমাদের যখন দরকার পরে তখন সে ঐ অ্যাড্রেসকে কল করে এবং আমাদের ডাটা প্রদান করে। এটা বুঝতে হলে আপনাকে স্ট্যাক এবং হীপ মেমোরি সম্পর্কে জানতে হবে। তবে আমি যতটুকু বললাম এখন এতটুকু মনে রাখলেই হবে।</p>
<pre><code class="language-js">    let arr1 = [&quot;JavaScript&quot;, &quot;React&quot;, &quot;Redux&quot;, &quot;React-Redux&quot;];
    let arr2 = arr1;

    console.log(arr1); // [&quot;JavaScript&quot;, &quot;React&quot;, &quot;Redux&quot;, &quot;React-Redux&quot;]
    console.log(arr2); // [&quot;JavaScript&quot;, &quot;React&quot;, &quot;Redux&quot;, &quot;React-Redux&quot;]

    arr2[3] = &quot;Redux-Toolkit&quot;;
    console.log(arr1); // [&quot;JavaScript&quot;, &quot;React&quot;, &quot;Redux&quot;, &quot;Redux-Toolkit&quot;]
    console.log(arr2); // [&quot;JavaScript&quot;, &quot;React&quot;, &quot;Redux&quot;, &quot;Redux-Toolkit&quot;]</code></pre>
<p>নন-প্রিমিটিভ বা রেফারেন্স ডাটাগুলো সব সময় তাদের রেফারেন্স পাস করে। যখন আমরা কোন রেফারেন্স ডাটাকে অন্য কোন ভেরিয়েবলে অ্যাসাইন করি, তখন তার রেফারেন্স কপি হয়। মানে arr1 কে যখন আমরা arr2 তে অ্যাসাইন করি তখন তার রেফারেন্স বা অ্যাড্রেসটাকে কপি করে বা মনে রাখে তার ভ্যালুকে না। তাই দুইটা ভেরিয়েবলের অ্যাড্রেস একই থাকে। তাই যখন আমরা কোন একটি ভেরিয়েবলের ভ্যালু পরিবর্তন করি, তখন দুইটা ভেরিয়েবলেরই ভ্যালু পরিবর্তন হয়ে যায়।</p>
<pre><code class="language-js">    let obj1 = {
    name: &#039;JavaScript&#039;
    };
    let obj2 = obj1;

    console.log(`${obj1.name}`); // JavaScript
    console.log(`${obj2.name}`); // JavaScript

    obj2.name = &quot;React&quot;;

    console.log(`${obj1.name}`); // React
    console.log(`${obj2.name}`); // React</code></pre>
<p>আশা করি, উপরের কোডে কি হচ্ছে সেটা এখন খুব ভাল ভাবেই বুঝতে পারছেন। একটি কথা নন-প্রিমিটিভ ডাটা তাদের রেফারেন্স দ্বারা তুলনা করে।</p>
<pre><code class="language-js">    let obj1 = {
    name: &#039;JavaScript&#039;
    };

    let obj2 = {
    name: &#039;React&#039;
    };

    console.log(obj1 === obj2); // false</code></pre>
<p>এখানে দুইটা অবজেক্টের একই ভ্যালু কিন্তু যখন আমরা দুইটা অবজেক্টকে একে-অপরের সাথে তুলনা করছি, তখন তারা false রিটার্ন করছে। কারণ তাদের ভ্যালু একই হলেও তাদের অ্যাড্রেস এক না।</p>
<pre><code class="language-js">    let obj1 = {
    name: &#039;JavaScript&#039;
    };

    let obj2 = obj1;

    console.log(obj1 === obj2); // true</code></pre>
<p>এখানে কি হচ্ছে সেটা কি বলতে হবে? বিষয়টা একদম পানির মত পরিষ্কার।</p>
<p>এই হচ্ছে প্রিমিটিভ এবং নন-প্রিমিটিভ ডাটা টাইপের মাঝে পার্থক্য। যদি ভাল লেগে থাকে তাহলে মুক্ত জ্ঞান সবার মাঝে ছড়িয়ে দিন। সবাইকে জানতে এবং শিখতে সাহায্য করুন। দেখা হবে পরবর্তী কোন লেখায়। ততদিন হ্যাপি কোডিং</p>
<p>লেখকের ব্যক্তিগত যেতে <a href="https://shahansdiary.com/" rel="nofollow noopener" target="_blank">এখানে ক্লিক</a> করুন।</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>জাভাস্ক্রিপ্টে কলব্যাক ও হাইয়ার অর্ডার ফাংশন</title>
		<link>/blog/callback-and-higher-order-function-in-javascript/</link>
		
		<dc:creator><![CDATA[Saroar Shahan]]></dc:creator>
		<pubDate>Thu, 04 Feb 2021 13:22:28 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<category><![CDATA[callback function]]></category>
		<category><![CDATA[higher order function]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[js]]></category>
		<guid isPermaLink="false">/?p=2368</guid>

					<description><![CDATA[কলব্যাক ব্যাপারটি আমাদের জীবনের সাথে ব্যাপকভাবে জড়িয়ে আছে। যদি “সে” কলব্যাক না করে আপনি হয়তো “অ” হয়ে যান! ইয়ে মানে বলতে চাচ্ছিলাম যে অভিমানী নয়তো অস্থির হয়ে যান 😉 আর যদি আপনার লাইফে “সে” না থাকে তবে তো কোন কথাই নেই। আমার মত বিন্দাস 😂। যাইহোক, আপনি “অ” হোন আর না হোন, “সে” কলব্যাক করুক [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>কলব্যাক ব্যাপারটি আমাদের জীবনের সাথে ব্যাপকভাবে জড়িয়ে আছে। যদি “সে” কলব্যাক না করে আপনি হয়তো “অ” হয়ে যান! ইয়ে মানে বলতে চাচ্ছিলাম যে অভিমানী নয়তো অস্থির হয়ে যান 😉 আর যদি আপনার লাইফে “সে” না থাকে তবে তো কোন কথাই নেই। আমার মত বিন্দাস 😂। যাইহোক, আপনি “অ” হোন আর না হোন, “সে” কলব্যাক করুক আর না করুক আজকে আমরা কলব্যাক নিয়ে আলোচনা করবই। চলুন তাহলে শুরু থেকেই শুরু করি…</p>
<p>জাভাস্ক্রিপ্টে ফাংশন হচ্ছে একটি ফার্স্ট-ক্লাস অবজেক্ট। এই কারণে, ফাংশন ভেরিয়েবলের মাঝে এসাইন হতে পারে, অন্য একটি ফাংশনকে আর্গুমেন্ট হিসাবে নিতে পারে, ফাংশনের ভিতরেও কাজ করতে পারে এবং ফাংশন দ্বারা রিটার্নও হতে পারে।</p>
<h3>কলব্যাক ফাংশন কি?</h3>
<blockquote><p>সহজ কথায়, কলব্যাক ফাংশন হচ্ছে এমন একটি ফাংশন যেটি অন্য একটি ফাংশনে আর্গুমেন্ট হিসাবে পাস করা ফাংশন, যেটি কোন কাজ সম্পন্ন করার জন্যে আউটার ফাংশনের ভিতরে ইনভোক হয়।</p></blockquote>
<h3>হাইয়ার অর্ডার ফাংশন কি?</h3>
<blockquote><p>যে ফাংশনে অন্য কোন ফাংশনকে আর্গুমেন্ট হিসাবে পাস করা হয় বা কোন ফাংশন অন্য কোন ফাংশনকে রিটার্ন করে তাকে হাইয়ার অর্ডার ফাংশন বলা হয়। বাংলায় এটাকে ঊচ্চমার্গীয় ফাংশন হিসেবে ভেবে নিতে পারেন। ঊচ্চমার্গীয় কথাবার্তা মাথার উপর দিয়ে গেলেও ঊচ্চমার্গীয় ফাংশন মাথার নিচ দিয়েই যাবে ইনশাআল্লাহ্‌, নিশ্চিত থাকুন।</p></blockquote>
<p>আমাদের এমন একটি ফাংশন আছে যেটি আর্গুমেন্ট হিশাবে একটি অ্যারে নিবে এবং সেটি কে মডিফাই করে একটি নতুন অ্যারে নিটার্ন করবে। এক্ষেত্রে, আমাদের ফাংশনটিকে যে অ্যারে দেওয়া হবে তার সাথে দুই যোগ করে নতুন একটি অ্যারে নিটার্ন করবে।</p>
<pre><code class="language-js">function modifyBy2(arr) {
    let output = [];

    for(let i = 0; i &lt; arr.length; i++) {
        output.push(arr[i] + 2);
    }

    return output;
}

const newArr = modifyBy2([1,2,3,4,5,6]);
console.log(newArr); // [3, 4, 5, 6, 7, 8]</code></pre>
<p>এখন আমাদের আরেকটি ফাংশন আছে যেটি আর্গুমেন্ট হিশাবে একটি অ্যারে নিবে এবং যে অ্যারে দেওয়া হবে তার সাথে দুই গুণ করে নতুন একটি অ্যারে নিটার্ন করবে।</p>
<pre><code class="language-js">function multifyBy2(arr) {
    let output = [];

    for(let i = 0; i &lt; arr.length; i++) {
        output.push(arr[i] * 2);
    }

    return output;
}

const newArr = modifyBy2([1,2,3,4,5,6]);
console.log(newArr); // [2, 4, 6, 8, 10, 12]</code></pre>
<p>এখন যদি আমরা বিয়োগ বা ভাগ করতে চাই? তাহলে আমাদেরকে আরও দুটি ফাংশন লিখতে হবে তাই না? ব্যাপারটা তাহলে কি ভাল কিছু হচ্ছে? কোড রিপিটেশন হয়ে যাচ্ছে। একটি বিষয় লক্ষ্য করেন আমাদের লেখা দুটি ফাংশনেই শুধু অপারেশনগুলা ছাড়া একই কোড লিখেছি। আমরা যদি এমন কিছু করতে পারি যে আমাদের ফাংশনে যোগ, বিয়োগ যে কাজই করুক না কেন সেটি আমরা বলে দিবো, তাহলে কেমন হয়? এখন আমরা সে কাজটাই করবো। তার জন্যে আমাদেরকে আমাদের ফাংশনের সাথে আরেকটি আর্গুমেন্ট পাস করতে হবে। যেটি আসলে আমাদের অপারেশনটা হ্যান্ডল করবে।</p>
<pre><code class="language-js">function modifyArray(arr, fn) {
    let output = [];

    for(let i = 0; i &lt; arr.length; i++) {
        output.push(fn(arr[i]));
    }

    return output;
}

function modifyBy2(elem) {
    return elem + 2;
}

const newArr = modifyArray([1,2,3,4,5,6], modifyBy2);
console.log(newArr); // [3, 4, 5, 6, 7, 8]</code></pre>
<p>উপরের কোডে লক্ষ্য করুন, আমরা <strong>modifyArray</strong> নামে একটি ফাংশন ডিফাইন করেছি যেটি দুটি আর্গুমেন্টস নিচ্ছে। একটি অ্যারে এবং অন্যটি একটি ফাংশন। সে ফাংশনে আমরা বলে দিচ্ছি তার কাজ কি হবে। সে তার কাজ সম্পন্ন করে output অ্যারেতে তার ভ্যালুটা পুশ করে দিচ্ছে এবং modifyArray ফাংশনটি কাজ সম্পন্ন করে একটি নতুন অ্যারে রিটার্ন করতেছে। এখন যদি আমরা বিয়োগ, গুণ বা ভাগ করতে চাই সেটিও খুব সহজেই করতে পারবো এই ফাংশন দিয়ে। আমাদেরকে নতুন করে কোন লজিক লেখা লাগবে না শুধু আমরা একটি নতুন ফাংশন দিয়ে দিবো এবং সেখানে বলে দিবো তাকে কি করতে হবে। তাহলে চলেন দেখি আমাদের কাজ করতে পারি কিনা।</p>
<pre><code class="language-js">function modifyArray(arr, callback) {
    let output = [];

    for(let i = 0; i &lt; arr.length; i++) {
        output.push(callback(arr[i]));
    }

    return output;
}

function addBy2(elem) {
    return elem + 2;
}

function multifyBy2(elem) {
    return elem * 2;
}

const additionArr = modifyArray([1,2,3,4,5,6], addBy2);
const multiArr = modifyArray([1,2,3,4,5,6], multifyBy2);

console.log(additionArr); // [3, 4, 5, 6, 7, 8]
console.log(multiArr); // [2, 4, 6, 8, 10, 12]</code></pre>
<p><strong>modifyArray</strong> ফাংশনটিতে আর্গুমেন্ট হিসাবে যে ফাংশনটিকে পাস করতেছি ওই ফাংশনটিই হচ্ছে একটি কলব্যাক ফাংশন এবং <strong>modifyArray</strong> ফানশনটি হচ্ছে একটি <strong>হাইয়ার অর্ডার ফাংশন</strong>।</p>
<p>বিঃ দ্রঃ এই হচ্ছে কলব্যাক এবং ঊচ্চমার্গীয় ফাংশনের কাজ কারবার। এইবার কি কলব্যাক এবং ঊচ্চমার্গীয় ফাংশন মাথার নিচ দিয়ে যাচ্ছে?? এরপরও যদি ৬০০+ ওয়র্ডের একটা লেখা পড়ে মাথার উপর দিয়ে যায় তাহলে কমেন্ট বক্সে কমেন্ট করে উড়াই দিবেন, আমি ধরে নিবো।</p>
<p><a href="https://shahansdiary.com/callback-and-higher-order-function-in-javascript/" rel="nofollow noopener" target="_blank">এখানে ক্লিক</a> করে লেখকের ব্যক্তিগত ব্লগেও পড়তে পারবেন</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>জাভাস্ক্রিপ্টে Hoisting কি?</title>
		<link>/blog/what-is-hoisting-in-javascript/</link>
		
		<dc:creator><![CDATA[Saroar Shahan]]></dc:creator>
		<pubDate>Sun, 17 Jan 2021 15:14:21 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<category><![CDATA[hoisting]]></category>
		<guid isPermaLink="false">/?p=2348</guid>

					<description><![CDATA[আমার শেষ লেখায় জাভাস্ক্রিটের Execution Context এবং Scope নিয়ে লিখেছিলাম। আজকে আলোচনা করবো জাভাস্ক্রিপ্টের আরেকটি মহা গুরুত্বপূর্ণ বিষয় Hoisting নিয়ে। এটি একটি খুবই সহজ বিষয় হলেও অনেকের কাছে খুবই কঠিন এবং যখন প্রথমবার এটির সাথে পরিচয় হয় তখন অনেকের ঘুম হারামের কারণও হয়ে দাড়ায়। যাইহোক, আমি চেষ্টা করবো যতটা সহজভাবে আলোচনা করা যায়। এই লেখাটি [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>আমার শেষ লেখায় জাভাস্ক্রিটের <strong>Execution Context</strong> এবং <strong>Scope</strong> নিয়ে লিখেছিলাম। আজকে আলোচনা করবো জাভাস্ক্রিপ্টের আরেকটি মহা গুরুত্বপূর্ণ বিষয় <strong>Hoisting</strong> নিয়ে। এটি একটি খুবই সহজ বিষয় হলেও অনেকের কাছে খুবই কঠিন এবং যখন প্রথমবার এটির সাথে পরিচয় হয় তখন অনেকের ঘুম হারামের কারণও হয়ে দাড়ায়। যাইহোক, আমি চেষ্টা করবো যতটা সহজভাবে আলোচনা করা যায়। এই লেখাটি পড়ার আগে আমার <strong>Execution Context</strong> এবং <strong>Scope</strong> নিয়ে লেখা দুটি আর্টিকেল পড়ে আসতে বলবো। তাহলে <strong>Hoisting</strong> বুঝতে আপনার জন্যে অনেক সহজ হয়ে যাবে।</p>
<p>১। <a href="/execution-context-in-javascript/">Execution Context</a></p>
<p>২। <a href="/what-is-scope-in-javascript/">Scope</a></p>
<h3>Hoisting কি?</h3>
<blockquote><p><strong>Hoisting</strong> হচ্ছে জাভাস্ক্রিপ্ট এমন একটি পদ্ধতি যেখানে কোড এক্সিকিউশন করার আগে ভ্যারিয়েবল এবং ফাংশন ডিক্লেয়ারেশনগুলোকে তার বর্তমান <strong>Scope</strong> &#8211; এর শুরুতে নিয়ে যায়।</p></blockquote>
<p>উদাহরণস্বরূপঃ</p>
<pre><code class="language-js">    function hoisting() {
     console.log(message);
     var message=&#039;Hi there, We are learning Hoisting!&#039;
    }

hoisting(); // Ouput: undefined</code></pre>
<p>উদাহরণের ব্যাখ্যা দেওয়ার আগে Hoisting সম্পর্কে কিছু কথা বলে নেই। যখন আমরা কাউকে Hoisting বুঝায় উপরের সংজ্ঞাটা দিয়েই বুঝায়। কিন্তু আসলেই কি জাভাস্ক্রিপ্ট তার সকল ভ্যারিয়েবলস এবং ফাংশন ডিক্লেয়ারেশনগুলোকে তার স্কোপের উপরে নিয়ে যায়? না, জাভাস্ক্রিপ্ট এমনটা কখনো করে না। যদি আপনি আমার <a href="/execution-context-in-javascript/">Execution Context</a> নিয়ে লেখাটা পড়ে থাকেন, তাহলে আপনি জানেন যে যখন আপনি জাভাস্ক্রিপ্টের কোন কোড এক্সিকিউট করেন, জাভাস্ক্রিপ্ট ইঞ্জিন গ্লোবাল এক্সিকিউশন কন্টেক্সট তৈরি করে।</p>
<p>গ্লোবাল এক্সিকিউশন কন্টেক্সট এর দুটি phase আছে: <strong>creation</strong> এবং <strong>execution</strong>। creation phase চলার সময়, জাভাস্ক্রিপ্ট ইঞ্জিন সকল ভ্যারিয়েবলকে <strong>undefined</strong> হিসাবে ইনিশিয়ালাইজ করে। এবার চলুন আমরা <strong>Hoisting</strong>-এ ফিরে যাই।</p>
<p>জাভাস্ক্রিপ্টে <strong>Hoisting</strong> হচ্ছে দুই প্রকার। ১. <strong>Variable Hoisting</strong> এবং ২. <strong>Function Hoisting</strong>।</p>
<p>১. Variable Hoisting</p>
<pre><code class="language-js">    console.log(hoistingIntro); // Outpur: undefined

    var hoistingIntro = &quot;Hi there, I am a string one.&quot;;</code></pre>
<p>উপরের console.log এর আউটপুট কি হবে? একটু চিন্তা করুন সময় নিয়ে। যাইহোক, উপরের কোডে কোন ভুল নেই। কারণ আমরা জানি জাভাস্ক্রিপ্ট ইঞ্জিন <strong>Creation phase</strong>-এ ভ্যারিয়েবল ডিক্লেয়ারেশনকে <strong>undefined</strong> হিসাবে ইনিশিয়ালাইজ করে। তাই, <strong>Execution phase</strong>-এ আউটপুট <strong>undefined</strong> হচ্ছে কারণ আমরা তার ভ্যালু ইনিশিয়ালাইজ হওয়ার আগেই log করে ফেলেছি। টেকনিক্যালি, কোডটি Execution phase-এ নিম্নলিখিত কোডের মত দেখাবেঃ</p>
<pre><code class="language-js">    var hoistingIntro = undefined;

    console.log(hoistingIntro); // output: undefined
    hoistingIntro = &quot;Hi there, I am a string one.&quot;;</code></pre>
<h3>২। Functions Hoisting</h3>
<p>ভ্যারিয়েবলের মত ফাংশনও Hoisted হয়। তাই আপনি আগে ফাংশন কল করে পরে ফাংশন ডিক্লেয়ার করতে পারবেন।</p>
<pre><code class="language-js">    hoistedFunc(); // Hoisted

    function hoistedFunc() {
        console.log(&quot;Hoisted.&quot;);
    }</code></pre>
<p>বিঃ দ্রঃ একটি কথা ভাল করে মনে রাখবেন যে জাভাস্ক্রিপ্ট ফানশন এক্সপ্রেশনের ক্ষেত্রে কোন Hoisting করে না।</p>
<pre><code class="language-js">    hoistedFunEx(); // TypeError: hoistedFunEx is not a function

     var hoistedFunEx = function() {
      console.log(&quot;Hoisted.&quot;);
    }</code></pre>
<p>আপনাদের জন্যে একটি হোম টাস্ক। নিচের কোডের দুইটা console.log এর আউটপুট কি হবে? চাইলে কমেন্ট করে জানাতে পারেন। 🙂</p>
<pre><code class="language-js">var hoistingIntro = &quot;Hi there, I am a string one.&quot;;

function hoistingFunc() {
  console.log(hoistingIntro);
  var hoistingIntro = &quot;Hi there, I am a string two&quot;;
  console.log(hoistingIntro);
}

hoistingFunc();</code></pre>
<p>আজকের জন্যে বিদায় নিচ্ছি পরবর্তী লেখা পড়ার আমন্ত্রণ জানিয়ে। যদি কোন প্রশ্ন বা মতামত থাকে তাহলে অবশ্যই জানাবেন।</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>জাভাস্ক্রিপ্টে স্কোপ কি?</title>
		<link>/blog/what-is-scope-in-javascript/</link>
		
		<dc:creator><![CDATA[Saroar Shahan]]></dc:creator>
		<pubDate>Fri, 08 Jan 2021 13:03:06 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<category><![CDATA[global scope]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[lexical scope]]></category>
		<category><![CDATA[local scope]]></category>
		<category><![CDATA[scope]]></category>
		<category><![CDATA[গ্লোবাল স্কোপ]]></category>
		<category><![CDATA[জাভাস্ক্রিপ্ট]]></category>
		<category><![CDATA[লোকাল স্কোপ]]></category>
		<category><![CDATA[স্কোপ]]></category>
		<guid isPermaLink="false">/?p=2342</guid>

					<description><![CDATA[জাভাস্ক্রিপ্টের আলোচিত বিষয়গুলোর মাঝে একটি হল Scope। আপনি যদি একজন নতুন জাভাস্ক্রিপ্ট প্রোগ্রামার হয়ে থাকেন তাহলে এটির সাথে ভাল করে পরিচয় হওয়া অতি প্রয়োজন। তাই আজকে scope নিয়ে মনের কিছু কথা বলতে চাচ্ছি। 😛 Scope কি? Scope মূলত একটা নির্দিষ্ট সীমানাকে বোঝায়। যার বাহিরে Variable এবং Function-গুলো এক্সেসিবল না। যদি এই সীমানার বাহিরে কোন Variable [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>জাভাস্ক্রিপ্টের আলোচিত বিষয়গুলোর মাঝে একটি হল <strong>Scope</strong>। আপনি যদি একজন নতুন জাভাস্ক্রিপ্ট প্রোগ্রামার হয়ে থাকেন তাহলে এটির সাথে ভাল করে পরিচয় হওয়া অতি প্রয়োজন। তাই আজকে <strong>scope</strong> নিয়ে মনের কিছু কথা বলতে চাচ্ছি। 😛</p>
<h3>Scope কি?</h3>
<blockquote><p><strong>Scope</strong> মূলত একটা নির্দিষ্ট সীমানাকে বোঝায়। যার বাহিরে <strong>Variable</strong> এবং <strong>Function</strong>-গুলো এক্সেসিবল না। যদি এই সীমানার বাহিরে কোন <strong>Variable</strong> এবং <strong>Function</strong> কে কল করা হয় তাহলে তার কোন অস্তিত্ব থাকবে না। একটি কথা ভাল করে মাথায় সংরক্ষণ করে রাখেন যে, জাভাস্ক্রিপ্টে একমাত্র তখনই <strong>Scope</strong> তৈরি হয়, যখন আমরা কোন <strong>function</strong> ইনভোক বা কাল করি। হ্যাঁ, <strong>function</strong> ছাড়া আর কোথাও <strong>Scope</strong> তৈরি হয় না। আর এই <strong>Scope</strong> হচ্ছে দুই প্রকার- ১. <strong>Global Scope</strong> এবং ২. <strong>Local Scope</strong>।</p></blockquote>
<h3>১. Global Scope</h3>
<p>জাভাস্ক্রিপ্টে বাই ডিফল্ট সব কিছু <strong>Global Scope</strong> &#8211; এ রান হয়ে। যার এক্সেসিবল সব জায়গায় থাকে। উদাহরণস্বরূপ-</p>
<pre><code class="language-js">var globalVariable = &quot;I am global variable.&quot;;
console.log(globalVariable); // I am global variable.

var myFunc = function() {
    console.log(globalVariable);
}

myFunc() // I am global variable.</code></pre>
<p>উপরের কোডটুকু রান করলে দেখতে পারবেন যে globalVariable নামের ভেরিয়েবলটিকে সব যায়গায় ব্যবহার করা যাচ্ছে এবং সবার আউটপুটও একই দেখাচ্ছে।</p>
<h3>২. Local Scope</h3>
<p>আগেই বলেছিলাম যে, জাভাস্ক্রিপ্ট একমাত্র <strong>Scope</strong> তৈরি করে কোন <strong>Function</strong> ইনভোক বা কাল করলে। এই <strong>Scope</strong> কেই বলা হয় <strong>Local Scope</strong>। মানে হচ্ছে, তার ভিতরে যা কিছু থাকবে তার নিজস্ব <strong>Scope</strong> &#8211; এর বাহিরে এর কোন অস্তিত্ব থাকবে না। অর্থাৎ, তার <strong>Scope</strong> &#8211; এর ভিতরে লিখা কোন ভেরিয়েবলকে যদি আমরা বাহিরে অন্য কোথাও ব্যবহার করতে চাই তাহলে জাভাস্ক্রিপ্ট খুব সুন্দর করে একটি আনকট রেফারেন্সে ইরর দিয়ে বলে দিবে যে খোকা তুমি যাকে ব্যবহার করতে চাচ্ছ সে তো কোথাও ডেফাইন করা নেই। চলুন একটা উদাহরণ দিয়ে দেখা যাক-</p>
<pre><code class="language-js">var globalVariable = &quot;I am global variable.&quot;;

var myFunc = function() {
    var localVariable = &quot;I am local variable.&quot;;

    console.log(globalVariable);
    console.log(localVariable);
}

myFunc();
// I am global variable.
// I am local variable.

console.log(localVariable); // udefined</code></pre>
<p>উপরের কোডটুকু রান করলে দেখতে পারবেন যে প্রথমে দেখাচ্ছে I am global variable. এবং I am local variable. তারপর অতি ভদ্রতার সাথে খুব সুন্দর করে বলে দিছে যে আনকট রেফারেন্সেঃ লোকাল ইজ নট ডিফাইন্ড।</p>
<h3>Lexical Scoping কি?</h3>
<p>এখন সবার মনে প্রশ্ন আসতে পারে যে, এই <strong>Lexical Scoping</strong> &#8211; টা আবার কি? একটু অপেক্ষা করেন মাথা গরম করার কোন দরকার নেই। আসলে জাভাস্ক্রিপ্টকে বলা হয় <strong>Lexical Scoping</strong> ল্যাঙ্গুয়েজ। আমরা ফাংশনের ভিতরে আমাদের প্রয়োজন অনুযায়ী একাধিক ফাংশন তৈরি করতে পারি এবং চাইল্ড ফাংশনগুলো তার প্যারেন্ট ফাংশনের সব ভেরিয়াবলস এবং আর্গুমেন্টেসের এক্সেস পায়। কিন্তু আউটার ফাংশনগুলো তার চাইল্ড ফাংশনের ভেরিয়াবলস এবং আর্গুমেন্টেসের কোন এক্সেস পায় না। এই যে চাইল্ড ফাংশনগুলো তার প্যারেন্ট ফাংশনের ভেরিয়াবলস এবং আর্গুমেন্টেসের এক্সেস পাচ্ছে এই এক্সেস পাওয়াকেই বল হয় <strong>Lexical Scoping</strong>।</p>
<pre><code class="language-js">function outerFunc(a) {
     var outerFuncVariable = &quot;Hi there, I am outer &quot; + a;

     console.log(outerFuncVariable); // Hi there, I am inner function variable

     function innerFunc() {
         var innerFuncVariable = &quot;Hi there, I am inner &quot; + a;
         console.log(innerFuncVariable);
     }

     innerFunc(); // Hi there, I am inner function variable

     console.log(innerFuncVariable); // undefined
 }

 outerFunc(&quot;function variable&quot;);</code></pre>
<p><strong>নোটসঃ</strong></p>
<ul>
<li>জাভাস্ক্রিপ্টের গ্লোবাল স্কোপ এবং লোকা স্কোপ আছে।</li>
<li>যে কোন ফাংশনের বাইরে ডিক্লেয়ারড এবং ইনিশিয়ালাইজড ভ্যরিয়েবলগুলো গ্লোবাল ভ্যারিয়েবল হয়ে যায়।</li>
<li>ফাংশনে ভিতরে ডিক্লেয়ারড এবং ইনিশিয়ালাইজড ভ্যারিয়েবলগুলো সেই ফাংশনের লোকাল ভ্যারিয়েবল হয়।</li>
<li>যে কোন ফাংশনের ভেতরে ভ্যারিয়েবল কীওয়ার্ড ছাড়া ডিক্লেয়ারড ভ্যারিয়েবলগুলো স্বয়ংক্রিয়ভাবে গ্লোবাল ভ্যারিয়েবল হয়ে যায়।</li>
<li>গ্লোবাল ভ্যারিয়েবলগুলো প্রোগ্রামের যেকোন জায়গায় অ্যাক্সেস এবং পরিবর্তন করা যেতে পারে।</li>
<li>ফাংশন ডিক্লেয়ারেশনের বাইরে লোকাল ভ্যারিয়েবল সমূহ অ্যাক্সেস করা যাবে না।</li>
<li>গ্লোবাল ভ্যারিয়েবল এবং লোকাল ভ্যারিয়েবল একই নাম থাকতে পারে। কিন্তু একই নাম ব্যবহার না করায় ভাল।</li>
</ul>
<p>আশা করি, এখন <strong>Scope</strong> কি এবং <strong>Lexical Scoping </strong>কি কিছুটা হলেও বুঝতে পারছেন। আজ এই পর্যন্তই পরবর্তীতে অন্য কোন টপিক নিয়ে আবার হাজির হবো ইনশাআল্লাহ্‌। ততক্ষণ পর্যন্ত সবাই ভাল থাকুন। আল্লাহ্‌ হাফেজ।</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>জাভাস্ক্রিপ্টে এক্সিকিউশন কনটেক্স কি?</title>
		<link>/blog/execution-context-in-javascript/</link>
		
		<dc:creator><![CDATA[Saroar Shahan]]></dc:creator>
		<pubDate>Sat, 02 Jan 2021 16:47:25 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<guid isPermaLink="false">/?p=2336</guid>

					<description><![CDATA[আপনি যদি জাভাস্ক্রিপ্ট ডেভেলপার হন বা হতে চান, তাহলে আপনাকে অবশ্যই জানতে হবে কিভাবে জাভাস্ক্রিপ্ট প্রোগ্রামগুলি ইন্টার্নালী এক্সিকিউট হয়। এক্সিকিউশন কনটেক্স জাভাস্ক্রিপ্টের অন্যান্য কনসেপ্টগুলি যেমন &#8211; হোয়েস্টিং, স্কোপ, এবং ক্লোজার বোঝার জন্য অত্যন্ত গুরুত্বপূর্ণ। আজকের এই পোস্টে শিখবো, জাভাস্ক্রিপ্টে এক্সিকিউশন কনটেক্স কি। তাহলে বেশি কথা না বলে চলুন শুরু করে দেই আমাদের আজকের মিশন। এক্সিকিউশন [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>আপনি যদি জাভাস্ক্রিপ্ট ডেভেলপার হন বা হতে চান, তাহলে আপনাকে অবশ্যই জানতে হবে কিভাবে জাভাস্ক্রিপ্ট প্রোগ্রামগুলি ইন্টার্নালী এক্সিকিউট হয়। এক্সিকিউশন কনটেক্স জাভাস্ক্রিপ্টের অন্যান্য কনসেপ্টগুলি যেমন &#8211; হোয়েস্টিং, স্কোপ, এবং ক্লোজার বোঝার জন্য অত্যন্ত গুরুত্বপূর্ণ।</p>
<p>আজকের এই পোস্টে শিখবো, জাভাস্ক্রিপ্টে এক্সিকিউশন কনটেক্স কি। তাহলে বেশি কথা না বলে চলুন শুরু করে দেই আমাদের আজকের মিশন।</p>
<h3>এক্সিকিউশন কন্টেক্স কি?</h3>
<blockquote><p>এক্সিকিউশন কন্টেক্স একটি এনভাইরনমেন্ট যেখানে জাভাস্ক্রিপ্ট কোড এক্সিকিউট করা হয়। যখনই জাভাস্ক্রিপ্টে কোন কোড রান করা হয়, এটি একটি এক্সিকিউশন কন্টেক্সের মধ্যে রান করা হয়।</p></blockquote>
<h3>জাভাস্ক্রিপ্টে তিন ধরনের এক্সিকিউশন কন্টেক্স আছেঃ-</h3>
<ul>
<li><strong>গ্লোবাল এক্সিকিউশন কন্টেক্স &#8211;</strong> এটি ডিফল্ট এক্সিকিউশন কন্টেক্স। যে কোডটি কোন ফাংশনের ভিতরে নেই তা গ্লোবাল এক্সিকিউশন কন্টেক্সে আছে। এটি দুটি জিনিস সম্পন্ন করেঃ<br />
১। এটি একটি গ্লোবাল অবজেক্ট তৈরি করে যা একটি <strong>window</strong> অবজেক্ট (ব্রাউজারের ক্ষেত্রে) এবং <strong>global</strong> অবজেক্ট (নোডের ক্ষেত্রে)<br />
২। <strong>this</strong> এর ভ্যালু হিসাবে গ্লোবাল অবজেক্টকে সেট করে। একটি প্রোগ্রামে শুধুমাত্র একটি গ্লোবাল এক্সিকিউশন কন্টেক্স থাকতে পারে।</li>
<li><strong>ফাংশন এক্সিকিউশন কন্টেক্স &#8211;</strong> যখনই কোন ফাংশন কল করা হয়, সেই ফাংশনের জন্য জেএস ইঞ্জিন একটি নতুন এক্সিকিউশন কন্টেক্স তৈরি করে। প্রতিটি ফাংশনের নিজস্ব এক্সিকিউশন কন্টেক্স আছে। একাধিক সংখ্যক ফাংশন এক্সিকিউশন কন্টেক্স হতে পারে। ফাংশন এক্সিকিউশন কন্টেক্সের গ্লোবাল এক্সিকিউশন কন্টেক্সের সকল কোড অ্যাক্সেস আছে যদিও গ্লোবাল কন্টেক্সের ফাংশন এক্সিকিউশন কন্টেক্সের কোডের অ্যাক্সেস নেই। গ্লোবাল এক্সিকিউশন কন্টেক্সের কোড এক্সিকিউট করার সময় যদি জেএস ইঞ্জিন কোন ফাংশন কল পায়, এটি সেই ফাংশনের জন্য একটি নতুন ফাংশন এক্সিকিউশন কন্টেক্সত তৈরি করে। ব্রাউজার কন্টেক্সে, যদি কোড strict মোডে এক্সিকিউট করা হয়, তাহলে <strong>this</strong> এর ভ্যালু <strong>undefined</strong> অন্যথায় <strong>window</strong> অবজেক্ট হবে ফাংশন এক্সিকিউশন কন্টেক্সে।</li>
<li><strong>ইভাল এক্সিকিউশন কন্টেক্স &#8211;</strong> ইভাল ফাংশনের ভিতরে এক্সিকিউশন কন্টেক্স।</li>
</ul>
<p><strong>নিম্নলিখিত কোড দেখুনঃ</strong></p>
<pre><code class="language-js">let a = 7;

const multByTen = a =&gt; a * 10;

let results = multByTen(a);

console.log(results); // 70</code></pre>
<p><strong>উপরের কোডে লক্ষ্য করুনঃ</strong></p>
<ul>
<li>প্রথমে, a ভ্যারিয়েবলে 7 অ্যাসাইন করা হয়েছে।</li>
<li>দ্বিতীয়ত, একটি ফাংশন multByTen() ডিক্লেয়ার করা হয়েছে যা 10 এর সাথে তার আর্গুমেন্ট কে গুণ করে।</li>
<li>তৃতীয়ত, একটি প্যারামিটার হিসাবে a পাস করে multByTen() ফাংশনকে কল করে এবং ভ্যারিয়েবল results &#8211; এ রিটার্ন মান অ্যাসাইন করা হয়েছে।</li>
<li>পরিশেষে, কনসোলে ভ্যারিয়েবল results আউটপুট করা হয়েছে।</li>
</ul>
<p>অনেক সহজ কোডটা তাই না? যাইহোক, বিহাইন্ড দ্যা সিন জাভাস্ক্রিপ্ট অনেক কিছু করে। ইতিমধ্যে আমরা এক্সিকিউশন কন্টেক্স সম্পর্কে জেনে গেছি। কিন্তু প্রতিটি এক্সিকিউশন কন্টেক্সে দুটি করে phases আছেঃ ১। creation phase এবং ২। execution phase।</p>
<h3>১। Creation phase</h3>
<ul>
<li>একটি গ্লোবাল অবজেক্ট তৈরি করে অর্থাৎ, ওয়েব ব্রাউজারে <strong>window</strong> বা নোড জেএসে <strong>global</strong>।</li>
<li>একটি <strong>this</strong> অবজেক্ট বাইন্ডিং তৈরি করে যা উপরের গ্লোবাল অবজেক্টকে নির্দেশ করে।</li>
<li>ভ্যারিয়েবল এবং ফাংশন রেফারেন্স স্টোর করার জন্য একটি মেমোরি হীপ সেটআপ করে।</li>
<li>ভ্যারিয়েবলের ইনিশিয়াল ভ্যালু হিসাবে <strong>undefined</strong> গ্লোবাল এক্সিকিউশন কন্টেক্সে এবং ফাংশন ডিক্লেয়ারেশনগুলি মেমোরি হীপে স্টোর করে।</li>
</ul>
<p>আমাদের উদাহরণে, creation phase &#8211; এ জাভাস্ক্রিপ্ট ইঞ্জিন গ্লোবাল এক্সিকিউশন কন্টেক্সে ভ্যারিয়েবল a ও results এবং ফাংশন ডিক্লেয়ারেশন multByTen() স্টোর করে। এছাড়াও, এটি ভ্যারিয়েবল a এবং results কে undefined হিসাবে ইনিশিয়ালাইজ করে।</p>
<blockquote>
<h4>Global Execution Context (Creaton Phase Browser)</h4>
<ul>
<li><strong>window</strong>: Global Object</li>
<li><strong>this</strong>: window</li>
<li><strong>a</strong>: undefined</li>
<li><strong>multByTen</strong>: fn()</li>
<li><strong>results</strong>: undefined</li>
</ul>
</blockquote>
<p>Creation phase এর পর, গ্লোবাল এক্সিকিউশন কন্টেক্স execution phase শুরু করে।</p>
<h3>Execution phase</h3>
<p>Execution phase &#8211; এ, জাভাস্ক্রিপ্ট ইঞ্জিন লাইন বাই লাইন কোড এক্সিকিউট করে। এই phase -এ, এটি ভ্যারিয়েবলের মান অ্যাসাইন করে এবং ফাংশন কল এক্সিকিউট করে।</p>
<blockquote>
<h4>Global Execution Context (Execution Phase Browser)</h4>
<ul>
<li><strong>window</strong>: Global Object</li>
<li><strong>this</strong>: window</li>
<li><strong>a</strong>: 7</li>
<li><strong>multByTen</strong>: fn()</li>
<li><strong>results</strong>: multByTen(a)</li>
</ul>
</blockquote>
<p>আমরা আগেই জেনেছি প্রতিটি ফাংশন কলের জন্য জাভাস্ক্রিপ্ট ইঞ্জিন একটি নতুন ফাংশন এক্সিকিউশন কন্টেক্স তৈরি করে। ফাংশন এক্সিকিউশন কন্টেক্স গ্লোবাল এক্সিকিউশন কন্টেক্সের মতই কিন্তু ফাংশন এক্সিকিউশন কন্টেক্স গ্লোবাল অবজেক্ট তৈরি করার পরিবর্তে এটি <strong>arguments</strong> অবজেক্ট তৈরি করে যা ফাংশনে পাস করা সকল প্যারামিটারের একটি রেফারেন্স ধারণ করে:</p>
<blockquote>
<h4>Function Execution Context (Creation Phase Browser)</h4>
<ul>
<li><strong>arguments</strong>: Local Object</li>
<li><strong>this</strong>: window</li>
<li><strong>a</strong>: undefined</li>
</ul>
</blockquote>
<p>আমাদের উদাহরণে, ফাংশন এক্সিকিউশন কন্টেক্স <strong>arguments</strong> অবজেক্ট তৈরি করে যা ফাংশনে পাস করা সকল প্যারামিটারকে নির্দেশ করে, <strong>this</strong> এর মান হিসাবে গ্লোবাল অবজেক্টে <strong>window</strong> কে সেট করে। এবং <strong>a</strong> প্যারামিটার কে <strong>undefined</strong> হিসাবে ইনিশিয়ালাইজ করে।</p>
<blockquote>
<h4>Function Execution Context (Execution Phase Browser)</h4>
<ul>
<li><strong>arguments</strong>: Local Object</li>
<li><strong>this</strong>: window</li>
<li><strong>a</strong>: 7</li>
</ul>
</blockquote>
<p>ফাংশন এক্সিকিউশন কন্টেক্সে <strong>Execution phase</strong> চলার সময়, এটি <strong>a</strong> প্যারামিটারে <strong>7</strong> অ্যাসাইন করে এবং ফলাফল <strong>(70)</strong> গ্লোবাল এক্সিকিউশন কন্টেক্সের <strong>results</strong> ভ্যারিয়েবলে রিটার্ন করেঃ</p>
<blockquote>
<h4>Global Execution Context (Execution Phase Browser)</h4>
<ul>
<li><strong>window</strong>: Global Object</li>
<li><strong>this</strong>: window</li>
<li><strong>a</strong>: 7</li>
<li><strong>multByTen</strong>: fn()</li>
<li><strong>results</strong>: 70</li>
</ul>
</blockquote>
<p>আজকের লেখায়, ৭৩০ এর বেশি শব্দ পড়ে আমি বলতেই পারি আপনি জাভাস্ক্রিপ্টের এক্সিকিউশন কন্টেক্স, গ্লোবাল এক্সিকিউশন কন্টেক্সট এবং ফাংশন এক্সিকিউশন কন্টেক্স সম্পর্কে শিখেছেন। যদি কোন প্রশ্ন বা মতামত থাকে তাহলে অবশ্যই কমেন্ট করে জানাবেন। জাভাস্ক্রিপ্ট ইঞ্জিন সকল এক্সিকিউশন কন্টেক্স ট্র্যাক রাখতে কল স্ট্যাক নামক একটি Data Structure ব্যবহার করে। পরবর্তি কোন একটি আর্টিকেলে সেটি নিয়ে বিস্তারিত আলোচনা করার চেষ্টা করবো ইনশাআল্লাহ্‌।</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>রিয়েক্ট কি এবং কেন?</title>
		<link>/blog/what-is-reactjs-and-why-we-should-use-reactjs/</link>
					<comments>/blog/what-is-reactjs-and-why-we-should-use-reactjs/#respond</comments>
		
		<dc:creator><![CDATA[Saroar Shahan]]></dc:creator>
		<pubDate>Thu, 31 Dec 2020 20:14:47 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<category><![CDATA[ReactJS]]></category>
		<category><![CDATA[রিয়েক্ট]]></category>
		<guid isPermaLink="false">/?p=2323</guid>

					<description><![CDATA[এই আর্টিকেলে আমরা জানার চেষ্টা করবো রিয়েক্ট কি এবং কেন আমাদের রিয়েক্ট ব্যবহার করা উচিত। তবে, মুল লেখায় যাওয়ার আগে কিছু কথা। এটি মূলত একটি সিরিজ হবে যেখানে রিয়েক্ট উপর একদম বেসিক থেকে লেখা হবে। কিন্তু এই সিরিজে জাভাস্ক্রিপ্ট নিয়ে কোন প্রকার আলোচনা করা হবে না। তাই যাদের জাভাস্ক্রিপ্টের বেসিক সম্পর্কে ধারণা নেই তাদেরকে বলবো [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>এই আর্টিকেলে আমরা জানার চেষ্টা করবো রিয়েক্ট কি এবং কেন আমাদের রিয়েক্ট ব্যবহার করা উচিত। তবে, মুল লেখায় যাওয়ার আগে কিছু কথা। এটি মূলত একটি সিরিজ হবে যেখানে রিয়েক্ট উপর একদম বেসিক থেকে লেখা হবে। কিন্তু এই সিরিজে জাভাস্ক্রিপ্ট নিয়ে কোন প্রকার আলোচনা করা হবে না। তাই যাদের জাভাস্ক্রিপ্টের বেসিক সম্পর্কে ধারণা নেই তাদেরকে বলবো আগে বেসিকটা শিখে তারপর এই লেখাটা কন্টিনিউ করতে।</p>
<h2>রিয়েক্ট কি?</h2>
<p>রিয়েক্ট হচ্ছে সম্পূর্ণ ওপেন-সোর্স জাভাস্ক্রিপ্টের একটি লাইব্রেরী যা ইউজার ইন্টারফেস তৈরি করার জন্যে ব্যবহার করা হয়। বিশেষ করে সিঙ্গেল পেইজ অ্যাপ্লিকেশন ও ওয়েব এবং মোবাইলের ভিউ লেয়ার তৈরি করতে ব্যহার করা হয়। এটি ডিক্লেয়ারেটিভ এবং কম্পোনেন্ট-বেইসড একটি ইউআই লাইব্রেরী। যা ২০১১ সালে ফেইসবুক তাদের নিউজফিডে ডেপ্লয় করে এবং ২০১২ সালে ইন্সটাগ্রামে ব্যবহার করা হয়।</p>
<h2>রিয়েক্টের ফিচারগুলি কি কি?</h2>
<p>রিয়েক্টের কিছু গুরুত্বপূর্ণ ফিচার নিচে দেওয়া হল। ফিচারগুলোর উপর সামনে বিস্তারিত লেখা আসবে। &#8211; জেএসএক্স</p>
<ul>
<li>ডিক্লেয়ারেটিভ</li>
<li>কম্পোনেন্টস</li>
<li>ওয়ান-ওয়ে ডাটা বাইন্ডিং</li>
<li>ভার্চুয়াল ডম</li>
<li>স্ট্যাট-ম্যানেজমেন্ট</li>
</ul>
<h2>রিয়েক্ট কেন?</h2>
<p>এখন, আমাদের সামনে আসল প্রশ্ন আমাদের কেন রিয়েক্ট ব্যবহার করা উচিত। যেখানে বেশ কিছু ওপেন-সোর্স ফ্ল্যাটফর্ম আছে ফ্রন্ট-এন্ড ডেভেলপমেন্ট জীবন সহজ করার জন্যে। যেমন- অ্যাঙ্গুলার, ভিউ ইত্যাদি। নিচে কিছুর পয়েন্ট উল্লেখ্য করছি কেন আমাদে রিয়েক্ট ব্যবহার করা উচিত। &#8211; সিমপ্লিসিটি</p>
<ul>
<li>ইজি -টু-লার্ন</li>
<li>ন্যাটিভ অ্যাপ্রোচ</li>
<li>ডাটা বাইন্ডিং</li>
<li>পার্ফরমেন্স</li>
<li>এসইও ফ্রেন্ডলি</li>
<li>টেস্টাবিলিটি</li>
</ul>
<h2>রিয়েক্ট শিখতে কি কি জানা লাগবে?</h2>
<ul>
<li>জাভাস্ক্রিপ্টের বেসিক সম্পর্কে পরিষ্কার ধারণা থাকা লাগবে</li>
<li>যেকোনো একটি টেক্সট এডিটর বা আইডিই থাকা লাগবে</li>
<li>নোড জেএস ইন্সটল করা থাকা লাগবে</li>
<li>ইয়ার্ন বা এনপিএম ইন্সটল থাকা লাগবে <em>(আমি ব্যক্তিগতভাবে ইয়ার্ন ব্যবহার করি)</em></li>
</ul>
<p>আজকের জন্যে এখানেই শেষ করছি। আগামী পর্ব থেকে আমরা রিয়েক্ট শিখা শুরু করবো ইনশাআল্লা।</p>
<h4><a title="এখানে ক্লিক" href="https://shahansdiary.com/what-is-reactjs-and-why-we-should-use-reactjs/" rel="nofollow noopener" target="_blank">এখানে ক্লিক</a> করে লেখকের ব্যক্তিগত ব্লগেও পড়তে পারবেন</h4>
]]></content:encoded>
					
					<wfw:commentRss>/blog/what-is-reactjs-and-why-we-should-use-reactjs/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
