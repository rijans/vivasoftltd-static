<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Spring Security &#8211; Vivasoft</title>
	<atom:link href="/blog/tag/spring-security/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Top Software Company with Talented Geeks</description>
	<lastBuildDate>Thu, 30 Dec 2021 11:06:35 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1</generator>

<image>
	<url>/wp-content/uploads/2021/08/cropped-feb-icon-32x32.png</url>
	<title>Spring Security &#8211; Vivasoft</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>স্প্রিং সিকিউরিটিঃ আপনার অ্যাপ্লিকেশনের সুরক্ষায়</title>
		<link>/blog/%e0%a6%b8%e0%a7%8d%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%82-%e0%a6%b8%e0%a6%bf%e0%a6%95%e0%a6%bf%e0%a6%89%e0%a6%b0%e0%a6%bf%e0%a6%9f%e0%a6%bf%e0%a6%83-%e0%a6%86%e0%a6%aa%e0%a6%a8%e0%a6%be%e0%a6%b0/</link>
					<comments>/blog/%e0%a6%b8%e0%a7%8d%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%82-%e0%a6%b8%e0%a6%bf%e0%a6%95%e0%a6%bf%e0%a6%89%e0%a6%b0%e0%a6%bf%e0%a6%9f%e0%a6%bf%e0%a6%83-%e0%a6%86%e0%a6%aa%e0%a6%a8%e0%a6%be%e0%a6%b0/#respond</comments>
		
		<dc:creator><![CDATA[Ashiqul]]></dc:creator>
		<pubDate>Tue, 08 May 2018 09:11:43 +0000</pubDate>
				<category><![CDATA[Data]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[Spring]]></category>
		<category><![CDATA[Spring Boot]]></category>
		<category><![CDATA[Spring Security]]></category>
		<category><![CDATA[Web App]]></category>
		<guid isPermaLink="false">http://www.vivacomsolutions.com/?p=1622</guid>

					<description><![CDATA[স্প্রিং সিকিউরিটিঃ আপনার অ্যাপ্লিকেশনের সুরক্ষায় যেকোন ওয়েব অ্যাপ্লিকেশন এর ক্ষেত্রে সিকিউরিটি একটি অত্যন্ত গুরুত্বপুর্ণ ব্যাপার। আমরা জানি ইন্টারনেট প্রচুর দুষ্ট লোকজন দিয়ে ভর্তি  । অনেক অনেক বিনিদ্র রজনী পার করে লাইনের পর লাইন কোড লিখে যখন অবশেষে আমরা আমাদের অ্যাপটিকে নিজস্ব লোকাল সার্ভার থেকে ইন্তারনেট নামক সেই ভয়াল জঙ্গলে আপ্লোড করি, আমরা চাই আমাদের অতি আদরের [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1 class="the-title entry-title"><strong>স্প্রিং সিকিউরিটিঃ আপনার অ্যাপ্লিকেশনের সুরক্ষায়</strong></h1>
<p>যেকোন ওয়েব অ্যাপ্লিকেশন এর ক্ষেত্রে সিকিউরিটি একটি অত্যন্ত গুরুত্বপুর্ণ ব্যাপার। আমরা জানি ইন্টারনেট প্রচুর দুষ্ট লোকজন দিয়ে ভর্তি  । অনেক অনেক বিনিদ্র রজনী পার করে লাইনের পর লাইন কোড লিখে যখন অবশেষে আমরা আমাদের অ্যাপটিকে নিজস্ব লোকাল সার্ভার থেকে ইন্তারনেট নামক সেই ভয়াল জঙ্গলে আপ্লোড করি, আমরা চাই আমাদের অতি আদরের ছোট্ট অ্যাপটি যেন সেইসব দুষ্ট লোকজনের থেকে নিরাপদে থাকে। আমরা চাই আমাদের অ্যাপ্লিকেশন এর কিছু কিছু অংশ শুধু মাত্র কিছু স্পেশাল লোকজন (অথেনটিকেড ইউজার) যেন দেখতে পায়। কিন্তু কিভাবে? শুনে মনে হচ্ছে অনেক কিছু করতে হবে। অনেক অনেক কোড লিখতে হবে। কিন্তু আমরা তো আরামপ্রিয় মানুষ  ( হেটার্স রা বলবে আইলসা  )। আমরা তো এত কস্ট করতে চাইনা! আমরা শুধু চাই আমাদের অ্যাপ্লিকেশন টিকে সিকিউর করতে। টেনশন নিয়েন না। আপনার আমার মত আইলসা পাব্লিকের জন্যই <a href="https://pivotal.io/" rel="nofollow noopener" target="_blank">Pivotal</a> এর জোস জোস বড় ভাইয়েরা বানিয়েছে এক অসসাধারন ফ্রেমওয়ার্ক! নাম তার স্প্রিং সিকিউরিটি  আজকের এই পোস্টে আমি হাল্কার উপর ঝাপসা দিয়ে দেখাবো কিভাবে এই টুল টি ব্যবহার করে আমরা আমাদের ওয়েব অ্যাপ্লিকেশন কে  শত্রুর হাত থেকে নিরাপদে রাখতে পারি  ।</p>
<h1><strong>কি করবো</strong></h1>
<p>এখন আসেন  দেখে নেই আমরা আসলে কি করতে চাচ্ছি। আমাদের ঘর (অ্যাপ্লিকেশন) এ <strong>দুই ধরনের</strong>কক্ষ(পেজ/লিঙ্ক) আছে। বসার কক্ষ(<strong>পাব্লিক পেজ</strong>) যেখানে আমজনতা সবাই ঢুকতে পারবে এবং শোবার কক্ষ(<strong>প্রাইভেট পেজ</strong>) যেখানে শুধুমাত্র স্পেশাল মানুসজন( যাদের মন ভালো এবং তাদের কাছে <strong>ইউজারনেম</strong> ও <strong>পাসোওার্ড</strong> আছে)। যখনি কোন আগন্তুক আমাদের শোবার কক্ষে ঢুকতে চাইবে তখন আমরা তাকে একটি লগিন পেজ এ নিয়ে যাবো। সঠিক নামপরিচয়(ইউজারনেম ও পাসওর্ড) দেওয়ার পর ই শুধু মাত্র আমরা তাকে ঢুকতে দিবো।</p>
<h1><strong>কিভাবে করবো</strong></h1>
<p>মাত্র ৪ টি সহজ পদক্ষেপে আমরা পুরো কাজটি সেরে ফেলবো। এই টিউটরিয়াল এ আমরা ফ্রেমওয়ার্ক হিসেবে ব্যবহার করবো স্প্রিং বুট।  সুতরাং দেরী না করে চলুন শুরু করা যাক। আপনারা যন্ত্রপাতি নিয়ে তৈরী হয়ে যান(মানে IDE ওপেন করেন আরকি) (যেহেতু এখন আমরা কোড লিখবো, দুষ্টুমি কথাবার্তা একদম ই বাদ। এখন আমরা সবাই সিরিয়াস  )</p>
<h2>ধাপ ১ঃ ডেমো প্রজেক্ট তৈরীকরন</h2>
<p>প্রথমে <a href="https://start.spring.io/" rel="nofollow noopener" target="_blank">স্প্রিং ইনিশিয়ালাইজার</a> এ গিয়ে আমরা একটি ডেমো স্টার্টার প্রোজেক্ট তৈরী করবো। ডিপেন্ডেন্সি হিসেবে <strong>Web</strong>, <strong>Security</strong> এবং <strong>Thymeleaf </strong> হলেই চলবে আপাতত। জিপ ফাইলটা আনজিপ করে আপনার পছন্দের IDE তে প্রজেক্ট ইমপোর্ট করুন। (ধরে নিচ্ছি আমরা সবাই জানি কিভাবে স্প্রিং ইনিশিয়ালাইজার থেকে স্টার্টার প্রোজেক্ট ডাউনলোড করতে হয় এবং কিভাবে সেটা IDE তে ওপেন করতে হয়। সুতরাং ঐ ব্যাপারে বিস্তারিত কিছু লিখছি না)</p>
<h2><strong>ধাপ ২ঃ স্প্রিং সিকিউরিটি কনফিগারেশন</strong></h2>
<p>এখন আমাদের দরকার একটি কনফিগারেশন ক্লাস যেটাতে আমরা স্প্রিং সিকিউরিটি কনফিগার করবো।  <strong>SecurityConfig.java</strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="java">package com.rashidul.springsecdemo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
@Override
protected void configure(HttpSecurity http) throws Exception {
http
.csrf().disable()
.authorizeRequests()
.antMatchers(“/”).permitAll()
.antMatchers(“/private”).authenticated()
.and()
.formLogin()
.usernameParameter(“user”)
.passwordParameter(“password”)
.defaultSuccessUrl(“/private”)
.loginPage(“/login”);
}

@Autowired
public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
auth.inMemoryAuthentication().withUser(“rashidul”).password(“rashidul123”).roles(“USER”);
}
}</pre>
<p>SecurityConfig.java ক্লাস টা আমরা এক্সটেন্ড করছি WebSecurityConfigurerAdapter ক্লাস থেকে। configure নামে যে মেথড টা ওভাররাইড করা হচ্ছে সেখানে আমরা আসলে বলে দিচ্ছি কোন কোন URL গুলো অথেন্টিকেশন ছাড়াই এক্সেস করা যাবে এবং কোন গুলোর জন্য ইউজার কে প্রথমে লগিন করতে হবে।  configureGlobal মেথড এ বলা হচ্ছে কোন সোর্স থেকে ইউজার এর দেওয়া ইউজারনেম এবং পাসওয়ার্ড এর কম্বিনেশন ভেরিফাই করা হবে। আমাদের জন্য সহজ হবে তাই আমরা এখানে ইন মেমোরি অথেন্টিকেশন ব্যবহার করছি।</p>
<h2><strong>ধাপ ৩ঃ কিছু দরকারি ফাইল </strong></h2>
<p>পুরো ব্যাপার টা ঠিক মত কাজ করছে কিনা সেটা পরীক্ষা করার জন্য আমরা কিছু ফাইল তৈরী করবো।</p>
<ol>
<li>ResourceController.java</li>
</ol>
<pre class="EnlighterJSRAW" data-enlighter-language="java">package com.rashidul.springsecdemo;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping(“/”)
public class ResourceController {

@GetMapping(“”)
public String index(){

return “index”;
}

@GetMapping(“/private”)
public String privatePage(){

return “private”;
}

@GetMapping(“/login”)
public String loginPage(){

return “login”;
}
}</pre>
<p>2. index.html</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic"></pre>
<h1>Hi, this is a public page. everyone can see this</h1>
<pre class="EnlighterJSRAW" data-enlighter-language="generic"></pre>
<p>3. private.html</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic"><code>


    </code></pre>
<h1>Hi, this is a private page. only authenticated users can see this.</h1>
<pre class="EnlighterJSRAW" data-enlighter-language="generic"><code>

</code></pre>
<p>4. login.html</p>
<pre class="EnlighterJSRAW" data-enlighter-language="html"></pre>
<h1>Bro you need to login first</h1>
<form action="login" method="POST"><input name="user" type="text" placeholder="User name" /><br />
<input name="password" type="password" placeholder="Password" /><br />
<button type="submit">Submit</button></form>
<pre class="EnlighterJSRAW" data-enlighter-language="html">
</pre>
<p>টেমপ্লেট ফাইল গুলো src/main/resources/templates এই ডিরেক্টরিতে তৈরী করতে হবে।</p>
<h2><strong>ধাপ ৪ঃ কাজ শেষ, এবার আউটপুট দেখার পালা 😀</strong></h2>
<p>অ্যাপ্লিকেশন টি রান করে ব্রাউজার এ যদি ওপেন করি তাহলে দেখতে পাবোঃ</p>
<div class=""><img decoding="async" src="/wp-content/uploads/2018/05/tab-0-1.png" alt="tab 0 1 স্প্রিং সিকিউরিটিঃ আপনার অ্যাপ্লিকেশনের সুরক্ষায়"></div>
<p>তারমানে আমরা আমাদের অ্যাপ্লিকেশন এর হোম ইউআরএল অথেনটিকেশন ছাড়াই দেখতে পাবো। কিন্তু আমরা যদি <strong>“/private”</strong> লিঙ্ক এ যাওয়ার চেস্টা করি তাহলে আমাদের কে রিডিরেক্ট করে লগিন পেজ এ নিয়ে যাবে। [/av_textblock] [av_image src=&#8217;/wp-content/uploads/2018/05/tab-1.png&#8217; attachment=&#8217;1629&#8242; attachment_size=&#8217;full&#8217; align=&#8217;center&#8217; styling=&#8221; hover=&#8217;av-hover-grow&#8217; link=&#8221; target=&#8221; caption=&#8221; font_size=&#8221; appearance=&#8221; overlay_opacity=&#8217;0.4&#8242; overlay_color=&#8217;#000000&#8242; overlay_text_color=&#8217;#ffffff&#8217; animation=&#8217;no-animation&#8217; admin_preview_bg=&#8221;][/av_image] [av_textblock size=&#8221; font_color=&#8221; color=&#8221; av-medium-font-size=&#8221; av-small-font-size=&#8221; av-mini-font-size=&#8221; admin_preview_bg=&#8221;] এবং ইউজারনেম/পাসওয়ার্ড দিয়ে লগিন করার পরে আমরা <strong>“/private”</strong> লিঙ্ক অ্যাক্সেস করতে পারবো। [/av_textblock] [av_image src=&#8217;/wp-content/uploads/2018/05/tab-2.png&#8217; attachment=&#8217;1630&#8242; attachment_size=&#8217;full&#8217; align=&#8217;center&#8217; styling=&#8221; hover=&#8217;av-hover-grow&#8217; link=&#8221; target=&#8221; caption=&#8221; font_size=&#8221; appearance=&#8221; overlay_opacity=&#8217;0.4&#8242; overlay_color=&#8217;#000000&#8242; overlay_text_color=&#8217;#ffffff&#8217; animation=&#8217;no-animation&#8217; admin_preview_bg=&#8221;][/av_image] [av_textblock size=&#8221; font_color=&#8221; color=&#8221; av-medium-font-size=&#8221; av-small-font-size=&#8221; av-mini-font-size=&#8221; admin_preview_bg=&#8221;] স্প্রিং বেজড অ্যাপ্লিকেশন এ অথেনটিকেশন এবং অথোরাইজেশন এর জন্য স্প্রিং সিকিউরিটি খুব ই ফ্লেক্সিবল একটা ফ্রেমওয়ার্ক। অনেক ধরনের কনফিগারেশন অপশন আছে সুতরাং আপনি আপনার প্রয়োজনমত এটাকে কনফিগার করে নিতে পারবেন। আজকে আমি খুব ই বেসিক কিছু দেখানর চেস্টা করলাম(কারন হাতে সময় কম এবং আমি খুব ই আইলসা 😞 )  কিন্তু ভবিষ্যতে হয়তো এই ব্যাপারে আরো বিস্তারিত আলোচনা হবে। ভালো থাকবেন সবাই 🤓 <strong>সোর্সকোডঃ</strong> <a href="https://github.com/rashidul-hasan/spring-security-demo" rel="nofollow noopener" target="_blank">https://github.com/rashidul-hasan/spring-security-demo</a></p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/%e0%a6%b8%e0%a7%8d%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%82-%e0%a6%b8%e0%a6%bf%e0%a6%95%e0%a6%bf%e0%a6%89%e0%a6%b0%e0%a6%bf%e0%a6%9f%e0%a6%bf%e0%a6%83-%e0%a6%86%e0%a6%aa%e0%a6%a8%e0%a6%be%e0%a6%b0/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
