<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Masum &#8211; Vivasoft</title>
	<atom:link href="/author/masum/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Top Software Company with Talented Geeks</description>
	<lastBuildDate>Fri, 24 Sep 2021 05:14:06 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1</generator>

<image>
	<url>/wp-content/uploads/2021/08/cropped-feb-icon-32x32.png</url>
	<title>Masum &#8211; Vivasoft</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Convert  Flask Application into a Cross-Platform Desktop App Executable</title>
		<link>/blog/convert-flask-application-into-a-cross-platform-desktop-app-executable/</link>
		
		<dc:creator><![CDATA[Masum]]></dc:creator>
		<pubDate>Thu, 17 Jun 2021 13:08:56 +0000</pubDate>
				<category><![CDATA[Personal]]></category>
		<category><![CDATA[Programming & Development]]></category>
		<category><![CDATA[cross-platfrom-app]]></category>
		<category><![CDATA[executable]]></category>
		<category><![CDATA[flask]]></category>
		<category><![CDATA[pyinstaller]]></category>
		<category><![CDATA[python]]></category>
		<category><![CDATA[wsgi]]></category>
		<guid isPermaLink="false">/?p=2587</guid>

					<description><![CDATA[Python, powerful and versatile as it is, lacks a few key capabilities out of the box. For one, Python provides no native mechanism for compiling a Python program into a standalone executable package. To be fair, the original use case for Python never called for standalone packages. Python programs have, by and large, been run [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Python, powerful and versatile as it is, lacks a few key capabilities out of the box. For one, Python provides no native mechanism for compiling a Python program into a standalone executable package.</p>
<p>To be fair, the original use case for Python never called for standalone packages. Python programs have, by and large, been run in-place on systems where a copy of the Python interpreter lived. But the surging popularity of Python has created greater demand for running Python apps on systems with no installed Python runtime.</p>
<p>Several third parties have engineered solutions for deploying standalone Python apps. The most popular solution of the bunch, and the most mature, is <code>PyInstaller</code>. <code>PyInstaller</code> doesn’t make the process of packaging a Python app to go totally painless, but it goes a long way there.</p>
<h2>Waitress WSGI Server</h2>
<p>Waitress is a pure-Python WSGI server. At a first glance it might not appear to be that much different than many others; however, its development philosophy separates it from the rest. Its aim for easing the production (and development) burden caused by web servers for Python web-application developers.</p>
<p>The installation is pretty simple. It is highly recommended to create a virtual environment before you install Waitress via the pip install command:</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="powershell">pip install waitress</pre>
<pre></pre>
<p>&nbsp;</p>
<p>Then You need to first import waitress via the following command:</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="shell">from waitress import serve</pre>
<pre></pre>
<p>&nbsp;</p>
<p>I will be using the app as the variable name for the Flask server. Modify this according to the name that you have set:</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">app = Flask(__name__)</pre>
<pre></pre>
<p>Comment out the app.run in your main server and add the following code.</p>
<p>By default, Waitress binds to any IPv4 address on port 8080. You can omit the host and port arguments and just call serve with the WSGI app as a single argument. we overwrite it and set the <code>port</code> to <code>5000</code> for demostration on how to change them.</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<pre></pre>
<p>&nbsp;</p>
<p>The most commonly-used parameters for serve are as follows:</p>
<ul>
<li><code>host</code> — Hostname or IP address (string) on which to listen, default 127.0.0.1, which means “all IP addresses on this host”. May not be used with the listen parameter.</li>
<li><code>port</code> — TCP port (integer) on which to listen, default 8080. May not be used with the listen parameter.</li>
<li><code>ipv4</code> — Enable or disable IPv4 (boolean).</li>
<li><code>ipv6</code> — Enable or disable IPv6 (boolean).</li>
<li><code>threads</code> — The number of threads used to process application logic (integer). The default value is 4.</li>
</ul>
<h2>Create Executable from Python Script using Pyinstaller</h2>
<p><code>PyInstaller</code> can be used to create .exe files for Windows, .app files for Mac, and distributable packages for Linux. Optionally, it can create a single file which is more convenient for distributing, but takes slightly longer to start because it unzips itself.</p>
<p>The installation is pretty simple. It is highly recommended to create a virtual environment before you install via the pip install command.</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="powershell">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<p>This file is saved in build.sh and runs this file using the following command in the terminal.</p>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="powershell">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<h3>For windows is:</h3>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="python">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<h3>For mac is:</h3>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<h3>For ubuntu is:</h3>
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="python">serve(
app.run()
   host="127.0.0.1",
   port=5000,
   threads=2
)</pre>
<pre></pre>
<p>The most commonly-used parameters for <code>build.sh</code> are as follows:</p>
<ul>
<li><code>--name</code> — Change the name of your executable.</li>
<li><code>--onefile</code> — Package your entire application into a single executable file. The default options create a folder of dependencies and an executable, whereas &#8211;onefile keeps distribution easier by creating only an executable.</li>
<li><code>--hidden-import</code> — List multiple top-level imports that PyInstaller was unable to detect automatically. This is one way to work around your code using import inside functions and <strong>import</strong>(). You can also use &#8211;hidden-import multiple times in the same command.</li>
<li><code>--add-data</code> and <code>--add-binary</code> — Instruct PyInstaller to insert additional data or binary files into your build. This is useful when you want to bundle in configuration files, examples, or other non-code data.</li>
</ul>
<p><code>PyInstaller</code> is complicated under the hood and will create a lot of output. So, it’s important to know what to focus on first. Namely, the executable you can distribute to your users and potential debugging information. By default, the pyinstaller command will create a few things of interest:</p>
<ul>
<li>A <code>*.spec</code> file
<ul>
<li>where all configuration was put by <code>pyinstaller</code></li>
</ul>
</li>
<li>A <code>build</code> folder
<ul>
<li>The <code>build</code> folder is where <code>PyInstaller</code> puts most of the metadata and internal bookkeeping for building your executable.</li>
<li>The <code>build</code> folder can be useful for debugging, but unless you have problems, this folder can largely be ignored.</li>
</ul>
</li>
<li>A <code>bin</code> folder
<ul>
<li>will be created After building, you’ll end up with a bin folder similar to the following:
<pre></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="powershell">bin/
|
└── our_app/
└── our_app  # this is the executable</pre>
</li>
</ul>
</li>
</ul>
<p>The <code>bin</code> folder contains the final artifact you’ll want to ship to your end users. Inside the <code>bin</code> folder, there is a folder named after your entry-point. So in this example, you’ll have a <code>bin/our_project</code> folder that contains all the dependencies and executable for our application.</p>
<p>The executable to run is <code>bin/our_app/our_app</code> or <code>bin/our_app/our_app.exe</code> if you’re on Windows.</p>
<p>pyInstaller creates a temp folder and the name of that folder is <code>__MEIPASS__</code>. Generally a new e.g. <code>__ME&lt;Random_Value&gt;__</code> file created at the time of each time we execute the file and previous <code>__MEIPASS__</code> file deleted because of it’s volatile memory. So the previous data is removed from storage as we store our db and other files in the that temp folder using pyinstallers <code>--add-data</code> property, but we need to store previous data for the persistence. For this reason we create a hidden folder in the system&#8217;s home directory and store data in this folder. But initially sqlite database file does not exist in this hidden folder. So at execution time we create a hidden folder in the system home directory when we execute the file and we have to copy that fresh db along with other files from the temp folder and save to the hidden folder. The code of copying and saving this db along with the other files given below:</p>
<pre><code class="language-python"> </code></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="python">import os, shutil
from pathlib import Path
from .resources import get_resources_path

APP_NAME = "our_app"
HOME_DIR = Path.home()
APP_DIR = HOME_DIR / f".{APP_NAME.lower()}"
if not APP_DIR.exists():  ## checking if our persistence hidden filder exists or not
   os.mkdir(APP_DIR)  ## create the hidden folder
data = get_resources_path() / data ## searching files in the temp folder
if not (APP_DIR /  data).exists():  ## checking if our persistence files already in the hidden directory or not
   try:
       shutil.copy(data, APP_DIR)
   except Exception as e:
       log.exception(e)</pre>
<pre><code class="language-python"> </code>Get resources path function to find the <code>__MEIPASS__</code> folder path link from where we can copy fresh data and can store to the hidden folder.</pre>
<pre><code class="language-python"></code></pre>
<pre><code class="language-python"> </code></pre>
<pre class="EnlighterJSRAW" data-enlighter-language="php">import pathlib
import sys
def get_resources_path(relative_path="."):
    rel_path = pathlib.Path(relative_path)
    prod_base_path = pathlib.Path(__file__).resolve().parent.parent

    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception as e:
        base_path = getattr(sys, "_MEIPASS", prod_base_path)

    return base_path / rel_path</pre>
<pre><code class="language-python"></code></pre>
<h2>Conclusion</h2>
<p>PyInstaller can help make complicated installation documents unnecessary. Instead, your users can simply run your executable to get started as quickly as possible. The PyInstaller workflow can be summed up by doing the following:</p>
<ul>
<li>Create an entry-point script that calls your main function.</li>
<li>Install PyInstaller.</li>
<li>Run PyInstaller on your entry-point.</li>
<li>Test your new executable.</li>
<li>Ship your resulting dist/ folder to users.</li>
</ul>
<p>Your users don’t have to know what version of Pyt hon you used or that your application uses Python at all!</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
